# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: commit.proto for package 'gitaly'

require 'grpc'
require 'commit_pb'

module Gitaly
  module CommitService
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.CommitService'

      rpc :CommitIsAncestor, CommitIsAncestorRequest, CommitIsAncestorResponse
      rpc :TreeEntry, TreeEntryRequest, stream(TreeEntryResponse)
      rpc :CommitsBetween, CommitsBetweenRequest, stream(CommitsBetweenResponse)
      rpc :CountCommits, CountCommitsRequest, CountCommitsResponse
      rpc :CountDivergingCommits, CountDivergingCommitsRequest, CountDivergingCommitsResponse
      rpc :GetTreeEntries, GetTreeEntriesRequest, stream(GetTreeEntriesResponse)
      rpc :ListFiles, ListFilesRequest, stream(ListFilesResponse)
      rpc :FindCommit, FindCommitRequest, FindCommitResponse
      rpc :CommitStats, CommitStatsRequest, CommitStatsResponse
      # Use a stream to paginate the result set
      rpc :FindAllCommits, FindAllCommitsRequest, stream(FindAllCommitsResponse)
      rpc :FindCommits, FindCommitsRequest, stream(FindCommitsResponse)
      rpc :CommitLanguages, CommitLanguagesRequest, CommitLanguagesResponse
      rpc :RawBlame, RawBlameRequest, stream(RawBlameResponse)
      rpc :LastCommitForPath, LastCommitForPathRequest, LastCommitForPathResponse
      rpc :ListLastCommitsForTree, ListLastCommitsForTreeRequest, stream(ListLastCommitsForTreeResponse)
      rpc :CommitsByMessage, CommitsByMessageRequest, stream(CommitsByMessageResponse)
      rpc :ListCommitsByOid, ListCommitsByOidRequest, stream(ListCommitsByOidResponse)
      rpc :ListCommitsByRefName, ListCommitsByRefNameRequest, stream(ListCommitsByRefNameResponse)
      rpc :FilterShasWithSignatures, stream(FilterShasWithSignaturesRequest), stream(FilterShasWithSignaturesResponse)
      # ExtractCommitSignature returns a stream because the signed text may be
      # arbitrarily large and signature verification is impossible without the
      # full text.
      rpc :ExtractCommitSignature, ExtractCommitSignatureRequest, stream(ExtractCommitSignatureResponse)
      rpc :GetCommitSignatures, GetCommitSignaturesRequest, stream(GetCommitSignaturesResponse)
      rpc :GetCommitMessages, GetCommitMessagesRequest, stream(GetCommitMessagesResponse)
    end

    Stub = Service.rpc_stub_class
  end
end
