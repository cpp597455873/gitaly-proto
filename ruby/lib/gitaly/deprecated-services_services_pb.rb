# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: deprecated-services.proto for package 'gitaly'

require 'grpc'
require 'deprecated-services_pb'

module Gitaly
  module Commit
    # TODO: remove all these legacy RPC interfaces when client references to them are removed.
    #
    # Deprecated
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.Commit'

      rpc :CommitIsAncestor, CommitIsAncestorRequest, CommitIsAncestorResponse
      rpc :TreeEntry, TreeEntryRequest, stream(TreeEntryResponse)
    end

    Stub = Service.rpc_stub_class
  end
  module Diff
    # Deprecated
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.Diff'

      # Returns stream of CommitDiffResponse with patches chunked over messages
      rpc :CommitDiff, CommitDiffRequest, stream(CommitDiffResponse)
      # Return a stream so we can divide the response in chunks of deltas
      rpc :CommitDelta, CommitDeltaRequest, stream(CommitDeltaResponse)
    end

    Stub = Service.rpc_stub_class
  end
  module Notifications
    # Deprecated
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.Notifications'

      rpc :PostReceive, PostReceiveRequest, PostReceiveResponse
    end

    Stub = Service.rpc_stub_class
  end
  module Ref
    # Deprecated
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.Ref'

      rpc :FindDefaultBranchName, FindDefaultBranchNameRequest, FindDefaultBranchNameResponse
      rpc :FindAllBranchNames, FindAllBranchNamesRequest, stream(FindAllBranchNamesResponse)
      rpc :FindAllTagNames, FindAllTagNamesRequest, stream(FindAllTagNamesResponse)
      # Find a Ref matching the given constraints. Response may be empty.
      rpc :FindRefName, FindRefNameRequest, FindRefNameResponse
      # Return a stream so we can divide the response in chunks of branches
      rpc :FindLocalBranches, FindLocalBranchesRequest, stream(FindLocalBranchesResponse)
    end

    Stub = Service.rpc_stub_class
  end
  module SmartHTTP
    # DEPRECATED
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.SmartHTTP'

      # The response body for GET /info/refs?service=git-upload-pack
      rpc :InfoRefsUploadPack, InfoRefsRequest, stream(InfoRefsResponse)
      # The response body for GET /info/refs?service=git-receive-pack
      rpc :InfoRefsReceivePack, InfoRefsRequest, stream(InfoRefsResponse)
      # Request and response body for POST /upload-pack
      rpc :PostUploadPack, stream(PostUploadPackRequest), stream(PostUploadPackResponse)
      # Request and response body for POST /receive-pack
      rpc :PostReceivePack, stream(PostReceivePackRequest), stream(PostReceivePackResponse)
    end

    Stub = Service.rpc_stub_class
  end
  module SSH
    # DEPRECATED
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.SSH'

      # To forward 'git upload-pack' to Gitaly for SSH sessions
      rpc :SSHUploadPack, stream(SSHUploadPackRequest), stream(SSHUploadPackResponse)
      # To forward 'git receive-pack' to Gitaly for SSH sessions
      rpc :SSHReceivePack, stream(SSHReceivePackRequest), stream(SSHReceivePackResponse)
    end

    Stub = Service.rpc_stub_class
  end
end
