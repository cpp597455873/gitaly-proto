# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: gitaly.proto for package 'gitaly'

require 'grpc'
require 'gitaly_pb'

module Gitaly
  module Notifications
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.Notifications'

      rpc :PostReceive, PostReceiveRequest, PostReceiveResponse
    end

    Stub = Service.rpc_stub_class
  end
  module Ref
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.Ref'

      rpc :FindDefaultBranchName, FindDefaultBranchNameRequest, FindDefaultBranchNameResponse
      rpc :FindAllBranchNames, FindAllBranchNamesRequest, stream(FindAllBranchNamesResponse)
      rpc :FindAllTagNames, FindAllTagNamesRequest, stream(FindAllTagNamesResponse)
      # Find a Ref matching the given constraints. Response may be empty.
      rpc :FindRefName, FindRefNameRequest, FindRefNameResponse
    end

    Stub = Service.rpc_stub_class
  end
  module Diff
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.Diff'

      # Returns stream of CommitDiffResponse: 1 per changed file
      rpc :CommitDiff, CommitDiffRequest, stream(CommitDiffResponse)
    end

    Stub = Service.rpc_stub_class
  end
  module Commit
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.Commit'

      rpc :CommitIsAncestor, CommitIsAncestorRequest, CommitIsAncestorResponse
    end

    Stub = Service.rpc_stub_class
  end
end
