syntax = "proto3";

package gitaly;

import "shared.proto";

service CommitService {
  rpc CommitIsAncestor(CommitIsAncestorRequest) returns (CommitIsAncestorResponse) {}
  rpc TreeEntry(TreeEntryRequest) returns (stream TreeEntryResponse) {}
  rpc CommitsBetween(CommitsBetweenRequest) returns (stream CommitsBetweenResponse) {}
  rpc CountCommits(CountCommitsRequest) returns (CountCommitsResponse) {}
}

message CommitIsAncestorRequest {
  Repository repository = 1;
  string ancestor_id = 2;
  string child_id = 3;
}

message CommitIsAncestorResponse {
  bool value = 1;
}

message TreeEntryRequest {
  Repository repository = 1;
  bytes revision = 2; // commit ID or refname
  bytes path = 3; // entry path relative to repository root
  int64 limit = 4;
}

message TreeEntryResponse {
  enum ObjectType {
    COMMIT = 0;
    BLOB = 1;
    TREE = 2;
    TAG = 3;
  }
  ObjectType type = 1;
  string oid = 2; // SHA1 object ID
  int64 size = 3;
  int32 mode = 4; // file mode
  bytes data = 5; // raw object contents
}

message CommitsBetweenRequest {
  Repository repository = 1;
  bytes from = 2;
  bytes to = 3;
}

message CommitsBetweenResponse {
  repeated GitCommit commits = 1;
}

message CountCommitsRequest {
  Repository repository = 1;
  bytes revision = 2;
}

message CountCommitsResponse {
  int32 count = 1;
}
