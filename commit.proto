syntax = "proto3";

package gitaly;

import "shared.proto";

service CommitService {
  rpc CommitIsAncestor(CommitIsAncestorRequest) returns (CommitIsAncestorResponse) {}
  rpc TreeEntry(TreeEntryRequest) returns (stream TreeEntryResponse) {}
  rpc CommitsBetween(CommitsBetweenRequest) returns (stream CommitsBetweenResponse) {}
  rpc CountCommits(CountCommitsRequest) returns (CountCommitsResponse) {}
  rpc GetTreeEntries(GetTreeEntriesRequest) returns (stream GetTreeEntriesResponse) {}
  rpc ListFiles(ListFilesRequest) returns (stream ListFilesResponse) {}
  rpc FindCommit(FindCommitRequest) returns (FindCommitResponse) {}
  rpc CommitStats(CommitStatsRequest) returns (CommitStatsResponse) {}
  // Use a stream to paginate the result set
  rpc FindAllCommits(FindAllCommitsRequest) returns (stream FindAllCommitsResponse) {};
  rpc CommitLanguages(CommitLanguagesRequest) returns (CommitLanguagesResponse) {}
}

message CommitStatsRequest {
  Repository repository = 1;
  bytes revision = 2;
}

message CommitStatsResponse {
  // OID is the commit. Empty means not found
  string oid = 1;
  int32 additions = 2;
  int32 deletions = 3;
}

message CommitIsAncestorRequest {
  Repository repository = 1;
  string ancestor_id = 2;
  string child_id = 3;
}

message CommitIsAncestorResponse {
  bool value = 1;
}

message TreeEntryRequest {
  Repository repository = 1;
  // commit ID or refname
  bytes revision = 2;
  // entry path relative to repository root
  bytes path = 3;
  int64 limit = 4;
}

message TreeEntryResponse {
  enum ObjectType {
    COMMIT = 0;
    BLOB = 1;
    TREE = 2;
    TAG = 3;
  }
  ObjectType type = 1;
  // SHA1 object ID
  string oid = 2;
  int64 size = 3;
  // file mode
  int32 mode = 4;
  // raw object contents
  bytes data = 5;
}

message CommitsBetweenRequest {
  Repository repository = 1;
  bytes from = 2;
  bytes to = 3;
}

message CommitsBetweenResponse {
  repeated GitCommit commits = 1;
}

message CountCommitsRequest {
  Repository repository = 1;
  bytes revision = 2;
}

message CountCommitsResponse {
  int32 count = 1;
}

message TreeEntry {
  enum EntryType {
    BLOB = 0;
    TREE = 1;
    COMMIT = 3;
  }
  // OID of the object this tree entry points to
  string oid = 1;
  // OID of the tree attached to commit_oid
  string root_oid = 2;
  // Path relative to repository root
  bytes path = 3;
  EntryType type = 4;
  // File mode e.g. 0644
  int32 mode = 5;
  // The commit object via which this entry was retrieved
  string commit_oid = 6;
}

message GetTreeEntriesRequest {
  Repository repository = 1;
  bytes revision = 2;
  bytes path = 3;
}

message GetTreeEntriesResponse {
  repeated TreeEntry entries = 1;
}

message ListFilesRequest {
  Repository repository = 1;
  bytes revision = 2;
}

// A single 'page' of the paginated response
message ListFilesResponse {
  // Remember to force encoding utf-8 on the client side
  repeated bytes paths = 1;
}

message FindCommitRequest {
  Repository repository = 1;
  bytes revision = 2;
}

message FindCommitResponse {
  // commit is nil when the commit was not found
  GitCommit commit = 1;
}

message FindAllCommitsRequest {
  Repository repository = 1;
  // When nil, return all commits reachable by any branch in the repo
  bytes revision = 2;
  int32 max_count = 3;
  int32 skip = 4;
  enum Order {
    NONE = 0;
    TOPO = 1;
    DATE = 2;
  }
  Order order = 5;
}

// A single 'page' of the result set
message FindAllCommitsResponse {
  repeated GitCommit commits = 1;
}

message CommitLanguagesRequest {
  Repository repository = 1;
  bytes revision = 2;
}

message CommitLanguagesResponse {
  message Language {
    string name = 1;
    float share = 2;
    string color = 3;
  }
  repeated Language languages = 1;
}
