#!/usr/bin/env ruby

require 'erb'
require 'fileutils'

require_relative 'run.rb'

GO_PATH = ENV['GOPATH']
PROTO_INCLUDE = '.'
PROTO_FILES = Dir['*.proto'].sort
RUBY_PREFIX = 'ruby/lib'
RUBY_VERSION_FILE = 'gitaly/version.rb'

ENV['PATH'] = [
  File.join(GO_PATH, 'bin'),
  File.join(Dir.pwd, '_support/protoc/bin'),
  File.join(Dir.pwd, '_support/bin'),
  ENV['PATH'],
].join(':')

def main
  FileUtils.rm(Dir['go/**/*.pb.go'])
  FileUtils.rm(Dir['gateway/**/*.pb.gw.go'])
  FileUtils.rm(Dir['swagger/**'])
  run!(%W[protoc -I#{GO_PATH}/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis -I #{PROTO_INCLUDE}] + PROTO_FILES + %w[--go_out=plugins=grpc:go --grpc-gateway_out=gateway --swagger_out=logtostderr=true:swagger])

  # Merge the swagger definitions into a single file
  run!(%W[#{__dir__}/merge-swagger-definitions])

  # Generate a swagger client
  FileUtils.rm(Dir['ruby_swagger/**/*.rb'])  
  run!(%W[swagger-codegen generate -i swagger/main.json -l ruby -o ruby_swagger/])
  
  

  FileUtils.rm(Dir[File.join(RUBY_PREFIX, '**/*_pb.rb')])
  ruby_lib_gitaly = File.join(RUBY_PREFIX, 'gitaly')
  run!(%W[grpc_tools_ruby_protoc -I#{GO_PATH}/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis -I #{PROTO_INCLUDE} --ruby_out=#{ruby_lib_gitaly} --grpc_out=#{ruby_lib_gitaly}] + PROTO_FILES)
  write_ruby_requires
end

def write_ruby_requires
  requires = Dir.chdir(RUBY_PREFIX) { Dir['gitaly/*_services_pb.rb'] }.sort
  abort "No auto-generated Ruby service files found" if requires.empty?
  requires.unshift(RUBY_VERSION_FILE)
  gem_root = File.join(RUBY_PREFIX, 'gitaly.rb')
  gem_root_template = ERB.new <<EOT
# This file is generated by #{File.basename($0)}. Do not edit.
$:.unshift(File.expand_path('../gitaly', __FILE__))
<% requires.each do |f| %>
require '<%= f.sub(/\.rb$/, '') %>'
<% end %>
EOT
  open(gem_root, 'w') { |f| f.write(gem_root_template.result(binding)) }
end

main
