#!/usr/bin/env ruby
require 'erb'

require_relative 'run.rb'

GEM_NAME = 'gitaly'
RUBY_PREFIX = 'ruby/lib'
RUBY_VERSION_FILE = 'gitaly/version.rb'

def main(version)
  run!(%w[_support/generate-from-proto])
  puts 'Testing for changed files'
  run!(%w[git diff --quiet --exit-code])
  puts 'Testing for staged changes'
  run!(%w[git diff --quiet --cached --exit-code])
  write_ruby_requires
  write_version_files(version)
  version_msg = "Version #{version}"
  run!(%W[git commit -m #{version_msg}])
  tag_name = "v#{version}"
  run!(%W[git tag -a -m #{version_msg} #{tag_name}])
  run!(%W[git show --pretty #{tag_name}])
  run!(%W[gem build #{GEM_NAME}.gemspec])
  puts "Proceed to publish version #{version}? Enter 'Yes' to continue; Ctrl-C to abort"
  $stdout.flush
  abort unless $stdin.gets.chomp == 'Yes'
  %w[
    https://gitlab.com/gitlab-org/gitaly-proto.git
    https://dev.gitlab.org/gitlab/gitaly-proto.git
  ].each do |remote|
    run!(%W[git push #{remote} HEAD #{tag_name}])
  end
  run!(%W[gem push #{GEM_NAME}-#{version}.gem])
end

def write_version_files(version)
  version_file = 'VERSION'
  open(version_file, 'w') { |f| f.puts version }
  run!(%W[git add #{version_file}])

  go_version_file = 'go/VERSION'
  open(go_version_file, 'w') { |f| f.puts version }
  run!(%W[git add #{go_version_file}])

  version_rb_template = ERB.new <<EOT
# This file was auto-generated by #{$0}
module Gitaly
  VERSION = "#{version}"
end
EOT
  version_rb = File.join(RUBY_PREFIX, RUBY_VERSION_FILE)
  open(version_rb, 'w') { |f| f.write(version_rb_template.result) }
  run!(%W[git add #{version_rb}])
end

def write_ruby_requires
  requires = Dir.chdir(RUBY_PREFIX) { Dir['gitaly/*_services_pb.rb'] }
  abort "No auto-generated Ruby service files found" if requires.empty?
  requires.unshift(RUBY_VERSION_FILE)
  gem_root = File.join(RUBY_PREFIX, 'gitaly.rb')
  gem_root_template = ERB.new <<EOT
# This file is generated by _support/release. Do not edit.
$:.unshift(File.expand_path('../gitaly', __FILE__))
<% requires.each do |f| %>
require '<%= f.sub(/\.rb$/, '') %>'
<% end %>
EOT
  open(gem_root, 'w') { |f| f.write(gem_root_template.result(binding)) }
  run!(%W[git add #{gem_root}])
end

def error(msg)
  warn "#{$0}: #{msg}"
end

unless ARGV.count == 1
  warn "Usage: #{$0} VERSION"
  warn "Specify version as x.y.z"
  abort
end

directory_current_file = File.expand_path('..', __FILE__)
git_root_current_file = capture!(%w[git rev-parse --show-toplevel], directory_current_file).chomp
unless git_root_current_file == Dir.pwd
  error "#{$0}: this script must be run from the root of the Gitaly repository"
  abort
end

main(ARGV.first)
