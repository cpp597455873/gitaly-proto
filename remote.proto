syntax = "proto3";

package gitaly;

import "shared.proto";

service RemoteService {
    rpc AddRemote(AddRemoteRequest) returns (AddRemoteResponse) {}
    rpc FetchInternalRemote(FetchInternalRemoteRequest) returns (FetchInternalRemoteResponse) {}
    rpc RemoveRemote(RemoveRemoteRequest) returns (RemoveRemoteResponse) {}
    rpc UpdateRemoteMirror(stream UpdateRemoteMirrorRequest) returns (UpdateRemoteMirrorResponse) {}
    // This checks if the remote URL is available (e.g. for imports)
    rpc FindRemoteRepository(FindRemoteRepositoryRequest) returns (FindRemoteRepositoryResponse) {}
    // This checks if the remote name or URL exists for a given repository
    rpc RemoteExists(RemoteExistsRequest) returns (RemoteExistsResponse) {}
}

message AddRemoteRequest {
    Repository repository = 1;
    string name = 2;
    string url = 3;
    // DEPRECATED: https://gitlab.com/gitlab-org/gitaly-proto/merge_requests/137
    reserved 4;
    reserved "mirror_refmap";
    // If any, the remote is configured as a mirror with those mappings
    repeated string mirror_refmaps = 5;
}

message AddRemoteResponse {}

message RemoveRemoteRequest {
    Repository repository = 1;
    string name = 2;
}

message RemoveRemoteResponse {
    bool result = 1;
}

message FetchInternalRemoteRequest {
    Repository repository = 1;
    Repository remote_repository = 2;
}

message FetchInternalRemoteResponse {
    bool result = 1;
}

message UpdateRemoteMirrorRequest {
    Repository repository = 1;
    string ref_name = 2;
    repeated bytes only_branches_matching = 3;
}

message UpdateRemoteMirrorResponse {}

message FindRemoteRepositoryRequest {
  string remote = 1;
}

// This might throw a GRPC Unavailable code, to signal the request failure
// is transient.
message FindRemoteRepositoryResponse {
  bool exists = 1;
}

message RemoteExistsRequest {
  Repository repository = 1;
  string name_or_url = 2;
}

message RemoteExistsResponse {
  bool exists = 1;
}
