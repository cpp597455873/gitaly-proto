syntax = "proto3";

package gitaly;

import "shared.proto";

service RepositoryService {
  rpc RepositoryExists(RepositoryExistsRequest) returns (RepositoryExistsResponse) {}
  rpc RepackIncremental(RepackIncrementalRequest) returns (RepackIncrementalResponse) {};
  rpc RepackFull(RepackFullRequest) returns (RepackFullResponse) {};
  rpc GarbageCollect(GarbageCollectRequest) returns (GarbageCollectResponse) {};
  rpc RepositorySize(RepositorySizeRequest) returns (RepositorySizeResponse) {}
  rpc ApplyGitattributes(ApplyGitattributesRequest) returns (ApplyGitattributesResponse) {}
  rpc FetchRemote(FetchRemoteRequest) returns (FetchRemoteResponse) {};
  rpc CreateRepository(CreateRepositoryRequest) returns (CreateRepositoryResponse) {};
  rpc GetArchive(GetArchiveRequest) returns (stream GetArchiveResponse) {}
  rpc HasLocalBranches(HasLocalBranchesRequest) returns (HasLocalBranchesResponse) {}
  rpc FetchSourceBranch(FetchSourceBranchRequest) returns (FetchSourceBranchResponse) {}
  rpc Fsck(FsckRequest) returns (FsckResponse) {}
  rpc WriteRef(WriteRefRequest) returns (WriteRefResponse) {}
  rpc FindMergeBase(FindMergeBaseRequest) returns (FindMergeBaseResponse) {}
  rpc CreateFork(CreateForkRequest) returns (CreateForkResponse) {}
  rpc IsRebaseInProgress(IsRebaseInProgressRequest) returns (IsRebaseInProgressResponse) {}
  rpc IsSquashInProgress(IsSquashInProgressRequest) returns (IsSquashInProgressResponse) {}
  rpc CreateRepositoryFromURL(CreateRepositoryFromURLRequest) returns (CreateRepositoryFromURLResponse) {}
  rpc CreateBundle(CreateBundleRequest) returns (stream CreateBundleResponse) {}
  rpc CreateRepositoryFromBundle(stream CreateRepositoryFromBundleRequest) returns (CreateRepositoryFromBundleResponse) {}
  rpc WriteConfig(WriteConfigRequest) returns (WriteConfigResponse) {}
  rpc FindLicense(FindLicenseRequest) returns (FindLicenseResponse) {}
  rpc GetInfoAttributes(GetInfoAttributesRequest) returns (stream GetInfoAttributesResponse) {}
  rpc CalculateChecksum(CalculateChecksumRequest) returns (CalculateChecksumResponse) {}
  rpc Cleanup(CleanupRequest) returns (CleanupResponse) {}
  rpc GetSnapshot(GetSnapshotRequest) returns (stream GetSnapshotResponse) {}
  rpc CreateRepositoryFromSnapshot(CreateRepositoryFromSnapshotRequest) returns (CreateRepositoryFromSnapshotResponse) {}
  rpc GetRawChanges(GetRawChangesRequest) returns (stream GetRawChangesResponse) {}
}

message RepositoryExistsRequest {
  Repository repository = 1;
}

message RepositoryExistsResponse {
  bool exists = 1;
}

message RepackIncrementalRequest {
  Repository repository = 1;
}

message RepackIncrementalResponse {}

message RepackFullRequest {
  Repository repository = 1;
  bool create_bitmap = 2;
}

message RepackFullResponse {}

message GarbageCollectRequest {
  Repository repository = 1;
  bool create_bitmap = 2;
}

message GarbageCollectResponse {}

message CleanupRequest {
  Repository repository = 1;
}

message CleanupResponse {}

message RepositorySizeRequest {
  Repository repository = 1;
}

message RepositorySizeResponse {
  // Repository size in kilobytes
  int64 size = 1;
}

message ApplyGitattributesRequest {
  Repository repository = 1;
  bytes revision = 2;
}

message ApplyGitattributesResponse {}

message FetchRemoteRequest {
  Repository repository = 1;
  string remote = 2;
  bool force = 3;
  bool no_tags = 4;
  int32 timeout = 5;
  string ssh_key = 6;
  string known_hosts = 7;
  reserved 8;
  bool no_prune = 9;
}

message FetchRemoteResponse {}

message CreateRepositoryRequest {
  Repository repository = 1;
}

message CreateRepositoryResponse {}

message GetArchiveRequest {
  enum Format {
    ZIP = 0;
    TAR = 1;
    TAR_GZ = 2;
    TAR_BZ2 = 3;
  }

  Repository repository = 1;
  string commit_id = 2;
  string prefix = 3;
  Format format = 4;
}

message GetArchiveResponse {
  bytes data = 1;
}

message HasLocalBranchesRequest {
  Repository repository = 1;
}

message HasLocalBranchesResponse {
  bool value = 1;
}

message FetchSourceBranchRequest {
  Repository repository = 1;
  Repository source_repository = 2;
  bytes source_branch = 3;
  bytes target_ref = 4;
}

message FetchSourceBranchResponse {
  bool result = 1;
}

message FsckRequest {
  Repository repository = 1;
}

message FsckResponse {
  bytes error = 1;
}

message WriteRefRequest {
  Repository repository = 1;
  bytes ref = 2;
  bytes revision = 3;
  bytes old_revision = 4;
  bool force = 5;
  bool shell = 6;
}

message WriteRefResponse {
  bytes error = 1;
}

message FindMergeBaseRequest {
  Repository repository = 1;
  // We use a repeated field because rugged supports finding a base
  // for more than 2 revisions, so if we needed that in the future we don't
  // need to change the protocol.
  repeated bytes revisions = 2;
}

message FindMergeBaseResponse {
  string base = 1;
}

message CreateForkRequest {
  Repository repository = 1;
  Repository source_repository = 2;
}

message CreateForkResponse {}

message IsRebaseInProgressRequest {
  Repository repository = 1;
  string rebase_id = 2;
}

message IsRebaseInProgressResponse {
  bool in_progress = 1;
}

message IsSquashInProgressRequest {
  Repository repository = 1;
  string squash_id = 2;
}

message IsSquashInProgressResponse {
  bool in_progress = 1;
}

message CreateRepositoryFromURLRequest {
  Repository repository = 1;
  string url = 2;
}

message CreateRepositoryFromURLResponse {}

message CreateBundleRequest {
  Repository repository = 1;
}

message CreateBundleResponse {
  bytes data = 1;
}

message WriteConfigRequest {
  Repository repository = 1;
  string full_path = 2;
}

message WriteConfigResponse {
  bytes error = 1;
}

message CreateRepositoryFromBundleRequest {
  // Only available on the first message
  Repository repository = 1;
  bytes data = 2;
}

message CreateRepositoryFromBundleResponse {}

message FindLicenseRequest {
  Repository repository = 1;
}

message FindLicenseResponse {
  string license_short_name = 1;
}

message GetInfoAttributesRequest {
  Repository repository = 1;
}

message GetInfoAttributesResponse {
  bytes attributes = 1;
}

message CalculateChecksumRequest {
  Repository repository = 1;
}

message CalculateChecksumResponse {
  string checksum = 1;
}

message GetSnapshotRequest {
  Repository repository = 1;
}

message GetSnapshotResponse {
  bytes data = 1;
}

message CreateRepositoryFromSnapshotRequest {
  Repository repository = 1;
  string http_url = 2;
  string http_auth = 3;
}

message CreateRepositoryFromSnapshotResponse {}

message GetRawChangesRequest {
  Repository repository = 1;
  string from_revision = 2;
  string to_revision = 3;
}

message GetRawChangesResponse {
  message RawChange {
    enum Operation {
      UNKNOWN = 0;
      ADDED = 1;
      COPIED = 2;
      DELETED = 3;
      MODIFIED = 4;
      RENAMED = 5;
      TYPE_CHANGED = 6;
    }

    string blob_id = 1;
    int64 size= 2;
    string new_path = 3;
    string old_path = 4;
    Operation operation= 5;
    string raw_operation = 6;
  }

  repeated RawChange raw_changes = 1;
}
