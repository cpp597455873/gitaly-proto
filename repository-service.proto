syntax = "proto3";

package gitaly;

import "shared.proto";

service RepositoryService {
  rpc RepositoryExists(RepositoryExistsRequest) returns (RepositoryExistsResponse) {}
  rpc RepositoryIsEmpty(RepositoryIsEmptyRequest) returns (RepositoryIsEmptyResponse) {}
  rpc RepackIncremental(RepackIncrementalRequest) returns (RepackIncrementalResponse) {};
  rpc RepackFull(RepackFullRequest) returns (RepackFullResponse) {};
  rpc GarbageCollect(GarbageCollectRequest) returns (GarbageCollectResponse) {};
  rpc RepositorySize(RepositorySizeRequest) returns (RepositorySizeResponse) {}
  rpc ApplyGitattributes(ApplyGitattributesRequest) returns (ApplyGitattributesResponse) {}
  rpc FetchRemote(FetchRemoteRequest) returns (FetchRemoteResponse) {};
  rpc CreateRepository(CreateRepositoryRequest) returns (CreateRepositoryResponse) {};
  rpc GetArchive(GetArchiveRequest) returns (stream GetArchiveResponse) {}
  rpc HasLocalBranches(HasLocalBranchesRequest) returns (HasLocalBranchesResponse) {}
  rpc ChangeStorage(ChangeStorageRequest) returns (ChangeStorageResponse) {}
  rpc FetchSourceBranch(FetchSourceBranchRequest) returns (FetchSourceBranchResponse) {}
  rpc Fsck(FsckRequest) returns (FsckResponse) {}
  rpc WriteRef(WriteRefRequest) returns (WriteRefResponse) {}
}

message RepositoryExistsRequest {
  Repository repository = 1;
}

message RepositoryExistsResponse {
  bool exists = 1;
}

message RepositoryIsEmptyRequest {
  Repository repository = 1;
}

message RepositoryIsEmptyResponse {
  bool is_empty = 1;
}

message RepackIncrementalRequest {
  Repository repository = 1;
}

message RepackIncrementalResponse {}

message RepackFullRequest {
  Repository repository = 1;
  bool create_bitmap = 2;
}

message RepackFullResponse {}

message GarbageCollectRequest {
  Repository repository = 1;
  bool create_bitmap = 2;
}

message GarbageCollectResponse {}

message RepositorySizeRequest {
  Repository repository = 1;
}

message RepositorySizeResponse {
  // Repository size in kilobytes
  int64 size = 1;
}

message ApplyGitattributesRequest {
  Repository repository = 1;
  bytes revision = 2;
}

message ApplyGitattributesResponse {}

message FetchRemoteRequest {
  Repository repository = 1;
  string remote = 2;
  bool force = 3;
  bool no_tags = 4;
  int32 timeout = 5;
  string ssh_key = 6;
  string known_hosts = 7;
}

message FetchRemoteResponse {}

message CreateRepositoryRequest {
  Repository repository = 1;
}

message CreateRepositoryResponse {}

message GetArchiveRequest {
  enum Format {
    ZIP = 0;
    TAR = 1;
    TAR_GZ = 2;
    TAR_BZ2 = 3;
  }

  Repository repository = 1;
  string commit_id = 2;
  string prefix = 3;
  Format format = 4;
}

message GetArchiveResponse {
  bytes data = 1;
}

message HasLocalBranchesRequest {
  Repository repository = 1;
}

message HasLocalBranchesResponse {
  bool value = 1;
}

message ChangeStorageRequest {
  Repository repository = 1;
  string new_storage_name = 2;
}

message ChangeStorageResponse {}

message FetchSourceBranchRequest {
  Repository repository = 1;
  Repository source_repository = 2;
  bytes source_branch = 3;
  bytes target_ref = 4;
}

message FetchSourceBranchResponse {
  bool result = 1;
}

message FsckRequest {
  Repository repository = 1;
}

message FsckResponse {
  bytes error = 1;
}

message WriteRefRequest {
  Repository repository = 1;
  bytes ref = 2;
  bytes revision = 3;
  bool force = 4;
}

message WriteRefResponse {
  bytes error = 1;
}
