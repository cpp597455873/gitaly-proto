syntax = "proto3";

package gitaly;

import "commit.proto";
import "diff.proto";
import "notifications.proto";
import "ref.proto";
import "smarthttp.proto";
import "ssh.proto";

// TODO: remove all these legacy RPC interfaces when client references to them are removed.

// Deprecated
service Commit {
  rpc CommitIsAncestor(CommitIsAncestorRequest) returns (CommitIsAncestorResponse) {
    option deprecated = true;
  }
  rpc TreeEntry(TreeEntryRequest) returns (stream TreeEntryResponse) {
    option deprecated = true;
  };
}

// Deprecated
service Diff {
  // Returns stream of CommitDiffResponse with patches chunked over messages
  rpc CommitDiff(CommitDiffRequest) returns (stream CommitDiffResponse) {
    option deprecated = true;
  };

  // Return a stream so we can divide the response in chunks of deltas
  rpc CommitDelta(CommitDeltaRequest) returns (stream CommitDeltaResponse) {
    option deprecated = true;
  };
}

// Deprecated
service Notifications {
  rpc PostReceive(PostReceiveRequest) returns (PostReceiveResponse) {
    option deprecated = true;
  }
}

// Deprecated
service Ref {
  rpc FindDefaultBranchName(FindDefaultBranchNameRequest) returns (FindDefaultBranchNameResponse) {
    option deprecated = true;
  }
  rpc FindAllBranchNames(FindAllBranchNamesRequest) returns (stream FindAllBranchNamesResponse) {
    option deprecated = true;
  }
  rpc FindAllTagNames(FindAllTagNamesRequest) returns (stream FindAllTagNamesResponse) {
    option deprecated = true;
  }
  // Find a Ref matching the given constraints. Response may be empty.
  rpc FindRefName(FindRefNameRequest) returns (FindRefNameResponse) {
    option deprecated = true;
  }
  // Return a stream so we can divide the response in chunks of branches
  rpc FindLocalBranches(FindLocalBranchesRequest) returns (stream FindLocalBranchesResponse) {
    option deprecated = true;
  }
}

// DEPRECATED
service SmartHTTP {
  // The response body for GET /info/refs?service=git-upload-pack
  rpc InfoRefsUploadPack(InfoRefsRequest) returns (stream InfoRefsResponse) {
    option deprecated = true;
  }

  // The response body for GET /info/refs?service=git-receive-pack
  rpc InfoRefsReceivePack(InfoRefsRequest) returns (stream InfoRefsResponse) {
    option deprecated = true;
  }

  // Request and response body for POST /upload-pack
  rpc PostUploadPack(stream PostUploadPackRequest) returns (stream PostUploadPackResponse) {
    option deprecated = true;
  }

  // Request and response body for POST /receive-pack
  rpc PostReceivePack(stream PostReceivePackRequest) returns (stream PostReceivePackResponse) {
    option deprecated = true;
  }
}

// DEPRECATED
service SSH {
  // To forward 'git upload-pack' to Gitaly for SSH sessions
  rpc SSHUploadPack(stream SSHUploadPackRequest) returns (stream SSHUploadPackResponse) {
    option deprecated = true;
  }

  // To forward 'git receive-pack' to Gitaly for SSH sessions
  rpc SSHReceivePack(stream SSHReceivePackRequest) returns (stream SSHReceivePackResponse) {
    option deprecated = true;
  }
}
