{
  "swagger": "2.0",
  "info": {
    "title": "commit.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/ssh/ssh_receive_pack": {
      "post": {
        "summary": "To forward 'git receive-pack' to Gitaly for SSH sessions",
        "operationId": "SSHReceivePack",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/gitalySSHReceivePackResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "(streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalySSHReceivePackRequest"
            }
          }
        ],
        "tags": [
          "SSH"
        ]
      }
    },
    "/v1/ssh/ssh_upload_pack": {
      "post": {
        "summary": "To forward 'git upload-pack' to Gitaly for SSH sessions",
        "operationId": "SSHUploadPack",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/gitalySSHUploadPackResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "(streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalySSHUploadPackRequest"
            }
          }
        ],
        "tags": [
          "SSH"
        ]
      }
    },
    "/v1/smart_http/info_refs_receive_pack": {
      "post": {
        "summary": "The response body for GET /info/refs?service=git-receive-pack",
        "operationId": "InfoRefsReceivePack",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/gitalyInfoRefsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyInfoRefsRequest"
            }
          }
        ],
        "tags": [
          "SmartHTTP"
        ]
      }
    },
    "/v1/smart_http/info_refs_upload_pack": {
      "post": {
        "summary": "The response body for GET /info/refs?service=git-upload-pack",
        "operationId": "InfoRefsUploadPack",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/gitalyInfoRefsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyInfoRefsRequest"
            }
          }
        ],
        "tags": [
          "SmartHTTP"
        ]
      }
    },
    "/v1/smart_http/post_receive_pack": {
      "post": {
        "summary": "Request and response body for POST /receive-pack",
        "operationId": "PostReceivePack",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/gitalyPostReceivePackResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "(streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyPostReceivePackRequest"
            }
          }
        ],
        "tags": [
          "SmartHTTP"
        ]
      }
    },
    "/v1/smart_http/post_upload_pack": {
      "post": {
        "summary": "Request and response body for POST /upload-pack",
        "operationId": "PostUploadPack",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/gitalyPostUploadPackResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "(streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyPostUploadPackRequest"
            }
          }
        ],
        "tags": [
          "SmartHTTP"
        ]
      }
    },
    "/v1/ref/find_all_branch_names": {
      "post": {
        "operationId": "FindAllBranchNames",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/gitalyFindAllBranchNamesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyFindAllBranchNamesRequest"
            }
          }
        ],
        "tags": [
          "Ref"
        ]
      }
    },
    "/v1/ref/find_all_tag_names": {
      "post": {
        "operationId": "FindAllTagNames",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/gitalyFindAllTagNamesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyFindAllTagNamesRequest"
            }
          }
        ],
        "tags": [
          "Ref"
        ]
      }
    },
    "/v1/ref/find_default_branch_name": {
      "post": {
        "operationId": "FindDefaultBranchName",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/gitalyFindDefaultBranchNameResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyFindDefaultBranchNameRequest"
            }
          }
        ],
        "tags": [
          "Ref"
        ]
      }
    },
    "/v1/ref/find_local_branches": {
      "post": {
        "summary": "Return a stream so we can divide the response in chunks of branches",
        "operationId": "FindLocalBranches",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/gitalyFindLocalBranchesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyFindLocalBranchesRequest"
            }
          }
        ],
        "tags": [
          "Ref"
        ]
      }
    },
    "/v1/ref/find_ref_name": {
      "post": {
        "summary": "Find a Ref matching the given constraints. Response may be empty.",
        "operationId": "FindRefName",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/gitalyFindRefNameResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyFindRefNameRequest"
            }
          }
        ],
        "tags": [
          "Ref"
        ]
      }
    },
    "/v1/notification/post_receive": {
      "post": {
        "operationId": "PostReceive",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/gitalyPostReceiveResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyPostReceiveRequest"
            }
          }
        ],
        "tags": [
          "Notifications"
        ]
      }
    },
    "/v1/diff/commit_diff": {
      "post": {
        "summary": "Returns stream of CommitDiffResponse: 1 per changed file",
        "operationId": "CommitDiff",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/gitalyCommitDiffResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyCommitDiffRequest"
            }
          }
        ],
        "tags": [
          "Diff"
        ]
      }
    },
    "/v1/commit/commit_is_ancestor": {
      "post": {
        "operationId": "CommitIsAncestor",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/gitalyCommitIsAncestorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitalyCommitIsAncestorRequest"
            }
          }
        ],
        "tags": [
          "Commit"
        ]
      }
    }
  },
  "definitions": {
    "gitalyExitStatus": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "gitalyRepository": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        },
        "relative_path": {
          "type": "string"
        }
      }
    },
    "gitalySSHReceivePackRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository",
          "description": "'repository' must be present in the first message."
        },
        "stdin": {
          "type": "string",
          "format": "byte",
          "title": "A chunk of raw data to be copied to 'git upload-pack' standard input"
        },
        "gl_id": {
          "type": "string",
          "title": "Contents of GL_ID environment variable for 'git receive-pack'"
        }
      }
    },
    "gitalySSHReceivePackResponse": {
      "type": "object",
      "properties": {
        "stdout": {
          "type": "string",
          "format": "byte",
          "title": "A chunk of raw data from 'git receive-pack' standard output"
        },
        "stderr": {
          "type": "string",
          "format": "byte",
          "title": "A chunk of raw data from 'git receive-pack' standard error"
        },
        "exit_status": {
          "$ref": "#/definitions/gitalyExitStatus",
          "description": "This field may be nil. This is intentional: only when the remote\ncommand has finished can we return its exit status."
        }
      }
    },
    "gitalySSHUploadPackRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository",
          "description": "'repository' must be present in the first message."
        },
        "stdin": {
          "type": "string",
          "format": "byte",
          "title": "A chunk of raw data to be copied to 'git upload-pack' standard input"
        }
      }
    },
    "gitalySSHUploadPackResponse": {
      "type": "object",
      "properties": {
        "stdout": {
          "type": "string",
          "format": "byte",
          "title": "A chunk of raw data from 'git upload-pack' standard output"
        },
        "stderr": {
          "type": "string",
          "format": "byte",
          "title": "A chunk of raw data from 'git upload-pack' standard error"
        },
        "exit_status": {
          "$ref": "#/definitions/gitalyExitStatus",
          "description": "This field may be nil. This is intentional: only when the remote\ncommand has finished can we return its exit status."
        }
      }
    },
    "gitalyInfoRefsRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository"
        }
      }
    },
    "gitalyInfoRefsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "gitalyPostReceivePackRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository",
          "title": "repository should only be present in the first message of the stream"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "Raw data to be copied to stdin of 'git receive-pack'"
        },
        "gl_id": {
          "type": "string",
          "description": "gl_id becomes env variable GL_ID, used by the Git {pre,post}-receive\nhooks. Should only be present in the first message of the stream."
        }
      }
    },
    "gitalyPostReceivePackResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "title": "Raw data from stdout of 'git receive-pack'"
        }
      }
    },
    "gitalyPostUploadPackRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository",
          "title": "repository should only be present in the first message of the stream"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "Raw data to be copied to stdin of 'git upload-pack'"
        }
      }
    },
    "gitalyPostUploadPackResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "title": "Raw data from stdout of 'git upload-pack'"
        }
      }
    },
    "FindLocalBranchesRequestSortBy": {
      "type": "string",
      "enum": [
        "NAME",
        "UPDATED_ASC",
        "UPDATED_DESC"
      ],
      "default": "NAME"
    },
    "gitalyFindAllBranchNamesRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository"
        }
      }
    },
    "gitalyFindAllBranchNamesResponse": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "gitalyFindAllTagNamesRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository"
        }
      }
    },
    "gitalyFindAllTagNamesResponse": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "gitalyFindDefaultBranchNameRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository"
        }
      }
    },
    "gitalyFindDefaultBranchNameResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "gitalyFindLocalBranchCommitAuthor": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "byte"
        },
        "email": {
          "type": "string",
          "format": "byte"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gitalyFindLocalBranchResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "byte"
        },
        "commit_id": {
          "type": "string"
        },
        "commit_subject": {
          "type": "string",
          "format": "byte"
        },
        "commit_author": {
          "$ref": "#/definitions/gitalyFindLocalBranchCommitAuthor"
        },
        "commit_committer": {
          "$ref": "#/definitions/gitalyFindLocalBranchCommitAuthor"
        }
      }
    },
    "gitalyFindLocalBranchesRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository"
        },
        "sort_by": {
          "$ref": "#/definitions/FindLocalBranchesRequestSortBy"
        }
      }
    },
    "gitalyFindLocalBranchesResponse": {
      "type": "object",
      "properties": {
        "branches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitalyFindLocalBranchResponse"
          }
        }
      }
    },
    "gitalyFindRefNameRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository"
        },
        "commit_id": {
          "type": "string",
          "title": "Require that the resulting ref contains this commit as an ancestor"
        },
        "prefix": {
          "type": "string",
          "format": "byte",
          "description": "Example prefix: \"refs/heads/\". Type bytes because that is the type of ref names."
        }
      }
    },
    "gitalyFindRefNameResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "byte",
          "description": "Example name: \"refs/heads/master\". Cannot assume UTF8, so the type is bytes."
        }
      }
    },
    "gitalyPostReceiveRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository"
        }
      }
    },
    "gitalyPostReceiveResponse": {
      "type": "object"
    },
    "gitalyCommitDiffRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository"
        },
        "left_commit_id": {
          "type": "string"
        },
        "right_commit_id": {
          "type": "string"
        }
      }
    },
    "gitalyCommitDiffResponse": {
      "type": "object",
      "properties": {
        "from_path": {
          "type": "string",
          "format": "byte"
        },
        "to_path": {
          "type": "string",
          "format": "byte"
        },
        "from_id": {
          "type": "string",
          "title": "Blob ID as returned via `git diff --full-index`"
        },
        "to_id": {
          "type": "string"
        },
        "old_mode": {
          "type": "integer",
          "format": "int32"
        },
        "new_mode": {
          "type": "integer",
          "format": "int32"
        },
        "binary": {
          "type": "boolean",
          "format": "boolean"
        },
        "raw_chunks": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "description": "A CommitDiffResponse corresponds to a single changed file in a commit."
    },
    "gitalyCommitIsAncestorRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/gitalyRepository"
        },
        "ancestor_id": {
          "type": "string"
        },
        "child_id": {
          "type": "string"
        }
      }
    },
    "gitalyCommitIsAncestorResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    }
  }
}
