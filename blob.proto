syntax = "proto3";

package gitaly;

import "shared.proto";

service BlobService {
  // GetBlob returns the contents of a blob object referenced by its object
  // ID. We use a stream to return a chunked arbitrarily large binary
  // response
  rpc GetBlob(GetBlobRequest) returns (stream GetBlobResponse) {}
  // GetBlobsBySHA returns the contents of a blob objects referenced by their object
  // ID. We use a stream to return a chunked arbitrarily large binary response.
  // The blobs are sent in a continous stream, the caller is responsible for spliting
  // them up into multiple blobs by their object IDs.
  rpc GetBlobs(GetBlobsRequest) returns (stream GetBlobsResponse) {}

  // ListBlobsByRevisionPath returns the blob for each (commit_oid, path) passed in
  // Commit oid and path can vary between each request and might not have any relation to each other
  rpc ListBlobsByRevisionPaths(ListBlobsByRevisionPathsRequest) returns (stream ListBlobsByRevisionPathsResponse) {}
}

message GetBlobRequest {
  Repository repository = 1;
  // Object ID (SHA1) of the blob we want to get
  string oid = 2;
  // Maximum number of bytes we want to receive. Use '-1' to get the full blob no matter how big.
  int64 limit = 3;
}

message GetBlobResponse {
  // Blob size; present only in first response message
  int64 size = 1;
  // Chunk of blob data
  bytes data = 2;
  // Object ID of the actual blob returned. Empty if no blob was found.
  string oid = 3;
}

message GetBlobsRequest {
  Repository repository = 1;
  // Object IDs (SHA1) of the blobs we want to get
  repeated string oids = 2;
  // Maximum number of bytes we want to receive. Use '-1' to get the full blobs no matter how big.
  int64 limit = 3;
}

message GetBlobsResponse {
  // Blob size; present only on the first message per blob
  int64 size = 1;
  // Chunk of blob data
  bytes data = 2;
  // Object ID of the current blob. Only present on the first message per blob. Empty if no blob was found.
  string oid = 3;
}

message ListBlobsByRevisionPathsRequest {
  Repository repository = 1;

  message RevisionPath {
    string revision =1;
    string path = 2;
    int64 limit =3;
  }

  repeated RevisionPath revision_paths = 2;
}

message ListBlobsByRevisionPathsResponse {
  string oid = 1;
  bytes data = 2;
  int64 size = 3;
}
