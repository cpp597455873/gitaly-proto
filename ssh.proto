syntax = "proto3";

package gitaly;

import "shared.proto";
import "options.proto";

service SSH {
  // To forward 'git upload-pack' to Gitaly for SSH sessions
  rpc SSHUploadPack(stream SSHUploadPackRequest) returns (stream SSHUploadPackResponse) {
    option (gitaly.feature_status) = { 
      status: OPT_IN,
      feature_flag: "GITALY_SSH_UPLOAD_PACK" 
    };
  }

  // To forward 'git receive-pack' to Gitaly for SSH sessions
  rpc SSHReceivePack(stream SSHReceivePackRequest) returns (stream SSHReceivePackResponse) {
    option (gitaly.feature_status) = { 
      status: OPT_IN,
      feature_flag: "GITALY_SSH_RECEIVE_PACK" 
    };
  }
}

message SSHUploadPackRequest {
  // 'repository' must be present in the first message.
  Repository repository = 1;
  // A chunk of raw data to be copied to 'git upload-pack' standard input
  bytes stdin = 2;
}

message SSHUploadPackResponse {
  // A chunk of raw data from 'git upload-pack' standard output
  bytes stdout = 1;
  // A chunk of raw data from 'git upload-pack' standard error
  bytes stderr = 2;
  // This field may be nil. This is intentional: only when the remote
  // command has finished can we return its exit status.
  ExitStatus exit_status = 3;
}

message SSHReceivePackRequest {
  // 'repository' must be present in the first message.
  Repository repository = 1;
  // A chunk of raw data to be copied to 'git upload-pack' standard input
  bytes stdin = 2;
  // Contents of GL_ID environment variable for 'git receive-pack'
  string gl_id = 3;
}

message SSHReceivePackResponse {
  // A chunk of raw data from 'git receive-pack' standard output
  bytes stdout = 1;
  // A chunk of raw data from 'git receive-pack' standard error
  bytes stderr = 2;
  // This field may be nil. This is intentional: only when the remote
  // command has finished can we return its exit status.
  ExitStatus exit_status = 3;
}

