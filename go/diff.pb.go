// Code generated by protoc-gen-go.
// source: diff.proto
// DO NOT EDIT!

package gitaly

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CommitDiffRequest struct {
	Repository             *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	LeftCommitId           string      `protobuf:"bytes,2,opt,name=left_commit_id,json=leftCommitId" json:"left_commit_id,omitempty"`
	RightCommitId          string      `protobuf:"bytes,3,opt,name=right_commit_id,json=rightCommitId" json:"right_commit_id,omitempty"`
	IgnoreWhitespaceChange bool        `protobuf:"varint,4,opt,name=ignore_whitespace_change,json=ignoreWhitespaceChange" json:"ignore_whitespace_change,omitempty"`
}

func (m *CommitDiffRequest) Reset()                    { *m = CommitDiffRequest{} }
func (m *CommitDiffRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitDiffRequest) ProtoMessage()               {}
func (*CommitDiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CommitDiffRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CommitDiffRequest) GetLeftCommitId() string {
	if m != nil {
		return m.LeftCommitId
	}
	return ""
}

func (m *CommitDiffRequest) GetRightCommitId() string {
	if m != nil {
		return m.RightCommitId
	}
	return ""
}

func (m *CommitDiffRequest) GetIgnoreWhitespaceChange() bool {
	if m != nil {
		return m.IgnoreWhitespaceChange
	}
	return false
}

// A CommitDiffResponse corresponds to a single changed file in a commit.
type CommitDiffResponse struct {
	FromPath []byte `protobuf:"bytes,1,opt,name=from_path,json=fromPath,proto3" json:"from_path,omitempty"`
	ToPath   []byte `protobuf:"bytes,2,opt,name=to_path,json=toPath,proto3" json:"to_path,omitempty"`
	// Blob ID as returned via `git diff --full-index`
	FromId    string   `protobuf:"bytes,3,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	ToId      string   `protobuf:"bytes,4,opt,name=to_id,json=toId" json:"to_id,omitempty"`
	OldMode   int32    `protobuf:"varint,5,opt,name=old_mode,json=oldMode" json:"old_mode,omitempty"`
	NewMode   int32    `protobuf:"varint,6,opt,name=new_mode,json=newMode" json:"new_mode,omitempty"`
	Binary    bool     `protobuf:"varint,7,opt,name=binary" json:"binary,omitempty"`
	RawChunks [][]byte `protobuf:"bytes,8,rep,name=raw_chunks,json=rawChunks,proto3" json:"raw_chunks,omitempty"`
}

func (m *CommitDiffResponse) Reset()                    { *m = CommitDiffResponse{} }
func (m *CommitDiffResponse) String() string            { return proto.CompactTextString(m) }
func (*CommitDiffResponse) ProtoMessage()               {}
func (*CommitDiffResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CommitDiffResponse) GetFromPath() []byte {
	if m != nil {
		return m.FromPath
	}
	return nil
}

func (m *CommitDiffResponse) GetToPath() []byte {
	if m != nil {
		return m.ToPath
	}
	return nil
}

func (m *CommitDiffResponse) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *CommitDiffResponse) GetToId() string {
	if m != nil {
		return m.ToId
	}
	return ""
}

func (m *CommitDiffResponse) GetOldMode() int32 {
	if m != nil {
		return m.OldMode
	}
	return 0
}

func (m *CommitDiffResponse) GetNewMode() int32 {
	if m != nil {
		return m.NewMode
	}
	return 0
}

func (m *CommitDiffResponse) GetBinary() bool {
	if m != nil {
		return m.Binary
	}
	return false
}

func (m *CommitDiffResponse) GetRawChunks() [][]byte {
	if m != nil {
		return m.RawChunks
	}
	return nil
}

func init() {
	proto.RegisterType((*CommitDiffRequest)(nil), "gitaly.CommitDiffRequest")
	proto.RegisterType((*CommitDiffResponse)(nil), "gitaly.CommitDiffResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Diff service

type DiffClient interface {
	// Returns stream of CommitDiffResponse: 1 per changed file
	CommitDiff(ctx context.Context, in *CommitDiffRequest, opts ...grpc.CallOption) (Diff_CommitDiffClient, error)
}

type diffClient struct {
	cc *grpc.ClientConn
}

func NewDiffClient(cc *grpc.ClientConn) DiffClient {
	return &diffClient{cc}
}

func (c *diffClient) CommitDiff(ctx context.Context, in *CommitDiffRequest, opts ...grpc.CallOption) (Diff_CommitDiffClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Diff_serviceDesc.Streams[0], c.cc, "/gitaly.Diff/CommitDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &diffCommitDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Diff_CommitDiffClient interface {
	Recv() (*CommitDiffResponse, error)
	grpc.ClientStream
}

type diffCommitDiffClient struct {
	grpc.ClientStream
}

func (x *diffCommitDiffClient) Recv() (*CommitDiffResponse, error) {
	m := new(CommitDiffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Diff service

type DiffServer interface {
	// Returns stream of CommitDiffResponse: 1 per changed file
	CommitDiff(*CommitDiffRequest, Diff_CommitDiffServer) error
}

func RegisterDiffServer(s *grpc.Server, srv DiffServer) {
	s.RegisterService(&_Diff_serviceDesc, srv)
}

func _Diff_CommitDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiffServer).CommitDiff(m, &diffCommitDiffServer{stream})
}

type Diff_CommitDiffServer interface {
	Send(*CommitDiffResponse) error
	grpc.ServerStream
}

type diffCommitDiffServer struct {
	grpc.ServerStream
}

func (x *diffCommitDiffServer) Send(m *CommitDiffResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Diff_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.Diff",
	HandlerType: (*DiffServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommitDiff",
			Handler:       _Diff_CommitDiff_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "diff.proto",
}

func init() { proto.RegisterFile("diff.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x8b, 0x9b, 0x40,
	0x14, 0xc7, 0x3b, 0x89, 0x31, 0xe6, 0xd5, 0xb6, 0x74, 0x0a, 0xa9, 0x49, 0x29, 0x48, 0x28, 0xc5,
	0x53, 0x28, 0xe9, 0xa5, 0xf7, 0x14, 0x4a, 0x0e, 0xa5, 0x65, 0x2e, 0x7b, 0x94, 0x89, 0x33, 0xea,
	0xb0, 0xea, 0x73, 0xc7, 0x09, 0x92, 0x4f, 0xb9, 0x9f, 0x62, 0xbf, 0xc7, 0xe2, 0xcc, 0xc6, 0x0d,
	0xec, 0x1e, 0xe7, 0xf7, 0xfb, 0xfb, 0xf4, 0xef, 0x1b, 0x00, 0xa1, 0xf2, 0x7c, 0xdb, 0x6a, 0x34,
	0x48, 0xfd, 0x42, 0x19, 0x5e, 0x9d, 0xd7, 0x61, 0x57, 0x72, 0x2d, 0x85, 0xa3, 0x9b, 0x7b, 0x02,
	0x1f, 0xf7, 0x58, 0xd7, 0xca, 0xfc, 0x56, 0x79, 0xce, 0xe4, 0xdd, 0x49, 0x76, 0x86, 0xee, 0x00,
	0xb4, 0x6c, 0xb1, 0x53, 0x06, 0xf5, 0x39, 0x22, 0x31, 0x49, 0xde, 0xee, 0xe8, 0xd6, 0x0d, 0xd8,
	0xb2, 0xd1, 0xb0, 0xab, 0x14, 0xfd, 0x06, 0xef, 0x2b, 0x99, 0x9b, 0x34, 0xb3, 0xd3, 0x52, 0x25,
	0xa2, 0x49, 0x4c, 0x92, 0x05, 0x0b, 0x07, 0xea, 0x5e, 0x71, 0x10, 0xf4, 0x3b, 0x7c, 0xd0, 0xaa,
	0x28, 0xaf, 0x63, 0x53, 0x1b, 0x7b, 0x67, 0xf1, 0x98, 0xfb, 0x05, 0x91, 0x2a, 0x1a, 0xd4, 0x32,
	0xed, 0x4b, 0x65, 0x64, 0xd7, 0xf2, 0x4c, 0xa6, 0x59, 0xc9, 0x9b, 0x42, 0x46, 0x5e, 0x4c, 0x92,
	0x80, 0x2d, 0x9d, 0xbf, 0x19, 0xf5, 0xde, 0xda, 0xcd, 0x03, 0x01, 0x7a, 0xdd, 0xa8, 0x6b, 0xb1,
	0xe9, 0x24, 0xfd, 0x02, 0x8b, 0x5c, 0x63, 0x9d, 0xb6, 0xdc, 0x94, 0xb6, 0x51, 0xc8, 0x82, 0x01,
	0xfc, 0xe7, 0xa6, 0xa4, 0x9f, 0x61, 0x6e, 0xd0, 0xa9, 0x89, 0x55, 0xbe, 0xc1, 0x8b, 0xb0, 0x4f,
	0x8d, 0x9f, 0xe9, 0x0f, 0xc7, 0x83, 0xa0, 0x9f, 0x60, 0x66, 0x70, 0xc0, 0x9e, 0xc5, 0x9e, 0xc1,
	0x83, 0xa0, 0x2b, 0x08, 0xb0, 0x12, 0x69, 0x8d, 0x42, 0x46, 0xb3, 0x98, 0x24, 0x33, 0x36, 0xc7,
	0x4a, 0xfc, 0x45, 0x21, 0x07, 0xd5, 0xc8, 0xde, 0x29, 0xdf, 0xa9, 0x46, 0xf6, 0x56, 0x2d, 0xc1,
	0x3f, 0xaa, 0x86, 0xeb, 0x73, 0x34, 0xb7, 0xc5, 0x9e, 0x4e, 0xf4, 0x2b, 0x80, 0xe6, 0x7d, 0x9a,
	0x95, 0xa7, 0xe6, 0xb6, 0x8b, 0x82, 0x78, 0x9a, 0x84, 0x6c, 0xa1, 0x79, 0xbf, 0xb7, 0x60, 0xf7,
	0x0f, 0xbc, 0xa1, 0x20, 0xfd, 0x03, 0xf0, 0x5c, 0x97, 0xae, 0x2e, 0x5b, 0x7a, 0xb1, 0xd4, 0xf5,
	0xfa, 0x35, 0xe5, 0xfe, 0xce, 0xe6, 0xcd, 0x0f, 0x72, 0xf4, 0xed, 0x8d, 0xf8, 0xf9, 0x18, 0x00,
	0x00, 0xff, 0xff, 0xf7, 0xf0, 0x81, 0xc5, 0x35, 0x02, 0x00, 0x00,
}
