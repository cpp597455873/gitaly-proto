// Code generated by protoc-gen-go.
// source: gitaly.proto
// DO NOT EDIT!

/*
Package gitaly is a generated protocol buffer package.

It is generated from these files:
	gitaly.proto

It has these top-level messages:
	InfoRefsUploadPackRequest
	InfoRefsReceivePackRequest
	InfoRefsUploadPackResponse
	InfoRefsReceivePackResponse
	Repository
	PostReceiveRequest
	PostReceiveResponse
	FindDefaultBranchNameRequest
	FindAllBranchNamesRequest
	FindAllTagNamesRequest
	FindDefaultBranchNameResponse
	FindAllBranchNamesResponse
	FindAllTagNamesResponse
	CommitDiffRequest
	CommitDiffResponse
*/
package gitaly

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfoRefsUploadPackRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *InfoRefsUploadPackRequest) Reset()                    { *m = InfoRefsUploadPackRequest{} }
func (m *InfoRefsUploadPackRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRefsUploadPackRequest) ProtoMessage()               {}
func (*InfoRefsUploadPackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InfoRefsUploadPackRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type InfoRefsReceivePackRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *InfoRefsReceivePackRequest) Reset()                    { *m = InfoRefsReceivePackRequest{} }
func (m *InfoRefsReceivePackRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRefsReceivePackRequest) ProtoMessage()               {}
func (*InfoRefsReceivePackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InfoRefsReceivePackRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type InfoRefsUploadPackResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *InfoRefsUploadPackResponse) Reset()                    { *m = InfoRefsUploadPackResponse{} }
func (m *InfoRefsUploadPackResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoRefsUploadPackResponse) ProtoMessage()               {}
func (*InfoRefsUploadPackResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InfoRefsUploadPackResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type InfoRefsReceivePackResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *InfoRefsReceivePackResponse) Reset()                    { *m = InfoRefsReceivePackResponse{} }
func (m *InfoRefsReceivePackResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoRefsReceivePackResponse) ProtoMessage()               {}
func (*InfoRefsReceivePackResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InfoRefsReceivePackResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Repository struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *Repository) Reset()                    { *m = Repository{} }
func (m *Repository) String() string            { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()               {}
func (*Repository) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Repository) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type PostReceiveRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *PostReceiveRequest) Reset()                    { *m = PostReceiveRequest{} }
func (m *PostReceiveRequest) String() string            { return proto.CompactTextString(m) }
func (*PostReceiveRequest) ProtoMessage()               {}
func (*PostReceiveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PostReceiveRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type PostReceiveResponse struct {
}

func (m *PostReceiveResponse) Reset()                    { *m = PostReceiveResponse{} }
func (m *PostReceiveResponse) String() string            { return proto.CompactTextString(m) }
func (*PostReceiveResponse) ProtoMessage()               {}
func (*PostReceiveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type FindDefaultBranchNameRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *FindDefaultBranchNameRequest) Reset()                    { *m = FindDefaultBranchNameRequest{} }
func (m *FindDefaultBranchNameRequest) String() string            { return proto.CompactTextString(m) }
func (*FindDefaultBranchNameRequest) ProtoMessage()               {}
func (*FindDefaultBranchNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FindDefaultBranchNameRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllBranchNamesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *FindAllBranchNamesRequest) Reset()                    { *m = FindAllBranchNamesRequest{} }
func (m *FindAllBranchNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*FindAllBranchNamesRequest) ProtoMessage()               {}
func (*FindAllBranchNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FindAllBranchNamesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllTagNamesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *FindAllTagNamesRequest) Reset()                    { *m = FindAllTagNamesRequest{} }
func (m *FindAllTagNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*FindAllTagNamesRequest) ProtoMessage()               {}
func (*FindAllTagNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FindAllTagNamesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindDefaultBranchNameResponse struct {
	Name []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *FindDefaultBranchNameResponse) Reset()                    { *m = FindDefaultBranchNameResponse{} }
func (m *FindDefaultBranchNameResponse) String() string            { return proto.CompactTextString(m) }
func (*FindDefaultBranchNameResponse) ProtoMessage()               {}
func (*FindDefaultBranchNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FindDefaultBranchNameResponse) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type FindAllBranchNamesResponse struct {
	Names [][]byte `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *FindAllBranchNamesResponse) Reset()                    { *m = FindAllBranchNamesResponse{} }
func (m *FindAllBranchNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*FindAllBranchNamesResponse) ProtoMessage()               {}
func (*FindAllBranchNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FindAllBranchNamesResponse) GetNames() [][]byte {
	if m != nil {
		return m.Names
	}
	return nil
}

type FindAllTagNamesResponse struct {
	Names [][]byte `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *FindAllTagNamesResponse) Reset()                    { *m = FindAllTagNamesResponse{} }
func (m *FindAllTagNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*FindAllTagNamesResponse) ProtoMessage()               {}
func (*FindAllTagNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FindAllTagNamesResponse) GetNames() [][]byte {
	if m != nil {
		return m.Names
	}
	return nil
}

type CommitDiffRequest struct {
	Repository    *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	LeftCommitId  string      `protobuf:"bytes,2,opt,name=left_commit_id,json=leftCommitId" json:"left_commit_id,omitempty"`
	RightCommitId string      `protobuf:"bytes,3,opt,name=right_commit_id,json=rightCommitId" json:"right_commit_id,omitempty"`
}

func (m *CommitDiffRequest) Reset()                    { *m = CommitDiffRequest{} }
func (m *CommitDiffRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitDiffRequest) ProtoMessage()               {}
func (*CommitDiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CommitDiffRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CommitDiffRequest) GetLeftCommitId() string {
	if m != nil {
		return m.LeftCommitId
	}
	return ""
}

func (m *CommitDiffRequest) GetRightCommitId() string {
	if m != nil {
		return m.RightCommitId
	}
	return ""
}

// A CommitDiffResponse corresponds to a single changed file in a commit.
type CommitDiffResponse struct {
	FromPath []byte `protobuf:"bytes,1,opt,name=from_path,json=fromPath,proto3" json:"from_path,omitempty"`
	ToPath   []byte `protobuf:"bytes,2,opt,name=to_path,json=toPath,proto3" json:"to_path,omitempty"`
	// Blob ID as returned via `git diff --full-index`
	FromId    string   `protobuf:"bytes,3,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	ToId      string   `protobuf:"bytes,4,opt,name=to_id,json=toId" json:"to_id,omitempty"`
	OldMode   int32    `protobuf:"varint,5,opt,name=old_mode,json=oldMode" json:"old_mode,omitempty"`
	NewMode   int32    `protobuf:"varint,6,opt,name=new_mode,json=newMode" json:"new_mode,omitempty"`
	Binary    bool     `protobuf:"varint,7,opt,name=binary" json:"binary,omitempty"`
	RawChunks [][]byte `protobuf:"bytes,8,rep,name=raw_chunks,json=rawChunks,proto3" json:"raw_chunks,omitempty"`
}

func (m *CommitDiffResponse) Reset()                    { *m = CommitDiffResponse{} }
func (m *CommitDiffResponse) String() string            { return proto.CompactTextString(m) }
func (*CommitDiffResponse) ProtoMessage()               {}
func (*CommitDiffResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CommitDiffResponse) GetFromPath() []byte {
	if m != nil {
		return m.FromPath
	}
	return nil
}

func (m *CommitDiffResponse) GetToPath() []byte {
	if m != nil {
		return m.ToPath
	}
	return nil
}

func (m *CommitDiffResponse) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *CommitDiffResponse) GetToId() string {
	if m != nil {
		return m.ToId
	}
	return ""
}

func (m *CommitDiffResponse) GetOldMode() int32 {
	if m != nil {
		return m.OldMode
	}
	return 0
}

func (m *CommitDiffResponse) GetNewMode() int32 {
	if m != nil {
		return m.NewMode
	}
	return 0
}

func (m *CommitDiffResponse) GetBinary() bool {
	if m != nil {
		return m.Binary
	}
	return false
}

func (m *CommitDiffResponse) GetRawChunks() [][]byte {
	if m != nil {
		return m.RawChunks
	}
	return nil
}

func init() {
	proto.RegisterType((*InfoRefsUploadPackRequest)(nil), "gitaly.InfoRefsUploadPackRequest")
	proto.RegisterType((*InfoRefsReceivePackRequest)(nil), "gitaly.InfoRefsReceivePackRequest")
	proto.RegisterType((*InfoRefsUploadPackResponse)(nil), "gitaly.InfoRefsUploadPackResponse")
	proto.RegisterType((*InfoRefsReceivePackResponse)(nil), "gitaly.InfoRefsReceivePackResponse")
	proto.RegisterType((*Repository)(nil), "gitaly.Repository")
	proto.RegisterType((*PostReceiveRequest)(nil), "gitaly.PostReceiveRequest")
	proto.RegisterType((*PostReceiveResponse)(nil), "gitaly.PostReceiveResponse")
	proto.RegisterType((*FindDefaultBranchNameRequest)(nil), "gitaly.FindDefaultBranchNameRequest")
	proto.RegisterType((*FindAllBranchNamesRequest)(nil), "gitaly.FindAllBranchNamesRequest")
	proto.RegisterType((*FindAllTagNamesRequest)(nil), "gitaly.FindAllTagNamesRequest")
	proto.RegisterType((*FindDefaultBranchNameResponse)(nil), "gitaly.FindDefaultBranchNameResponse")
	proto.RegisterType((*FindAllBranchNamesResponse)(nil), "gitaly.FindAllBranchNamesResponse")
	proto.RegisterType((*FindAllTagNamesResponse)(nil), "gitaly.FindAllTagNamesResponse")
	proto.RegisterType((*CommitDiffRequest)(nil), "gitaly.CommitDiffRequest")
	proto.RegisterType((*CommitDiffResponse)(nil), "gitaly.CommitDiffResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SmartHTTP service

type SmartHTTPClient interface {
	// The response body for GET /info/refs?service=git-upload-pack
	InfoRefsUploadPack(ctx context.Context, in *InfoRefsUploadPackRequest, opts ...grpc.CallOption) (SmartHTTP_InfoRefsUploadPackClient, error)
	// The response body for GET /info/refs?service=git-receive-pack
	InfoRefsReceivePack(ctx context.Context, in *InfoRefsReceivePackRequest, opts ...grpc.CallOption) (SmartHTTP_InfoRefsReceivePackClient, error)
}

type smartHTTPClient struct {
	cc *grpc.ClientConn
}

func NewSmartHTTPClient(cc *grpc.ClientConn) SmartHTTPClient {
	return &smartHTTPClient{cc}
}

func (c *smartHTTPClient) InfoRefsUploadPack(ctx context.Context, in *InfoRefsUploadPackRequest, opts ...grpc.CallOption) (SmartHTTP_InfoRefsUploadPackClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SmartHTTP_serviceDesc.Streams[0], c.cc, "/gitaly.SmartHTTP/InfoRefsUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &smartHTTPInfoRefsUploadPackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SmartHTTP_InfoRefsUploadPackClient interface {
	Recv() (*InfoRefsUploadPackResponse, error)
	grpc.ClientStream
}

type smartHTTPInfoRefsUploadPackClient struct {
	grpc.ClientStream
}

func (x *smartHTTPInfoRefsUploadPackClient) Recv() (*InfoRefsUploadPackResponse, error) {
	m := new(InfoRefsUploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *smartHTTPClient) InfoRefsReceivePack(ctx context.Context, in *InfoRefsReceivePackRequest, opts ...grpc.CallOption) (SmartHTTP_InfoRefsReceivePackClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SmartHTTP_serviceDesc.Streams[1], c.cc, "/gitaly.SmartHTTP/InfoRefsReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &smartHTTPInfoRefsReceivePackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SmartHTTP_InfoRefsReceivePackClient interface {
	Recv() (*InfoRefsReceivePackResponse, error)
	grpc.ClientStream
}

type smartHTTPInfoRefsReceivePackClient struct {
	grpc.ClientStream
}

func (x *smartHTTPInfoRefsReceivePackClient) Recv() (*InfoRefsReceivePackResponse, error) {
	m := new(InfoRefsReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SmartHTTP service

type SmartHTTPServer interface {
	// The response body for GET /info/refs?service=git-upload-pack
	InfoRefsUploadPack(*InfoRefsUploadPackRequest, SmartHTTP_InfoRefsUploadPackServer) error
	// The response body for GET /info/refs?service=git-receive-pack
	InfoRefsReceivePack(*InfoRefsReceivePackRequest, SmartHTTP_InfoRefsReceivePackServer) error
}

func RegisterSmartHTTPServer(s *grpc.Server, srv SmartHTTPServer) {
	s.RegisterService(&_SmartHTTP_serviceDesc, srv)
}

func _SmartHTTP_InfoRefsUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRefsUploadPackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmartHTTPServer).InfoRefsUploadPack(m, &smartHTTPInfoRefsUploadPackServer{stream})
}

type SmartHTTP_InfoRefsUploadPackServer interface {
	Send(*InfoRefsUploadPackResponse) error
	grpc.ServerStream
}

type smartHTTPInfoRefsUploadPackServer struct {
	grpc.ServerStream
}

func (x *smartHTTPInfoRefsUploadPackServer) Send(m *InfoRefsUploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SmartHTTP_InfoRefsReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRefsReceivePackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmartHTTPServer).InfoRefsReceivePack(m, &smartHTTPInfoRefsReceivePackServer{stream})
}

type SmartHTTP_InfoRefsReceivePackServer interface {
	Send(*InfoRefsReceivePackResponse) error
	grpc.ServerStream
}

type smartHTTPInfoRefsReceivePackServer struct {
	grpc.ServerStream
}

func (x *smartHTTPInfoRefsReceivePackServer) Send(m *InfoRefsReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SmartHTTP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.SmartHTTP",
	HandlerType: (*SmartHTTPServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InfoRefsUploadPack",
			Handler:       _SmartHTTP_InfoRefsUploadPack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InfoRefsReceivePack",
			Handler:       _SmartHTTP_InfoRefsReceivePack_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gitaly.proto",
}

// Client API for Notifications service

type NotificationsClient interface {
	PostReceive(ctx context.Context, in *PostReceiveRequest, opts ...grpc.CallOption) (*PostReceiveResponse, error)
}

type notificationsClient struct {
	cc *grpc.ClientConn
}

func NewNotificationsClient(cc *grpc.ClientConn) NotificationsClient {
	return &notificationsClient{cc}
}

func (c *notificationsClient) PostReceive(ctx context.Context, in *PostReceiveRequest, opts ...grpc.CallOption) (*PostReceiveResponse, error) {
	out := new(PostReceiveResponse)
	err := grpc.Invoke(ctx, "/gitaly.Notifications/PostReceive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notifications service

type NotificationsServer interface {
	PostReceive(context.Context, *PostReceiveRequest) (*PostReceiveResponse, error)
}

func RegisterNotificationsServer(s *grpc.Server, srv NotificationsServer) {
	s.RegisterService(&_Notifications_serviceDesc, srv)
}

func _Notifications_PostReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).PostReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.Notifications/PostReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).PostReceive(ctx, req.(*PostReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notifications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.Notifications",
	HandlerType: (*NotificationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostReceive",
			Handler:    _Notifications_PostReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitaly.proto",
}

// Client API for Ref service

type RefClient interface {
	FindDefaultBranchName(ctx context.Context, in *FindDefaultBranchNameRequest, opts ...grpc.CallOption) (*FindDefaultBranchNameResponse, error)
	FindAllBranchNames(ctx context.Context, in *FindAllBranchNamesRequest, opts ...grpc.CallOption) (Ref_FindAllBranchNamesClient, error)
	FindAllTagNames(ctx context.Context, in *FindAllTagNamesRequest, opts ...grpc.CallOption) (Ref_FindAllTagNamesClient, error)
}

type refClient struct {
	cc *grpc.ClientConn
}

func NewRefClient(cc *grpc.ClientConn) RefClient {
	return &refClient{cc}
}

func (c *refClient) FindDefaultBranchName(ctx context.Context, in *FindDefaultBranchNameRequest, opts ...grpc.CallOption) (*FindDefaultBranchNameResponse, error) {
	out := new(FindDefaultBranchNameResponse)
	err := grpc.Invoke(ctx, "/gitaly.Ref/FindDefaultBranchName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refClient) FindAllBranchNames(ctx context.Context, in *FindAllBranchNamesRequest, opts ...grpc.CallOption) (Ref_FindAllBranchNamesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ref_serviceDesc.Streams[0], c.cc, "/gitaly.Ref/FindAllBranchNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &refFindAllBranchNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ref_FindAllBranchNamesClient interface {
	Recv() (*FindAllBranchNamesResponse, error)
	grpc.ClientStream
}

type refFindAllBranchNamesClient struct {
	grpc.ClientStream
}

func (x *refFindAllBranchNamesClient) Recv() (*FindAllBranchNamesResponse, error) {
	m := new(FindAllBranchNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refClient) FindAllTagNames(ctx context.Context, in *FindAllTagNamesRequest, opts ...grpc.CallOption) (Ref_FindAllTagNamesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ref_serviceDesc.Streams[1], c.cc, "/gitaly.Ref/FindAllTagNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &refFindAllTagNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ref_FindAllTagNamesClient interface {
	Recv() (*FindAllTagNamesResponse, error)
	grpc.ClientStream
}

type refFindAllTagNamesClient struct {
	grpc.ClientStream
}

func (x *refFindAllTagNamesClient) Recv() (*FindAllTagNamesResponse, error) {
	m := new(FindAllTagNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Ref service

type RefServer interface {
	FindDefaultBranchName(context.Context, *FindDefaultBranchNameRequest) (*FindDefaultBranchNameResponse, error)
	FindAllBranchNames(*FindAllBranchNamesRequest, Ref_FindAllBranchNamesServer) error
	FindAllTagNames(*FindAllTagNamesRequest, Ref_FindAllTagNamesServer) error
}

func RegisterRefServer(s *grpc.Server, srv RefServer) {
	s.RegisterService(&_Ref_serviceDesc, srv)
}

func _Ref_FindDefaultBranchName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultBranchNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServer).FindDefaultBranchName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.Ref/FindDefaultBranchName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServer).FindDefaultBranchName(ctx, req.(*FindDefaultBranchNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ref_FindAllBranchNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllBranchNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServer).FindAllBranchNames(m, &refFindAllBranchNamesServer{stream})
}

type Ref_FindAllBranchNamesServer interface {
	Send(*FindAllBranchNamesResponse) error
	grpc.ServerStream
}

type refFindAllBranchNamesServer struct {
	grpc.ServerStream
}

func (x *refFindAllBranchNamesServer) Send(m *FindAllBranchNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Ref_FindAllTagNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllTagNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServer).FindAllTagNames(m, &refFindAllTagNamesServer{stream})
}

type Ref_FindAllTagNamesServer interface {
	Send(*FindAllTagNamesResponse) error
	grpc.ServerStream
}

type refFindAllTagNamesServer struct {
	grpc.ServerStream
}

func (x *refFindAllTagNamesServer) Send(m *FindAllTagNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Ref_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.Ref",
	HandlerType: (*RefServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDefaultBranchName",
			Handler:    _Ref_FindDefaultBranchName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindAllBranchNames",
			Handler:       _Ref_FindAllBranchNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllTagNames",
			Handler:       _Ref_FindAllTagNames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gitaly.proto",
}

// Client API for Diff service

type DiffClient interface {
	// Returns stream of CommitDiffResponse: 1 per changed file
	CommitDiff(ctx context.Context, in *CommitDiffRequest, opts ...grpc.CallOption) (Diff_CommitDiffClient, error)
}

type diffClient struct {
	cc *grpc.ClientConn
}

func NewDiffClient(cc *grpc.ClientConn) DiffClient {
	return &diffClient{cc}
}

func (c *diffClient) CommitDiff(ctx context.Context, in *CommitDiffRequest, opts ...grpc.CallOption) (Diff_CommitDiffClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Diff_serviceDesc.Streams[0], c.cc, "/gitaly.Diff/CommitDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &diffCommitDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Diff_CommitDiffClient interface {
	Recv() (*CommitDiffResponse, error)
	grpc.ClientStream
}

type diffCommitDiffClient struct {
	grpc.ClientStream
}

func (x *diffCommitDiffClient) Recv() (*CommitDiffResponse, error) {
	m := new(CommitDiffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Diff service

type DiffServer interface {
	// Returns stream of CommitDiffResponse: 1 per changed file
	CommitDiff(*CommitDiffRequest, Diff_CommitDiffServer) error
}

func RegisterDiffServer(s *grpc.Server, srv DiffServer) {
	s.RegisterService(&_Diff_serviceDesc, srv)
}

func _Diff_CommitDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiffServer).CommitDiff(m, &diffCommitDiffServer{stream})
}

type Diff_CommitDiffServer interface {
	Send(*CommitDiffResponse) error
	grpc.ServerStream
}

type diffCommitDiffServer struct {
	grpc.ServerStream
}

func (x *diffCommitDiffServer) Send(m *CommitDiffResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Diff_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.Diff",
	HandlerType: (*DiffServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommitDiff",
			Handler:       _Diff_CommitDiff_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gitaly.proto",
}

func init() { proto.RegisterFile("gitaly.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xe1, 0x52, 0xd3, 0x40,
	0x10, 0x36, 0x40, 0x4b, 0xbb, 0x14, 0x19, 0x17, 0x81, 0x34, 0x88, 0xd6, 0x88, 0x4e, 0x7f, 0x21,
	0x86, 0x27, 0x50, 0x18, 0xa5, 0x33, 0x0a, 0x9d, 0x13, 0x9d, 0xf1, 0x57, 0xe6, 0x48, 0x2e, 0xf4,
	0x86, 0x24, 0x57, 0x93, 0xc3, 0x0e, 0x0f, 0xe2, 0x2b, 0xf8, 0x3c, 0xbe, 0x84, 0xef, 0xe1, 0xe4,
	0x92, 0x90, 0x48, 0xd2, 0xfa, 0x23, 0xff, 0xee, 0xf6, 0xfb, 0xf6, 0xdb, 0xdd, 0xec, 0xed, 0x06,
	0x7a, 0x57, 0x5c, 0x52, 0xff, 0xf6, 0x60, 0x1a, 0x09, 0x29, 0xb0, 0x9d, 0xde, 0xcc, 0x73, 0xe8,
	0x8f, 0x42, 0x4f, 0x10, 0xe6, 0xc5, 0x5f, 0xa6, 0xbe, 0xa0, 0xee, 0x98, 0x3a, 0xd7, 0x84, 0x7d,
	0xbf, 0x61, 0xb1, 0x44, 0x0b, 0x20, 0x62, 0x53, 0x11, 0x73, 0x29, 0xa2, 0x5b, 0x5d, 0x1b, 0x68,
	0xc3, 0x35, 0x0b, 0x0f, 0x32, 0x1d, 0x72, 0x87, 0x90, 0x12, 0xcb, 0x1c, 0x83, 0x91, 0x0b, 0x12,
	0xe6, 0x30, 0xfe, 0x83, 0x35, 0x55, 0x3c, 0x2c, 0x14, 0xcb, 0x29, 0xc6, 0x53, 0x11, 0xc6, 0x0c,
	0x11, 0x56, 0x5c, 0x2a, 0xa9, 0xd2, 0xea, 0x11, 0x75, 0x36, 0xdf, 0xc0, 0x6e, 0x6d, 0x0e, 0x0b,
	0x5c, 0x06, 0x00, 0x45, 0xf8, 0x84, 0x31, 0xa5, 0x72, 0xa2, 0x18, 0x5d, 0xa2, 0xce, 0xe6, 0x29,
	0xe0, 0x58, 0xc4, 0x32, 0x13, 0x6c, 0x52, 0xd0, 0x16, 0x6c, 0xfe, 0xa3, 0x94, 0xa6, 0x65, 0x12,
	0x78, 0xf2, 0x9e, 0x87, 0xee, 0x09, 0xf3, 0xe8, 0x8d, 0x2f, 0xdf, 0x45, 0x34, 0x74, 0x26, 0x67,
	0x34, 0x68, 0x14, 0xea, 0x1c, 0xfa, 0x89, 0xe6, 0x5b, 0xdf, 0x2f, 0xf4, 0xe2, 0x26, 0x82, 0x1f,
	0x61, 0x3b, 0x13, 0xbc, 0xa0, 0x57, 0x8d, 0xd5, 0x8e, 0x60, 0x6f, 0x4e, 0xc9, 0x45, 0xab, 0x42,
	0x1a, 0xb0, 0xbc, 0x55, 0xc9, 0xd9, 0xb4, 0xc0, 0xa8, 0xab, 0x29, 0xf3, 0x78, 0x0c, 0xad, 0x84,
	0x15, 0xeb, 0xda, 0x60, 0x79, 0xd8, 0x23, 0xe9, 0xc5, 0x7c, 0x0d, 0x3b, 0x95, 0xb4, 0x17, 0x3a,
	0xfc, 0xd4, 0xe0, 0xd1, 0xb1, 0x08, 0x02, 0x2e, 0x4f, 0xb8, 0xe7, 0x35, 0xa8, 0x11, 0xf7, 0xe1,
	0xa1, 0xcf, 0x3c, 0x69, 0x3b, 0x4a, 0xcd, 0xe6, 0xae, 0xbe, 0xa4, 0x5e, 0x55, 0x2f, 0xb1, 0xa6,
	0x21, 0x46, 0x2e, 0xbe, 0x82, 0x8d, 0x88, 0x5f, 0x4d, 0xca, 0xb4, 0x65, 0x45, 0x5b, 0x57, 0xe6,
	0x9c, 0x67, 0xfe, 0xd1, 0x00, 0xcb, 0x79, 0x65, 0x45, 0xec, 0x42, 0xd7, 0x8b, 0x44, 0x60, 0xdf,
	0xbd, 0xda, 0x1e, 0xe9, 0x24, 0x86, 0x31, 0x95, 0x13, 0xdc, 0x81, 0x55, 0x29, 0x52, 0x68, 0x49,
	0x41, 0x6d, 0x29, 0x72, 0x40, 0x79, 0xdd, 0x05, 0x6b, 0x27, 0xd7, 0x91, 0x8b, 0x9b, 0xd0, 0x92,
	0x22, 0x31, 0xaf, 0xa4, 0x03, 0x20, 0xc5, 0xc8, 0xc5, 0x3e, 0x74, 0x84, 0xef, 0xda, 0x81, 0x70,
	0x99, 0xde, 0x1a, 0x68, 0xc3, 0x16, 0x59, 0x15, 0xbe, 0xfb, 0x49, 0xb8, 0x2c, 0x81, 0x42, 0x36,
	0x4b, 0xa1, 0x76, 0x0a, 0x85, 0x6c, 0xa6, 0xa0, 0x6d, 0x68, 0x5f, 0xf2, 0x90, 0x46, 0xb7, 0xfa,
	0xea, 0x40, 0x1b, 0x76, 0x48, 0x76, 0xc3, 0x3d, 0x80, 0x88, 0xce, 0x6c, 0x67, 0x72, 0x13, 0x5e,
	0xc7, 0x7a, 0x47, 0x7d, 0xfb, 0x6e, 0x44, 0x67, 0xc7, 0xca, 0x60, 0xfd, 0xd6, 0xa0, 0xfb, 0x39,
	0xa0, 0x91, 0x3c, 0xbd, 0xb8, 0x18, 0xa3, 0x0d, 0x58, 0x5d, 0x01, 0xf8, 0x3c, 0xff, 0xf2, 0x73,
	0x37, 0x98, 0x61, 0x2e, 0xa2, 0x64, 0x73, 0xf7, 0xe0, 0x50, 0xc3, 0x4b, 0xd8, 0xac, 0xd9, 0x18,
	0x58, 0x71, 0xaf, 0xae, 0x34, 0xe3, 0xc5, 0x42, 0x4e, 0x11, 0xc3, 0xfa, 0x06, 0xeb, 0x67, 0x42,
	0x72, 0x8f, 0x3b, 0x54, 0x72, 0x11, 0xc6, 0x78, 0x0a, 0x6b, 0xa5, 0x3d, 0x80, 0x46, 0x2e, 0x54,
	0x5d, 0x33, 0xc6, 0x6e, 0x2d, 0x96, 0x8b, 0x5b, 0xbf, 0x96, 0x60, 0x99, 0x30, 0x0f, 0x3d, 0xd8,
	0xaa, 0x9d, 0x27, 0xdc, 0xcf, 0xfd, 0x17, 0x6d, 0x18, 0xe3, 0xe5, 0x7f, 0x58, 0x79, 0xbc, 0xa4,
	0x1f, 0xd5, 0x11, 0x2c, 0xfa, 0x31, 0x77, 0xe5, 0x14, 0xfd, 0x98, 0x3f, 0xc1, 0xaa, 0x1f, 0x5f,
	0x61, 0xe3, 0xde, 0xbc, 0xe2, 0xd3, 0x7b, 0xae, 0xf7, 0xf6, 0x8f, 0xf1, 0x6c, 0x2e, 0x5e, 0xea,
	0xc1, 0x39, 0xac, 0x24, 0x73, 0x83, 0x1f, 0x00, 0x8a, 0x29, 0xc2, 0x7e, 0xee, 0x5a, 0x99, 0x78,
	0xc3, 0xa8, 0x83, 0x0a, 0xc1, 0xcb, 0xb6, 0xfa, 0x9d, 0x1e, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xec, 0x87, 0xb1, 0x75, 0x5e, 0x07, 0x00, 0x00,
}
