// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ref.proto

package gitaly

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FindLocalBranchesRequest_SortBy int32

const (
	FindLocalBranchesRequest_NAME         FindLocalBranchesRequest_SortBy = 0
	FindLocalBranchesRequest_UPDATED_ASC  FindLocalBranchesRequest_SortBy = 1
	FindLocalBranchesRequest_UPDATED_DESC FindLocalBranchesRequest_SortBy = 2
)

var FindLocalBranchesRequest_SortBy_name = map[int32]string{
	0: "NAME",
	1: "UPDATED_ASC",
	2: "UPDATED_DESC",
}
var FindLocalBranchesRequest_SortBy_value = map[string]int32{
	"NAME":         0,
	"UPDATED_ASC":  1,
	"UPDATED_DESC": 2,
}

func (x FindLocalBranchesRequest_SortBy) String() string {
	return proto.EnumName(FindLocalBranchesRequest_SortBy_name, int32(x))
}
func (FindLocalBranchesRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{8, 0}
}

type FindDefaultBranchNameRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *FindDefaultBranchNameRequest) Reset()                    { *m = FindDefaultBranchNameRequest{} }
func (m *FindDefaultBranchNameRequest) String() string            { return proto.CompactTextString(m) }
func (*FindDefaultBranchNameRequest) ProtoMessage()               {}
func (*FindDefaultBranchNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *FindDefaultBranchNameRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindDefaultBranchNameResponse struct {
	Name []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *FindDefaultBranchNameResponse) Reset()                    { *m = FindDefaultBranchNameResponse{} }
func (m *FindDefaultBranchNameResponse) String() string            { return proto.CompactTextString(m) }
func (*FindDefaultBranchNameResponse) ProtoMessage()               {}
func (*FindDefaultBranchNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *FindDefaultBranchNameResponse) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type FindAllBranchNamesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *FindAllBranchNamesRequest) Reset()                    { *m = FindAllBranchNamesRequest{} }
func (m *FindAllBranchNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*FindAllBranchNamesRequest) ProtoMessage()               {}
func (*FindAllBranchNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *FindAllBranchNamesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllBranchNamesResponse struct {
	Names [][]byte `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *FindAllBranchNamesResponse) Reset()                    { *m = FindAllBranchNamesResponse{} }
func (m *FindAllBranchNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*FindAllBranchNamesResponse) ProtoMessage()               {}
func (*FindAllBranchNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *FindAllBranchNamesResponse) GetNames() [][]byte {
	if m != nil {
		return m.Names
	}
	return nil
}

type FindAllTagNamesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *FindAllTagNamesRequest) Reset()                    { *m = FindAllTagNamesRequest{} }
func (m *FindAllTagNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*FindAllTagNamesRequest) ProtoMessage()               {}
func (*FindAllTagNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *FindAllTagNamesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllTagNamesResponse struct {
	Names [][]byte `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *FindAllTagNamesResponse) Reset()                    { *m = FindAllTagNamesResponse{} }
func (m *FindAllTagNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*FindAllTagNamesResponse) ProtoMessage()               {}
func (*FindAllTagNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *FindAllTagNamesResponse) GetNames() [][]byte {
	if m != nil {
		return m.Names
	}
	return nil
}

type FindRefNameRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	// Require that the resulting ref contains this commit as an ancestor
	CommitId string `protobuf:"bytes,2,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	// Example prefix: "refs/heads/". Type bytes because that is the type of ref names.
	Prefix []byte `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *FindRefNameRequest) Reset()                    { *m = FindRefNameRequest{} }
func (m *FindRefNameRequest) String() string            { return proto.CompactTextString(m) }
func (*FindRefNameRequest) ProtoMessage()               {}
func (*FindRefNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *FindRefNameRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindRefNameRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *FindRefNameRequest) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

type FindRefNameResponse struct {
	// Example name: "refs/heads/master". Cannot assume UTF8, so the type is bytes.
	Name []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *FindRefNameResponse) Reset()                    { *m = FindRefNameResponse{} }
func (m *FindRefNameResponse) String() string            { return proto.CompactTextString(m) }
func (*FindRefNameResponse) ProtoMessage()               {}
func (*FindRefNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *FindRefNameResponse) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type FindLocalBranchesRequest struct {
	Repository *Repository                     `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	SortBy     FindLocalBranchesRequest_SortBy `protobuf:"varint,2,opt,name=sort_by,json=sortBy,enum=gitaly.FindLocalBranchesRequest_SortBy" json:"sort_by,omitempty"`
}

func (m *FindLocalBranchesRequest) Reset()                    { *m = FindLocalBranchesRequest{} }
func (m *FindLocalBranchesRequest) String() string            { return proto.CompactTextString(m) }
func (*FindLocalBranchesRequest) ProtoMessage()               {}
func (*FindLocalBranchesRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *FindLocalBranchesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindLocalBranchesRequest) GetSortBy() FindLocalBranchesRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return FindLocalBranchesRequest_NAME
}

type FindLocalBranchesResponse struct {
	Branches []*FindLocalBranchResponse `protobuf:"bytes,1,rep,name=branches" json:"branches,omitempty"`
}

func (m *FindLocalBranchesResponse) Reset()                    { *m = FindLocalBranchesResponse{} }
func (m *FindLocalBranchesResponse) String() string            { return proto.CompactTextString(m) }
func (*FindLocalBranchesResponse) ProtoMessage()               {}
func (*FindLocalBranchesResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *FindLocalBranchesResponse) GetBranches() []*FindLocalBranchResponse {
	if m != nil {
		return m.Branches
	}
	return nil
}

type FindLocalBranchResponse struct {
	Name            []byte                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CommitId        string                       `protobuf:"bytes,2,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	CommitSubject   []byte                       `protobuf:"bytes,3,opt,name=commit_subject,json=commitSubject,proto3" json:"commit_subject,omitempty"`
	CommitAuthor    *FindLocalBranchCommitAuthor `protobuf:"bytes,4,opt,name=commit_author,json=commitAuthor" json:"commit_author,omitempty"`
	CommitCommitter *FindLocalBranchCommitAuthor `protobuf:"bytes,5,opt,name=commit_committer,json=commitCommitter" json:"commit_committer,omitempty"`
}

func (m *FindLocalBranchResponse) Reset()                    { *m = FindLocalBranchResponse{} }
func (m *FindLocalBranchResponse) String() string            { return proto.CompactTextString(m) }
func (*FindLocalBranchResponse) ProtoMessage()               {}
func (*FindLocalBranchResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *FindLocalBranchResponse) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *FindLocalBranchResponse) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *FindLocalBranchResponse) GetCommitSubject() []byte {
	if m != nil {
		return m.CommitSubject
	}
	return nil
}

func (m *FindLocalBranchResponse) GetCommitAuthor() *FindLocalBranchCommitAuthor {
	if m != nil {
		return m.CommitAuthor
	}
	return nil
}

func (m *FindLocalBranchResponse) GetCommitCommitter() *FindLocalBranchCommitAuthor {
	if m != nil {
		return m.CommitCommitter
	}
	return nil
}

type FindLocalBranchCommitAuthor struct {
	Name  []byte                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email []byte                     `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Date  *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=date" json:"date,omitempty"`
}

func (m *FindLocalBranchCommitAuthor) Reset()                    { *m = FindLocalBranchCommitAuthor{} }
func (m *FindLocalBranchCommitAuthor) String() string            { return proto.CompactTextString(m) }
func (*FindLocalBranchCommitAuthor) ProtoMessage()               {}
func (*FindLocalBranchCommitAuthor) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *FindLocalBranchCommitAuthor) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *FindLocalBranchCommitAuthor) GetEmail() []byte {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *FindLocalBranchCommitAuthor) GetDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

type FindAllBranchesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *FindAllBranchesRequest) Reset()                    { *m = FindAllBranchesRequest{} }
func (m *FindAllBranchesRequest) String() string            { return proto.CompactTextString(m) }
func (*FindAllBranchesRequest) ProtoMessage()               {}
func (*FindAllBranchesRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *FindAllBranchesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllBranchesResponse struct {
	Branches []*FindAllBranchesResponse_Branch `protobuf:"bytes,1,rep,name=branches" json:"branches,omitempty"`
}

func (m *FindAllBranchesResponse) Reset()                    { *m = FindAllBranchesResponse{} }
func (m *FindAllBranchesResponse) String() string            { return proto.CompactTextString(m) }
func (*FindAllBranchesResponse) ProtoMessage()               {}
func (*FindAllBranchesResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *FindAllBranchesResponse) GetBranches() []*FindAllBranchesResponse_Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

type FindAllBranchesResponse_Branch struct {
	Name   []byte     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Target *GitCommit `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *FindAllBranchesResponse_Branch) Reset()         { *m = FindAllBranchesResponse_Branch{} }
func (m *FindAllBranchesResponse_Branch) String() string { return proto.CompactTextString(m) }
func (*FindAllBranchesResponse_Branch) ProtoMessage()    {}
func (*FindAllBranchesResponse_Branch) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{13, 0}
}

func (m *FindAllBranchesResponse_Branch) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *FindAllBranchesResponse_Branch) GetTarget() *GitCommit {
	if m != nil {
		return m.Target
	}
	return nil
}

type FindAllTagsRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *FindAllTagsRequest) Reset()                    { *m = FindAllTagsRequest{} }
func (m *FindAllTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindAllTagsRequest) ProtoMessage()               {}
func (*FindAllTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *FindAllTagsRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllTagsResponse struct {
	Tags []*FindAllTagsResponse_Tag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *FindAllTagsResponse) Reset()                    { *m = FindAllTagsResponse{} }
func (m *FindAllTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*FindAllTagsResponse) ProtoMessage()               {}
func (*FindAllTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *FindAllTagsResponse) GetTags() []*FindAllTagsResponse_Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type FindAllTagsResponse_Tag struct {
	Name         []byte     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id           string     `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	TargetCommit *GitCommit `protobuf:"bytes,3,opt,name=target_commit,json=targetCommit" json:"target_commit,omitempty"`
	Message      []byte     `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *FindAllTagsResponse_Tag) Reset()                    { *m = FindAllTagsResponse_Tag{} }
func (m *FindAllTagsResponse_Tag) String() string            { return proto.CompactTextString(m) }
func (*FindAllTagsResponse_Tag) ProtoMessage()               {}
func (*FindAllTagsResponse_Tag) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15, 0} }

func (m *FindAllTagsResponse_Tag) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *FindAllTagsResponse_Tag) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FindAllTagsResponse_Tag) GetTargetCommit() *GitCommit {
	if m != nil {
		return m.TargetCommit
	}
	return nil
}

func (m *FindAllTagsResponse_Tag) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*FindDefaultBranchNameRequest)(nil), "gitaly.FindDefaultBranchNameRequest")
	proto.RegisterType((*FindDefaultBranchNameResponse)(nil), "gitaly.FindDefaultBranchNameResponse")
	proto.RegisterType((*FindAllBranchNamesRequest)(nil), "gitaly.FindAllBranchNamesRequest")
	proto.RegisterType((*FindAllBranchNamesResponse)(nil), "gitaly.FindAllBranchNamesResponse")
	proto.RegisterType((*FindAllTagNamesRequest)(nil), "gitaly.FindAllTagNamesRequest")
	proto.RegisterType((*FindAllTagNamesResponse)(nil), "gitaly.FindAllTagNamesResponse")
	proto.RegisterType((*FindRefNameRequest)(nil), "gitaly.FindRefNameRequest")
	proto.RegisterType((*FindRefNameResponse)(nil), "gitaly.FindRefNameResponse")
	proto.RegisterType((*FindLocalBranchesRequest)(nil), "gitaly.FindLocalBranchesRequest")
	proto.RegisterType((*FindLocalBranchesResponse)(nil), "gitaly.FindLocalBranchesResponse")
	proto.RegisterType((*FindLocalBranchResponse)(nil), "gitaly.FindLocalBranchResponse")
	proto.RegisterType((*FindLocalBranchCommitAuthor)(nil), "gitaly.FindLocalBranchCommitAuthor")
	proto.RegisterType((*FindAllBranchesRequest)(nil), "gitaly.FindAllBranchesRequest")
	proto.RegisterType((*FindAllBranchesResponse)(nil), "gitaly.FindAllBranchesResponse")
	proto.RegisterType((*FindAllBranchesResponse_Branch)(nil), "gitaly.FindAllBranchesResponse.Branch")
	proto.RegisterType((*FindAllTagsRequest)(nil), "gitaly.FindAllTagsRequest")
	proto.RegisterType((*FindAllTagsResponse)(nil), "gitaly.FindAllTagsResponse")
	proto.RegisterType((*FindAllTagsResponse_Tag)(nil), "gitaly.FindAllTagsResponse.Tag")
	proto.RegisterEnum("gitaly.FindLocalBranchesRequest_SortBy", FindLocalBranchesRequest_SortBy_name, FindLocalBranchesRequest_SortBy_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RefService service

type RefServiceClient interface {
	FindDefaultBranchName(ctx context.Context, in *FindDefaultBranchNameRequest, opts ...grpc.CallOption) (*FindDefaultBranchNameResponse, error)
	FindAllBranchNames(ctx context.Context, in *FindAllBranchNamesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchNamesClient, error)
	FindAllTagNames(ctx context.Context, in *FindAllTagNamesRequest, opts ...grpc.CallOption) (RefService_FindAllTagNamesClient, error)
	// Find a Ref matching the given constraints. Response may be empty.
	FindRefName(ctx context.Context, in *FindRefNameRequest, opts ...grpc.CallOption) (*FindRefNameResponse, error)
	// Return a stream so we can divide the response in chunks of branches
	FindLocalBranches(ctx context.Context, in *FindLocalBranchesRequest, opts ...grpc.CallOption) (RefService_FindLocalBranchesClient, error)
	FindAllBranches(ctx context.Context, in *FindAllBranchesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchesClient, error)
	FindAllTags(ctx context.Context, in *FindAllTagsRequest, opts ...grpc.CallOption) (RefService_FindAllTagsClient, error)
}

type refServiceClient struct {
	cc *grpc.ClientConn
}

func NewRefServiceClient(cc *grpc.ClientConn) RefServiceClient {
	return &refServiceClient{cc}
}

func (c *refServiceClient) FindDefaultBranchName(ctx context.Context, in *FindDefaultBranchNameRequest, opts ...grpc.CallOption) (*FindDefaultBranchNameResponse, error) {
	out := new(FindDefaultBranchNameResponse)
	err := grpc.Invoke(ctx, "/gitaly.RefService/FindDefaultBranchName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) FindAllBranchNames(ctx context.Context, in *FindAllBranchNamesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchNamesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RefService_serviceDesc.Streams[0], c.cc, "/gitaly.RefService/FindAllBranchNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllBranchNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllBranchNamesClient interface {
	Recv() (*FindAllBranchNamesResponse, error)
	grpc.ClientStream
}

type refServiceFindAllBranchNamesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllBranchNamesClient) Recv() (*FindAllBranchNamesResponse, error) {
	m := new(FindAllBranchNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindAllTagNames(ctx context.Context, in *FindAllTagNamesRequest, opts ...grpc.CallOption) (RefService_FindAllTagNamesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RefService_serviceDesc.Streams[1], c.cc, "/gitaly.RefService/FindAllTagNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllTagNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllTagNamesClient interface {
	Recv() (*FindAllTagNamesResponse, error)
	grpc.ClientStream
}

type refServiceFindAllTagNamesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllTagNamesClient) Recv() (*FindAllTagNamesResponse, error) {
	m := new(FindAllTagNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindRefName(ctx context.Context, in *FindRefNameRequest, opts ...grpc.CallOption) (*FindRefNameResponse, error) {
	out := new(FindRefNameResponse)
	err := grpc.Invoke(ctx, "/gitaly.RefService/FindRefName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) FindLocalBranches(ctx context.Context, in *FindLocalBranchesRequest, opts ...grpc.CallOption) (RefService_FindLocalBranchesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RefService_serviceDesc.Streams[2], c.cc, "/gitaly.RefService/FindLocalBranches", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindLocalBranchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindLocalBranchesClient interface {
	Recv() (*FindLocalBranchesResponse, error)
	grpc.ClientStream
}

type refServiceFindLocalBranchesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindLocalBranchesClient) Recv() (*FindLocalBranchesResponse, error) {
	m := new(FindLocalBranchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindAllBranches(ctx context.Context, in *FindAllBranchesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RefService_serviceDesc.Streams[3], c.cc, "/gitaly.RefService/FindAllBranches", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllBranchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllBranchesClient interface {
	Recv() (*FindAllBranchesResponse, error)
	grpc.ClientStream
}

type refServiceFindAllBranchesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllBranchesClient) Recv() (*FindAllBranchesResponse, error) {
	m := new(FindAllBranchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindAllTags(ctx context.Context, in *FindAllTagsRequest, opts ...grpc.CallOption) (RefService_FindAllTagsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RefService_serviceDesc.Streams[4], c.cc, "/gitaly.RefService/FindAllTags", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllTagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllTagsClient interface {
	Recv() (*FindAllTagsResponse, error)
	grpc.ClientStream
}

type refServiceFindAllTagsClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllTagsClient) Recv() (*FindAllTagsResponse, error) {
	m := new(FindAllTagsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RefService service

type RefServiceServer interface {
	FindDefaultBranchName(context.Context, *FindDefaultBranchNameRequest) (*FindDefaultBranchNameResponse, error)
	FindAllBranchNames(*FindAllBranchNamesRequest, RefService_FindAllBranchNamesServer) error
	FindAllTagNames(*FindAllTagNamesRequest, RefService_FindAllTagNamesServer) error
	// Find a Ref matching the given constraints. Response may be empty.
	FindRefName(context.Context, *FindRefNameRequest) (*FindRefNameResponse, error)
	// Return a stream so we can divide the response in chunks of branches
	FindLocalBranches(*FindLocalBranchesRequest, RefService_FindLocalBranchesServer) error
	FindAllBranches(*FindAllBranchesRequest, RefService_FindAllBranchesServer) error
	FindAllTags(*FindAllTagsRequest, RefService_FindAllTagsServer) error
}

func RegisterRefServiceServer(s *grpc.Server, srv RefServiceServer) {
	s.RegisterService(&_RefService_serviceDesc, srv)
}

func _RefService_FindDefaultBranchName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultBranchNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).FindDefaultBranchName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/FindDefaultBranchName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).FindDefaultBranchName(ctx, req.(*FindDefaultBranchNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_FindAllBranchNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllBranchNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllBranchNames(m, &refServiceFindAllBranchNamesServer{stream})
}

type RefService_FindAllBranchNamesServer interface {
	Send(*FindAllBranchNamesResponse) error
	grpc.ServerStream
}

type refServiceFindAllBranchNamesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllBranchNamesServer) Send(m *FindAllBranchNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindAllTagNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllTagNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllTagNames(m, &refServiceFindAllTagNamesServer{stream})
}

type RefService_FindAllTagNamesServer interface {
	Send(*FindAllTagNamesResponse) error
	grpc.ServerStream
}

type refServiceFindAllTagNamesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllTagNamesServer) Send(m *FindAllTagNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindRefName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRefNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).FindRefName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/FindRefName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).FindRefName(ctx, req.(*FindRefNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_FindLocalBranches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindLocalBranchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindLocalBranches(m, &refServiceFindLocalBranchesServer{stream})
}

type RefService_FindLocalBranchesServer interface {
	Send(*FindLocalBranchesResponse) error
	grpc.ServerStream
}

type refServiceFindLocalBranchesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindLocalBranchesServer) Send(m *FindLocalBranchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindAllBranches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllBranchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllBranches(m, &refServiceFindAllBranchesServer{stream})
}

type RefService_FindAllBranchesServer interface {
	Send(*FindAllBranchesResponse) error
	grpc.ServerStream
}

type refServiceFindAllBranchesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllBranchesServer) Send(m *FindAllBranchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindAllTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllTags(m, &refServiceFindAllTagsServer{stream})
}

type RefService_FindAllTagsServer interface {
	Send(*FindAllTagsResponse) error
	grpc.ServerStream
}

type refServiceFindAllTagsServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllTagsServer) Send(m *FindAllTagsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RefService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.RefService",
	HandlerType: (*RefServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDefaultBranchName",
			Handler:    _RefService_FindDefaultBranchName_Handler,
		},
		{
			MethodName: "FindRefName",
			Handler:    _RefService_FindRefName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindAllBranchNames",
			Handler:       _RefService_FindAllBranchNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllTagNames",
			Handler:       _RefService_FindAllTagNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindLocalBranches",
			Handler:       _RefService_FindLocalBranches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllBranches",
			Handler:       _RefService_FindAllBranches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllTags",
			Handler:       _RefService_FindAllTags_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ref.proto",
}

func init() { proto.RegisterFile("ref.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x51, 0x53, 0xd3, 0x4a,
	0x14, 0x26, 0xa5, 0x14, 0x38, 0x0d, 0x50, 0xf6, 0x72, 0xb9, 0xb9, 0xe1, 0x5e, 0x28, 0x51, 0x14,
	0x5e, 0x82, 0x13, 0x46, 0x5f, 0x7c, 0xb1, 0xb4, 0x08, 0x3a, 0x88, 0xce, 0xb6, 0x3a, 0x3e, 0x38,
	0xd3, 0xd9, 0xb6, 0xdb, 0x10, 0xa7, 0x69, 0x6a, 0xb2, 0x55, 0x3b, 0x8e, 0xbf, 0xc0, 0xff, 0xe1,
	0x5f, 0xe1, 0x37, 0xf9, 0xe6, 0x74, 0x77, 0x13, 0xd3, 0x76, 0x5b, 0x9c, 0xa9, 0x4f, 0xed, 0x39,
	0xf9, 0xce, 0xb7, 0xfb, 0x9d, 0x73, 0xf6, 0x1c, 0x58, 0x0d, 0x69, 0xdb, 0xee, 0x85, 0x01, 0x0b,
	0x50, 0xce, 0xf5, 0x18, 0xe9, 0x0c, 0x4c, 0x3d, 0xba, 0x26, 0x21, 0x6d, 0x09, 0xaf, 0xb9, 0xe7,
	0x06, 0x81, 0xdb, 0xa1, 0xc7, 0xdc, 0x6a, 0xf4, 0xdb, 0xc7, 0xcc, 0xf3, 0x69, 0xc4, 0x88, 0xdf,
	0x13, 0x00, 0x0b, 0xc3, 0x7f, 0x4f, 0xbd, 0x6e, 0xab, 0x42, 0xdb, 0xa4, 0xdf, 0x61, 0xa7, 0x21,
	0xe9, 0x36, 0xaf, 0xaf, 0x88, 0x4f, 0x31, 0xfd, 0xd0, 0xa7, 0x11, 0x43, 0x0e, 0x40, 0x48, 0x7b,
	0x41, 0xe4, 0xb1, 0x20, 0x1c, 0x18, 0x5a, 0x51, 0x3b, 0xcc, 0x3b, 0xc8, 0x16, 0x67, 0xd9, 0x38,
	0xf9, 0x82, 0x53, 0x28, 0xeb, 0x04, 0xfe, 0x9f, 0xc2, 0x19, 0xf5, 0x82, 0x6e, 0x44, 0x11, 0x82,
	0x6c, 0x97, 0xf8, 0x94, 0xd3, 0xe9, 0x98, 0xff, 0xb7, 0x5e, 0xc2, 0xbf, 0xc3, 0xa0, 0x52, 0xa7,
	0xf3, 0x2b, 0x20, 0x9a, 0xe7, 0x16, 0x0e, 0x98, 0x2a, 0x42, 0x79, 0x85, 0x2d, 0x58, 0x1a, 0x1e,
	0x1b, 0x19, 0x5a, 0x71, 0xf1, 0x50, 0xc7, 0xc2, 0xb0, 0x2e, 0x61, 0x5b, 0xc6, 0xd4, 0x88, 0x3b,
	0xf7, 0x0d, 0x8e, 0xe1, 0x9f, 0x09, 0xb6, 0x99, 0xc7, 0x7f, 0x05, 0x34, 0x0c, 0xc0, 0xb4, 0x3d,
	0x67, 0x09, 0xd0, 0x0e, 0xac, 0x36, 0x03, 0xdf, 0xf7, 0x58, 0xdd, 0x6b, 0x19, 0x99, 0xa2, 0x76,
	0xb8, 0x8a, 0x57, 0x84, 0xe3, 0x59, 0x0b, 0x6d, 0x43, 0xae, 0x17, 0xd2, 0xb6, 0xf7, 0xd9, 0x58,
	0xe4, 0x05, 0x90, 0x96, 0x75, 0x04, 0x7f, 0x8d, 0x1c, 0x3f, 0xa3, 0x5a, 0x37, 0x1a, 0x18, 0x43,
	0xec, 0x65, 0xd0, 0x24, 0x32, 0xbf, 0x73, 0xe5, 0x0a, 0x3d, 0x81, 0xe5, 0x28, 0x08, 0x59, 0xbd,
	0x31, 0xe0, 0xd7, 0x5d, 0x77, 0xee, 0xc7, 0x01, 0xd3, 0x8e, 0xb1, 0xab, 0x41, 0xc8, 0x4e, 0x07,
	0x38, 0x17, 0xf1, 0x5f, 0xeb, 0x21, 0xe4, 0x84, 0x07, 0xad, 0x40, 0xf6, 0xaa, 0xf4, 0xe2, 0xac,
	0xb0, 0x80, 0x36, 0x20, 0xff, 0xfa, 0x55, 0xa5, 0x54, 0x3b, 0xab, 0xd4, 0x4b, 0xd5, 0x72, 0x41,
	0x43, 0x05, 0xd0, 0x63, 0x47, 0xe5, 0xac, 0x5a, 0x2e, 0x64, 0xac, 0xb7, 0xa2, 0xef, 0xc6, 0x4e,
	0x90, 0xd2, 0x1f, 0xc3, 0x4a, 0x43, 0xfa, 0x78, 0xa5, 0xf2, 0xce, 0xde, 0x94, 0x6b, 0xc5, 0x21,
	0x38, 0x09, 0xb0, 0xbe, 0x65, 0x44, 0xfd, 0x15, 0x28, 0x55, 0x4e, 0x67, 0xd7, 0xec, 0x00, 0xd6,
	0xe5, 0xc7, 0xa8, 0xdf, 0x78, 0x4f, 0x9b, 0x4c, 0xd6, 0x6e, 0x4d, 0x78, 0xab, 0xc2, 0x89, 0x2e,
	0x40, 0x3a, 0xea, 0xa4, 0xcf, 0xae, 0x83, 0xd0, 0xc8, 0xf2, 0xec, 0xdf, 0x99, 0x72, 0xeb, 0x32,
	0xc7, 0x96, 0x38, 0x14, 0xeb, 0xcd, 0x94, 0x85, 0xae, 0xa0, 0x20, 0x99, 0xc4, 0x0f, 0xa3, 0xa1,
	0xb1, 0xf4, 0xfb, 0x64, 0x1b, 0x22, 0xaa, 0x1c, 0xc7, 0x5a, 0x9f, 0x60, 0x67, 0x06, 0x5e, 0x99,
	0x90, 0x2d, 0x58, 0xa2, 0x3e, 0xf1, 0x3a, 0x3c, 0x19, 0x3a, 0x16, 0x06, 0xb2, 0x21, 0xdb, 0x22,
	0x8c, 0x72, 0xfd, 0x79, 0xc7, 0xb4, 0xc5, 0x84, 0xb3, 0xe3, 0x09, 0x67, 0xd7, 0xe2, 0x09, 0x87,
	0x39, 0x2e, 0xf5, 0xa6, 0xff, 0x40, 0x9f, 0x5a, 0xdf, 0xb5, 0xe4, 0x51, 0x4f, 0x74, 0xcb, 0xe9,
	0x44, 0xb7, 0xdc, 0x4b, 0xa7, 0x4a, 0x11, 0x62, 0xcb, 0xb6, 0x48, 0xe2, 0xcc, 0x73, 0xc8, 0x09,
	0x9f, 0x32, 0x23, 0x47, 0x90, 0x63, 0x24, 0x74, 0x29, 0xe3, 0x29, 0xc9, 0x3b, 0x9b, 0x31, 0xff,
	0x79, 0x9c, 0x6a, 0x2c, 0x01, 0xd6, 0x85, 0x98, 0x25, 0x62, 0xf8, 0xcc, 0x25, 0xf9, 0x46, 0x13,
	0x73, 0x21, 0xa1, 0x92, 0x72, 0x4f, 0x20, 0xcb, 0x88, 0xab, 0x7c, 0x18, 0x63, 0x50, 0xbb, 0x46,
	0x5c, 0xcc, 0xc1, 0xe6, 0x17, 0x58, 0xac, 0x11, 0x57, 0x29, 0x6e, 0x1d, 0x32, 0x49, 0xe3, 0x67,
	0xbc, 0x16, 0x7a, 0x04, 0x6b, 0x42, 0x8b, 0xec, 0x40, 0x59, 0x71, 0x85, 0x66, 0x5d, 0xe0, 0x84,
	0x85, 0x0c, 0x58, 0xf6, 0x69, 0x14, 0x11, 0x97, 0xf2, 0xee, 0xd7, 0x71, 0x6c, 0x3a, 0x3f, 0xb2,
	0x00, 0x98, 0xb6, 0xab, 0x34, 0xfc, 0xe8, 0x35, 0x29, 0x6a, 0xc3, 0xdf, 0xca, 0x3d, 0x85, 0xee,
	0xa6, 0xb5, 0x4c, 0x5b, 0x8d, 0xe6, 0xc1, 0x2d, 0x28, 0xa1, 0xdd, 0x5a, 0x40, 0xf5, 0xa4, 0x14,
	0xa9, 0x4d, 0x84, 0xf6, 0x95, 0xbd, 0x91, 0x5e, 0x3a, 0xa6, 0x35, 0x0b, 0x12, 0xd3, 0x3f, 0xd0,
	0xd0, 0x1b, 0xd8, 0x18, 0x5b, 0x34, 0x68, 0x77, 0xb2, 0x1c, 0x23, 0xd4, 0x7b, 0x53, 0xbf, 0xa7,
	0x78, 0x2f, 0x20, 0x9f, 0x5a, 0x08, 0xc8, 0x4c, 0xc7, 0x8c, 0x2e, 0x29, 0x73, 0x47, 0xf9, 0x2d,
	0x49, 0xc1, 0x3b, 0xd8, 0x9c, 0x98, 0xb2, 0xa8, 0x78, 0xdb, 0x88, 0x37, 0xf7, 0x67, 0x20, 0x94,
	0xfa, 0x13, 0xee, 0xdd, 0xa9, 0x2f, 0x4f, 0xad, 0x5f, 0xc9, 0xfb, 0x5c, 0xe8, 0x97, 0xdd, 0x3c,
	0xaa, 0x7f, 0xf4, 0x61, 0x8d, 0xea, 0x1f, 0x6b, 0xff, 0x21, 0x57, 0x23, 0xc7, 0x07, 0xd4, 0xc9,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc7, 0xea, 0x03, 0xcf, 0xb3, 0x09, 0x00, 0x00,
}
