// Code generated by protoc-gen-go. DO NOT EDIT.
// source: operations.proto

package gitalypb // import "gitlab.com/gitlab-org/gitaly-proto/go/gitalypb"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserCommitFilesActionHeader_ActionType int32

const (
	UserCommitFilesActionHeader_CREATE     UserCommitFilesActionHeader_ActionType = 0
	UserCommitFilesActionHeader_CREATE_DIR UserCommitFilesActionHeader_ActionType = 1
	UserCommitFilesActionHeader_UPDATE     UserCommitFilesActionHeader_ActionType = 2
	UserCommitFilesActionHeader_MOVE       UserCommitFilesActionHeader_ActionType = 3
	UserCommitFilesActionHeader_DELETE     UserCommitFilesActionHeader_ActionType = 4
	UserCommitFilesActionHeader_CHMOD      UserCommitFilesActionHeader_ActionType = 5
)

var UserCommitFilesActionHeader_ActionType_name = map[int32]string{
	0: "CREATE",
	1: "CREATE_DIR",
	2: "UPDATE",
	3: "MOVE",
	4: "DELETE",
	5: "CHMOD",
}
var UserCommitFilesActionHeader_ActionType_value = map[string]int32{
	"CREATE":     0,
	"CREATE_DIR": 1,
	"UPDATE":     2,
	"MOVE":       3,
	"DELETE":     4,
	"CHMOD":      5,
}

func (x UserCommitFilesActionHeader_ActionType) String() string {
	return proto.EnumName(UserCommitFilesActionHeader_ActionType_name, int32(x))
}
func (UserCommitFilesActionHeader_ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{21, 0}
}

type UserCreateBranchRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	BranchName           []byte      `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	User                 *User       `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	StartPoint           []byte      `protobuf:"bytes,4,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserCreateBranchRequest) Reset()         { *m = UserCreateBranchRequest{} }
func (m *UserCreateBranchRequest) String() string { return proto.CompactTextString(m) }
func (*UserCreateBranchRequest) ProtoMessage()    {}
func (*UserCreateBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{0}
}
func (m *UserCreateBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCreateBranchRequest.Unmarshal(m, b)
}
func (m *UserCreateBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCreateBranchRequest.Marshal(b, m, deterministic)
}
func (dst *UserCreateBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCreateBranchRequest.Merge(dst, src)
}
func (m *UserCreateBranchRequest) XXX_Size() int {
	return xxx_messageInfo_UserCreateBranchRequest.Size(m)
}
func (m *UserCreateBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCreateBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserCreateBranchRequest proto.InternalMessageInfo

func (m *UserCreateBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserCreateBranchRequest) GetBranchName() []byte {
	if m != nil {
		return m.BranchName
	}
	return nil
}

func (m *UserCreateBranchRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserCreateBranchRequest) GetStartPoint() []byte {
	if m != nil {
		return m.StartPoint
	}
	return nil
}

type UserCreateBranchResponse struct {
	Branch *Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	// Error returned by the pre-receive hook. If no error was thrown,
	// it's the empty string ("")
	PreReceiveError      string   `protobuf:"bytes,2,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserCreateBranchResponse) Reset()         { *m = UserCreateBranchResponse{} }
func (m *UserCreateBranchResponse) String() string { return proto.CompactTextString(m) }
func (*UserCreateBranchResponse) ProtoMessage()    {}
func (*UserCreateBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{1}
}
func (m *UserCreateBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCreateBranchResponse.Unmarshal(m, b)
}
func (m *UserCreateBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCreateBranchResponse.Marshal(b, m, deterministic)
}
func (dst *UserCreateBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCreateBranchResponse.Merge(dst, src)
}
func (m *UserCreateBranchResponse) XXX_Size() int {
	return xxx_messageInfo_UserCreateBranchResponse.Size(m)
}
func (m *UserCreateBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCreateBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserCreateBranchResponse proto.InternalMessageInfo

func (m *UserCreateBranchResponse) GetBranch() *Branch {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *UserCreateBranchResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserUpdateBranchRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	BranchName           []byte      `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	User                 *User       `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Newrev               []byte      `protobuf:"bytes,4,opt,name=newrev,proto3" json:"newrev,omitempty"`
	Oldrev               []byte      `protobuf:"bytes,5,opt,name=oldrev,proto3" json:"oldrev,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserUpdateBranchRequest) Reset()         { *m = UserUpdateBranchRequest{} }
func (m *UserUpdateBranchRequest) String() string { return proto.CompactTextString(m) }
func (*UserUpdateBranchRequest) ProtoMessage()    {}
func (*UserUpdateBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{2}
}
func (m *UserUpdateBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserUpdateBranchRequest.Unmarshal(m, b)
}
func (m *UserUpdateBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserUpdateBranchRequest.Marshal(b, m, deterministic)
}
func (dst *UserUpdateBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUpdateBranchRequest.Merge(dst, src)
}
func (m *UserUpdateBranchRequest) XXX_Size() int {
	return xxx_messageInfo_UserUpdateBranchRequest.Size(m)
}
func (m *UserUpdateBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUpdateBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserUpdateBranchRequest proto.InternalMessageInfo

func (m *UserUpdateBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserUpdateBranchRequest) GetBranchName() []byte {
	if m != nil {
		return m.BranchName
	}
	return nil
}

func (m *UserUpdateBranchRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserUpdateBranchRequest) GetNewrev() []byte {
	if m != nil {
		return m.Newrev
	}
	return nil
}

func (m *UserUpdateBranchRequest) GetOldrev() []byte {
	if m != nil {
		return m.Oldrev
	}
	return nil
}

type UserUpdateBranchResponse struct {
	PreReceiveError      string   `protobuf:"bytes,1,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserUpdateBranchResponse) Reset()         { *m = UserUpdateBranchResponse{} }
func (m *UserUpdateBranchResponse) String() string { return proto.CompactTextString(m) }
func (*UserUpdateBranchResponse) ProtoMessage()    {}
func (*UserUpdateBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{3}
}
func (m *UserUpdateBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserUpdateBranchResponse.Unmarshal(m, b)
}
func (m *UserUpdateBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserUpdateBranchResponse.Marshal(b, m, deterministic)
}
func (dst *UserUpdateBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUpdateBranchResponse.Merge(dst, src)
}
func (m *UserUpdateBranchResponse) XXX_Size() int {
	return xxx_messageInfo_UserUpdateBranchResponse.Size(m)
}
func (m *UserUpdateBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUpdateBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserUpdateBranchResponse proto.InternalMessageInfo

func (m *UserUpdateBranchResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserDeleteBranchRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	BranchName           []byte      `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	User                 *User       `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserDeleteBranchRequest) Reset()         { *m = UserDeleteBranchRequest{} }
func (m *UserDeleteBranchRequest) String() string { return proto.CompactTextString(m) }
func (*UserDeleteBranchRequest) ProtoMessage()    {}
func (*UserDeleteBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{4}
}
func (m *UserDeleteBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDeleteBranchRequest.Unmarshal(m, b)
}
func (m *UserDeleteBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDeleteBranchRequest.Marshal(b, m, deterministic)
}
func (dst *UserDeleteBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeleteBranchRequest.Merge(dst, src)
}
func (m *UserDeleteBranchRequest) XXX_Size() int {
	return xxx_messageInfo_UserDeleteBranchRequest.Size(m)
}
func (m *UserDeleteBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeleteBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeleteBranchRequest proto.InternalMessageInfo

func (m *UserDeleteBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserDeleteBranchRequest) GetBranchName() []byte {
	if m != nil {
		return m.BranchName
	}
	return nil
}

func (m *UserDeleteBranchRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserDeleteBranchResponse struct {
	PreReceiveError      string   `protobuf:"bytes,1,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserDeleteBranchResponse) Reset()         { *m = UserDeleteBranchResponse{} }
func (m *UserDeleteBranchResponse) String() string { return proto.CompactTextString(m) }
func (*UserDeleteBranchResponse) ProtoMessage()    {}
func (*UserDeleteBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{5}
}
func (m *UserDeleteBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDeleteBranchResponse.Unmarshal(m, b)
}
func (m *UserDeleteBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDeleteBranchResponse.Marshal(b, m, deterministic)
}
func (dst *UserDeleteBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeleteBranchResponse.Merge(dst, src)
}
func (m *UserDeleteBranchResponse) XXX_Size() int {
	return xxx_messageInfo_UserDeleteBranchResponse.Size(m)
}
func (m *UserDeleteBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeleteBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeleteBranchResponse proto.InternalMessageInfo

func (m *UserDeleteBranchResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserDeleteTagRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	TagName              []byte      `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	User                 *User       `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserDeleteTagRequest) Reset()         { *m = UserDeleteTagRequest{} }
func (m *UserDeleteTagRequest) String() string { return proto.CompactTextString(m) }
func (*UserDeleteTagRequest) ProtoMessage()    {}
func (*UserDeleteTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{6}
}
func (m *UserDeleteTagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDeleteTagRequest.Unmarshal(m, b)
}
func (m *UserDeleteTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDeleteTagRequest.Marshal(b, m, deterministic)
}
func (dst *UserDeleteTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeleteTagRequest.Merge(dst, src)
}
func (m *UserDeleteTagRequest) XXX_Size() int {
	return xxx_messageInfo_UserDeleteTagRequest.Size(m)
}
func (m *UserDeleteTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeleteTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeleteTagRequest proto.InternalMessageInfo

func (m *UserDeleteTagRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserDeleteTagRequest) GetTagName() []byte {
	if m != nil {
		return m.TagName
	}
	return nil
}

func (m *UserDeleteTagRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserDeleteTagResponse struct {
	PreReceiveError      string   `protobuf:"bytes,1,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserDeleteTagResponse) Reset()         { *m = UserDeleteTagResponse{} }
func (m *UserDeleteTagResponse) String() string { return proto.CompactTextString(m) }
func (*UserDeleteTagResponse) ProtoMessage()    {}
func (*UserDeleteTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{7}
}
func (m *UserDeleteTagResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDeleteTagResponse.Unmarshal(m, b)
}
func (m *UserDeleteTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDeleteTagResponse.Marshal(b, m, deterministic)
}
func (dst *UserDeleteTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeleteTagResponse.Merge(dst, src)
}
func (m *UserDeleteTagResponse) XXX_Size() int {
	return xxx_messageInfo_UserDeleteTagResponse.Size(m)
}
func (m *UserDeleteTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeleteTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeleteTagResponse proto.InternalMessageInfo

func (m *UserDeleteTagResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserCreateTagRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	TagName              []byte      `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	User                 *User       `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	TargetRevision       []byte      `protobuf:"bytes,4,opt,name=target_revision,json=targetRevision,proto3" json:"target_revision,omitempty"`
	Message              []byte      `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserCreateTagRequest) Reset()         { *m = UserCreateTagRequest{} }
func (m *UserCreateTagRequest) String() string { return proto.CompactTextString(m) }
func (*UserCreateTagRequest) ProtoMessage()    {}
func (*UserCreateTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{8}
}
func (m *UserCreateTagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCreateTagRequest.Unmarshal(m, b)
}
func (m *UserCreateTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCreateTagRequest.Marshal(b, m, deterministic)
}
func (dst *UserCreateTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCreateTagRequest.Merge(dst, src)
}
func (m *UserCreateTagRequest) XXX_Size() int {
	return xxx_messageInfo_UserCreateTagRequest.Size(m)
}
func (m *UserCreateTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCreateTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserCreateTagRequest proto.InternalMessageInfo

func (m *UserCreateTagRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserCreateTagRequest) GetTagName() []byte {
	if m != nil {
		return m.TagName
	}
	return nil
}

func (m *UserCreateTagRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserCreateTagRequest) GetTargetRevision() []byte {
	if m != nil {
		return m.TargetRevision
	}
	return nil
}

func (m *UserCreateTagRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type UserCreateTagResponse struct {
	Tag                  *Tag     `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Exists               bool     `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
	PreReceiveError      string   `protobuf:"bytes,3,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserCreateTagResponse) Reset()         { *m = UserCreateTagResponse{} }
func (m *UserCreateTagResponse) String() string { return proto.CompactTextString(m) }
func (*UserCreateTagResponse) ProtoMessage()    {}
func (*UserCreateTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{9}
}
func (m *UserCreateTagResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCreateTagResponse.Unmarshal(m, b)
}
func (m *UserCreateTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCreateTagResponse.Marshal(b, m, deterministic)
}
func (dst *UserCreateTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCreateTagResponse.Merge(dst, src)
}
func (m *UserCreateTagResponse) XXX_Size() int {
	return xxx_messageInfo_UserCreateTagResponse.Size(m)
}
func (m *UserCreateTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCreateTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserCreateTagResponse proto.InternalMessageInfo

func (m *UserCreateTagResponse) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *UserCreateTagResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *UserCreateTagResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserMergeBranchRequest struct {
	// First message
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User       *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	CommitId   string      `protobuf:"bytes,3,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	Branch     []byte      `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	Message    []byte      `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// Second message
	// Tell the server to apply the merge to the branch
	Apply                bool     `protobuf:"varint,6,opt,name=apply,proto3" json:"apply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMergeBranchRequest) Reset()         { *m = UserMergeBranchRequest{} }
func (m *UserMergeBranchRequest) String() string { return proto.CompactTextString(m) }
func (*UserMergeBranchRequest) ProtoMessage()    {}
func (*UserMergeBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{10}
}
func (m *UserMergeBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMergeBranchRequest.Unmarshal(m, b)
}
func (m *UserMergeBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMergeBranchRequest.Marshal(b, m, deterministic)
}
func (dst *UserMergeBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMergeBranchRequest.Merge(dst, src)
}
func (m *UserMergeBranchRequest) XXX_Size() int {
	return xxx_messageInfo_UserMergeBranchRequest.Size(m)
}
func (m *UserMergeBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMergeBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserMergeBranchRequest proto.InternalMessageInfo

func (m *UserMergeBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserMergeBranchRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserMergeBranchRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *UserMergeBranchRequest) GetBranch() []byte {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *UserMergeBranchRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UserMergeBranchRequest) GetApply() bool {
	if m != nil {
		return m.Apply
	}
	return false
}

type UserMergeBranchResponse struct {
	// First message
	// The merge commit the branch will be updated to. The caller can still abort the merge.
	CommitId string `protobuf:"bytes,1,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// Second message
	// If set, the merge has been applied to the branch.
	BranchUpdate         *OperationBranchUpdate `protobuf:"bytes,3,opt,name=branch_update,json=branchUpdate,proto3" json:"branch_update,omitempty"`
	PreReceiveError      string                 `protobuf:"bytes,4,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UserMergeBranchResponse) Reset()         { *m = UserMergeBranchResponse{} }
func (m *UserMergeBranchResponse) String() string { return proto.CompactTextString(m) }
func (*UserMergeBranchResponse) ProtoMessage()    {}
func (*UserMergeBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{11}
}
func (m *UserMergeBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMergeBranchResponse.Unmarshal(m, b)
}
func (m *UserMergeBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMergeBranchResponse.Marshal(b, m, deterministic)
}
func (dst *UserMergeBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMergeBranchResponse.Merge(dst, src)
}
func (m *UserMergeBranchResponse) XXX_Size() int {
	return xxx_messageInfo_UserMergeBranchResponse.Size(m)
}
func (m *UserMergeBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMergeBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserMergeBranchResponse proto.InternalMessageInfo

func (m *UserMergeBranchResponse) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *UserMergeBranchResponse) GetBranchUpdate() *OperationBranchUpdate {
	if m != nil {
		return m.BranchUpdate
	}
	return nil
}

func (m *UserMergeBranchResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserMergeToRefRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User       *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	SourceSha  string      `protobuf:"bytes,3,opt,name=source_sha,json=sourceSha,proto3" json:"source_sha,omitempty"`
	Branch     []byte      `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	// The merge of source_sha and branch has target_ref as target.
	//
	// The target_ref is _always_ overwritten when merging source_sha
	// and branch. That is, if a second request comes in, target_ref
	// will lose its previous state and be updated to the latest merge
	// between source_sha and branch.
	TargetRef            []byte   `protobuf:"bytes,5,opt,name=target_ref,json=targetRef,proto3" json:"target_ref,omitempty"`
	Message              []byte   `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMergeToRefRequest) Reset()         { *m = UserMergeToRefRequest{} }
func (m *UserMergeToRefRequest) String() string { return proto.CompactTextString(m) }
func (*UserMergeToRefRequest) ProtoMessage()    {}
func (*UserMergeToRefRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{12}
}
func (m *UserMergeToRefRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMergeToRefRequest.Unmarshal(m, b)
}
func (m *UserMergeToRefRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMergeToRefRequest.Marshal(b, m, deterministic)
}
func (dst *UserMergeToRefRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMergeToRefRequest.Merge(dst, src)
}
func (m *UserMergeToRefRequest) XXX_Size() int {
	return xxx_messageInfo_UserMergeToRefRequest.Size(m)
}
func (m *UserMergeToRefRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMergeToRefRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserMergeToRefRequest proto.InternalMessageInfo

func (m *UserMergeToRefRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserMergeToRefRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserMergeToRefRequest) GetSourceSha() string {
	if m != nil {
		return m.SourceSha
	}
	return ""
}

func (m *UserMergeToRefRequest) GetBranch() []byte {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *UserMergeToRefRequest) GetTargetRef() []byte {
	if m != nil {
		return m.TargetRef
	}
	return nil
}

func (m *UserMergeToRefRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type UserMergeToRefResponse struct {
	CommitId             string   `protobuf:"bytes,1,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	PreReceiveError      string   `protobuf:"bytes,2,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMergeToRefResponse) Reset()         { *m = UserMergeToRefResponse{} }
func (m *UserMergeToRefResponse) String() string { return proto.CompactTextString(m) }
func (*UserMergeToRefResponse) ProtoMessage()    {}
func (*UserMergeToRefResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{13}
}
func (m *UserMergeToRefResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMergeToRefResponse.Unmarshal(m, b)
}
func (m *UserMergeToRefResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMergeToRefResponse.Marshal(b, m, deterministic)
}
func (dst *UserMergeToRefResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMergeToRefResponse.Merge(dst, src)
}
func (m *UserMergeToRefResponse) XXX_Size() int {
	return xxx_messageInfo_UserMergeToRefResponse.Size(m)
}
func (m *UserMergeToRefResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMergeToRefResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserMergeToRefResponse proto.InternalMessageInfo

func (m *UserMergeToRefResponse) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *UserMergeToRefResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type OperationBranchUpdate struct {
	// If this string is non-empty the branch has been updated.
	CommitId string `protobuf:"bytes,1,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// Used for cache invalidation in GitLab
	RepoCreated bool `protobuf:"varint,2,opt,name=repo_created,json=repoCreated,proto3" json:"repo_created,omitempty"`
	// Used for cache invalidation in GitLab
	BranchCreated        bool     `protobuf:"varint,3,opt,name=branch_created,json=branchCreated,proto3" json:"branch_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationBranchUpdate) Reset()         { *m = OperationBranchUpdate{} }
func (m *OperationBranchUpdate) String() string { return proto.CompactTextString(m) }
func (*OperationBranchUpdate) ProtoMessage()    {}
func (*OperationBranchUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{14}
}
func (m *OperationBranchUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationBranchUpdate.Unmarshal(m, b)
}
func (m *OperationBranchUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationBranchUpdate.Marshal(b, m, deterministic)
}
func (dst *OperationBranchUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationBranchUpdate.Merge(dst, src)
}
func (m *OperationBranchUpdate) XXX_Size() int {
	return xxx_messageInfo_OperationBranchUpdate.Size(m)
}
func (m *OperationBranchUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationBranchUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_OperationBranchUpdate proto.InternalMessageInfo

func (m *OperationBranchUpdate) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *OperationBranchUpdate) GetRepoCreated() bool {
	if m != nil {
		return m.RepoCreated
	}
	return false
}

func (m *OperationBranchUpdate) GetBranchCreated() bool {
	if m != nil {
		return m.BranchCreated
	}
	return false
}

type UserFFBranchRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User                 *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	CommitId             string      `protobuf:"bytes,3,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	Branch               []byte      `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserFFBranchRequest) Reset()         { *m = UserFFBranchRequest{} }
func (m *UserFFBranchRequest) String() string { return proto.CompactTextString(m) }
func (*UserFFBranchRequest) ProtoMessage()    {}
func (*UserFFBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{15}
}
func (m *UserFFBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserFFBranchRequest.Unmarshal(m, b)
}
func (m *UserFFBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserFFBranchRequest.Marshal(b, m, deterministic)
}
func (dst *UserFFBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserFFBranchRequest.Merge(dst, src)
}
func (m *UserFFBranchRequest) XXX_Size() int {
	return xxx_messageInfo_UserFFBranchRequest.Size(m)
}
func (m *UserFFBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserFFBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserFFBranchRequest proto.InternalMessageInfo

func (m *UserFFBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserFFBranchRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserFFBranchRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *UserFFBranchRequest) GetBranch() []byte {
	if m != nil {
		return m.Branch
	}
	return nil
}

type UserFFBranchResponse struct {
	BranchUpdate         *OperationBranchUpdate `protobuf:"bytes,1,opt,name=branch_update,json=branchUpdate,proto3" json:"branch_update,omitempty"`
	PreReceiveError      string                 `protobuf:"bytes,2,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UserFFBranchResponse) Reset()         { *m = UserFFBranchResponse{} }
func (m *UserFFBranchResponse) String() string { return proto.CompactTextString(m) }
func (*UserFFBranchResponse) ProtoMessage()    {}
func (*UserFFBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{16}
}
func (m *UserFFBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserFFBranchResponse.Unmarshal(m, b)
}
func (m *UserFFBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserFFBranchResponse.Marshal(b, m, deterministic)
}
func (dst *UserFFBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserFFBranchResponse.Merge(dst, src)
}
func (m *UserFFBranchResponse) XXX_Size() int {
	return xxx_messageInfo_UserFFBranchResponse.Size(m)
}
func (m *UserFFBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserFFBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserFFBranchResponse proto.InternalMessageInfo

func (m *UserFFBranchResponse) GetBranchUpdate() *OperationBranchUpdate {
	if m != nil {
		return m.BranchUpdate
	}
	return nil
}

func (m *UserFFBranchResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserCherryPickRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User                 *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Commit               *GitCommit  `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	BranchName           []byte      `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	Message              []byte      `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	StartBranchName      []byte      `protobuf:"bytes,6,opt,name=start_branch_name,json=startBranchName,proto3" json:"start_branch_name,omitempty"`
	StartRepository      *Repository `protobuf:"bytes,7,opt,name=start_repository,json=startRepository,proto3" json:"start_repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserCherryPickRequest) Reset()         { *m = UserCherryPickRequest{} }
func (m *UserCherryPickRequest) String() string { return proto.CompactTextString(m) }
func (*UserCherryPickRequest) ProtoMessage()    {}
func (*UserCherryPickRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{17}
}
func (m *UserCherryPickRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCherryPickRequest.Unmarshal(m, b)
}
func (m *UserCherryPickRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCherryPickRequest.Marshal(b, m, deterministic)
}
func (dst *UserCherryPickRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCherryPickRequest.Merge(dst, src)
}
func (m *UserCherryPickRequest) XXX_Size() int {
	return xxx_messageInfo_UserCherryPickRequest.Size(m)
}
func (m *UserCherryPickRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCherryPickRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserCherryPickRequest proto.InternalMessageInfo

func (m *UserCherryPickRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserCherryPickRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserCherryPickRequest) GetCommit() *GitCommit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *UserCherryPickRequest) GetBranchName() []byte {
	if m != nil {
		return m.BranchName
	}
	return nil
}

func (m *UserCherryPickRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UserCherryPickRequest) GetStartBranchName() []byte {
	if m != nil {
		return m.StartBranchName
	}
	return nil
}

func (m *UserCherryPickRequest) GetStartRepository() *Repository {
	if m != nil {
		return m.StartRepository
	}
	return nil
}

type UserCherryPickResponse struct {
	BranchUpdate         *OperationBranchUpdate `protobuf:"bytes,1,opt,name=branch_update,json=branchUpdate,proto3" json:"branch_update,omitempty"`
	CreateTreeError      string                 `protobuf:"bytes,2,opt,name=create_tree_error,json=createTreeError,proto3" json:"create_tree_error,omitempty"`
	CommitError          string                 `protobuf:"bytes,3,opt,name=commit_error,json=commitError,proto3" json:"commit_error,omitempty"`
	PreReceiveError      string                 `protobuf:"bytes,4,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UserCherryPickResponse) Reset()         { *m = UserCherryPickResponse{} }
func (m *UserCherryPickResponse) String() string { return proto.CompactTextString(m) }
func (*UserCherryPickResponse) ProtoMessage()    {}
func (*UserCherryPickResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{18}
}
func (m *UserCherryPickResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCherryPickResponse.Unmarshal(m, b)
}
func (m *UserCherryPickResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCherryPickResponse.Marshal(b, m, deterministic)
}
func (dst *UserCherryPickResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCherryPickResponse.Merge(dst, src)
}
func (m *UserCherryPickResponse) XXX_Size() int {
	return xxx_messageInfo_UserCherryPickResponse.Size(m)
}
func (m *UserCherryPickResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCherryPickResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserCherryPickResponse proto.InternalMessageInfo

func (m *UserCherryPickResponse) GetBranchUpdate() *OperationBranchUpdate {
	if m != nil {
		return m.BranchUpdate
	}
	return nil
}

func (m *UserCherryPickResponse) GetCreateTreeError() string {
	if m != nil {
		return m.CreateTreeError
	}
	return ""
}

func (m *UserCherryPickResponse) GetCommitError() string {
	if m != nil {
		return m.CommitError
	}
	return ""
}

func (m *UserCherryPickResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserRevertRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User                 *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Commit               *GitCommit  `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	BranchName           []byte      `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	Message              []byte      `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	StartBranchName      []byte      `protobuf:"bytes,6,opt,name=start_branch_name,json=startBranchName,proto3" json:"start_branch_name,omitempty"`
	StartRepository      *Repository `protobuf:"bytes,7,opt,name=start_repository,json=startRepository,proto3" json:"start_repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserRevertRequest) Reset()         { *m = UserRevertRequest{} }
func (m *UserRevertRequest) String() string { return proto.CompactTextString(m) }
func (*UserRevertRequest) ProtoMessage()    {}
func (*UserRevertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{19}
}
func (m *UserRevertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRevertRequest.Unmarshal(m, b)
}
func (m *UserRevertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRevertRequest.Marshal(b, m, deterministic)
}
func (dst *UserRevertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRevertRequest.Merge(dst, src)
}
func (m *UserRevertRequest) XXX_Size() int {
	return xxx_messageInfo_UserRevertRequest.Size(m)
}
func (m *UserRevertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRevertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRevertRequest proto.InternalMessageInfo

func (m *UserRevertRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserRevertRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserRevertRequest) GetCommit() *GitCommit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *UserRevertRequest) GetBranchName() []byte {
	if m != nil {
		return m.BranchName
	}
	return nil
}

func (m *UserRevertRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UserRevertRequest) GetStartBranchName() []byte {
	if m != nil {
		return m.StartBranchName
	}
	return nil
}

func (m *UserRevertRequest) GetStartRepository() *Repository {
	if m != nil {
		return m.StartRepository
	}
	return nil
}

type UserRevertResponse struct {
	BranchUpdate         *OperationBranchUpdate `protobuf:"bytes,1,opt,name=branch_update,json=branchUpdate,proto3" json:"branch_update,omitempty"`
	CreateTreeError      string                 `protobuf:"bytes,2,opt,name=create_tree_error,json=createTreeError,proto3" json:"create_tree_error,omitempty"`
	CommitError          string                 `protobuf:"bytes,3,opt,name=commit_error,json=commitError,proto3" json:"commit_error,omitempty"`
	PreReceiveError      string                 `protobuf:"bytes,4,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UserRevertResponse) Reset()         { *m = UserRevertResponse{} }
func (m *UserRevertResponse) String() string { return proto.CompactTextString(m) }
func (*UserRevertResponse) ProtoMessage()    {}
func (*UserRevertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{20}
}
func (m *UserRevertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRevertResponse.Unmarshal(m, b)
}
func (m *UserRevertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRevertResponse.Marshal(b, m, deterministic)
}
func (dst *UserRevertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRevertResponse.Merge(dst, src)
}
func (m *UserRevertResponse) XXX_Size() int {
	return xxx_messageInfo_UserRevertResponse.Size(m)
}
func (m *UserRevertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRevertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserRevertResponse proto.InternalMessageInfo

func (m *UserRevertResponse) GetBranchUpdate() *OperationBranchUpdate {
	if m != nil {
		return m.BranchUpdate
	}
	return nil
}

func (m *UserRevertResponse) GetCreateTreeError() string {
	if m != nil {
		return m.CreateTreeError
	}
	return ""
}

func (m *UserRevertResponse) GetCommitError() string {
	if m != nil {
		return m.CommitError
	}
	return ""
}

func (m *UserRevertResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserCommitFilesActionHeader struct {
	Action          UserCommitFilesActionHeader_ActionType `protobuf:"varint,1,opt,name=action,proto3,enum=gitaly.UserCommitFilesActionHeader_ActionType" json:"action,omitempty"`
	FilePath        []byte                                 `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	PreviousPath    []byte                                 `protobuf:"bytes,3,opt,name=previous_path,json=previousPath,proto3" json:"previous_path,omitempty"`
	Base64Content   bool                                   `protobuf:"varint,4,opt,name=base64_content,json=base64Content,proto3" json:"base64_content,omitempty"`
	ExecuteFilemode bool                                   `protobuf:"varint,5,opt,name=execute_filemode,json=executeFilemode,proto3" json:"execute_filemode,omitempty"`
	// Move actions that change the file path, but not its content, should set
	// infer_content to true instead of populating the content field. Ignored for
	// other action types.
	InferContent         bool     `protobuf:"varint,6,opt,name=infer_content,json=inferContent,proto3" json:"infer_content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserCommitFilesActionHeader) Reset()         { *m = UserCommitFilesActionHeader{} }
func (m *UserCommitFilesActionHeader) String() string { return proto.CompactTextString(m) }
func (*UserCommitFilesActionHeader) ProtoMessage()    {}
func (*UserCommitFilesActionHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{21}
}
func (m *UserCommitFilesActionHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCommitFilesActionHeader.Unmarshal(m, b)
}
func (m *UserCommitFilesActionHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCommitFilesActionHeader.Marshal(b, m, deterministic)
}
func (dst *UserCommitFilesActionHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCommitFilesActionHeader.Merge(dst, src)
}
func (m *UserCommitFilesActionHeader) XXX_Size() int {
	return xxx_messageInfo_UserCommitFilesActionHeader.Size(m)
}
func (m *UserCommitFilesActionHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCommitFilesActionHeader.DiscardUnknown(m)
}

var xxx_messageInfo_UserCommitFilesActionHeader proto.InternalMessageInfo

func (m *UserCommitFilesActionHeader) GetAction() UserCommitFilesActionHeader_ActionType {
	if m != nil {
		return m.Action
	}
	return UserCommitFilesActionHeader_CREATE
}

func (m *UserCommitFilesActionHeader) GetFilePath() []byte {
	if m != nil {
		return m.FilePath
	}
	return nil
}

func (m *UserCommitFilesActionHeader) GetPreviousPath() []byte {
	if m != nil {
		return m.PreviousPath
	}
	return nil
}

func (m *UserCommitFilesActionHeader) GetBase64Content() bool {
	if m != nil {
		return m.Base64Content
	}
	return false
}

func (m *UserCommitFilesActionHeader) GetExecuteFilemode() bool {
	if m != nil {
		return m.ExecuteFilemode
	}
	return false
}

func (m *UserCommitFilesActionHeader) GetInferContent() bool {
	if m != nil {
		return m.InferContent
	}
	return false
}

type UserCommitFilesAction struct {
	// Types that are valid to be assigned to UserCommitFilesActionPayload:
	//	*UserCommitFilesAction_Header
	//	*UserCommitFilesAction_Content
	UserCommitFilesActionPayload isUserCommitFilesAction_UserCommitFilesActionPayload `protobuf_oneof:"user_commit_files_action_payload"`
	XXX_NoUnkeyedLiteral         struct{}                                             `json:"-"`
	XXX_unrecognized             []byte                                               `json:"-"`
	XXX_sizecache                int32                                                `json:"-"`
}

func (m *UserCommitFilesAction) Reset()         { *m = UserCommitFilesAction{} }
func (m *UserCommitFilesAction) String() string { return proto.CompactTextString(m) }
func (*UserCommitFilesAction) ProtoMessage()    {}
func (*UserCommitFilesAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{22}
}
func (m *UserCommitFilesAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCommitFilesAction.Unmarshal(m, b)
}
func (m *UserCommitFilesAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCommitFilesAction.Marshal(b, m, deterministic)
}
func (dst *UserCommitFilesAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCommitFilesAction.Merge(dst, src)
}
func (m *UserCommitFilesAction) XXX_Size() int {
	return xxx_messageInfo_UserCommitFilesAction.Size(m)
}
func (m *UserCommitFilesAction) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCommitFilesAction.DiscardUnknown(m)
}

var xxx_messageInfo_UserCommitFilesAction proto.InternalMessageInfo

type isUserCommitFilesAction_UserCommitFilesActionPayload interface {
	isUserCommitFilesAction_UserCommitFilesActionPayload()
}

type UserCommitFilesAction_Header struct {
	Header *UserCommitFilesActionHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type UserCommitFilesAction_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*UserCommitFilesAction_Header) isUserCommitFilesAction_UserCommitFilesActionPayload() {}

func (*UserCommitFilesAction_Content) isUserCommitFilesAction_UserCommitFilesActionPayload() {}

func (m *UserCommitFilesAction) GetUserCommitFilesActionPayload() isUserCommitFilesAction_UserCommitFilesActionPayload {
	if m != nil {
		return m.UserCommitFilesActionPayload
	}
	return nil
}

func (m *UserCommitFilesAction) GetHeader() *UserCommitFilesActionHeader {
	if x, ok := m.GetUserCommitFilesActionPayload().(*UserCommitFilesAction_Header); ok {
		return x.Header
	}
	return nil
}

func (m *UserCommitFilesAction) GetContent() []byte {
	if x, ok := m.GetUserCommitFilesActionPayload().(*UserCommitFilesAction_Content); ok {
		return x.Content
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserCommitFilesAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserCommitFilesAction_OneofMarshaler, _UserCommitFilesAction_OneofUnmarshaler, _UserCommitFilesAction_OneofSizer, []interface{}{
		(*UserCommitFilesAction_Header)(nil),
		(*UserCommitFilesAction_Content)(nil),
	}
}

func _UserCommitFilesAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserCommitFilesAction)
	// user_commit_files_action_payload
	switch x := m.UserCommitFilesActionPayload.(type) {
	case *UserCommitFilesAction_Header:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *UserCommitFilesAction_Content:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Content)
	case nil:
	default:
		return fmt.Errorf("UserCommitFilesAction.UserCommitFilesActionPayload has unexpected type %T", x)
	}
	return nil
}

func _UserCommitFilesAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserCommitFilesAction)
	switch tag {
	case 1: // user_commit_files_action_payload.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserCommitFilesActionHeader)
		err := b.DecodeMessage(msg)
		m.UserCommitFilesActionPayload = &UserCommitFilesAction_Header{msg}
		return true, err
	case 2: // user_commit_files_action_payload.content
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.UserCommitFilesActionPayload = &UserCommitFilesAction_Content{x}
		return true, err
	default:
		return false, nil
	}
}

func _UserCommitFilesAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserCommitFilesAction)
	// user_commit_files_action_payload
	switch x := m.UserCommitFilesActionPayload.(type) {
	case *UserCommitFilesAction_Header:
		s := proto.Size(x.Header)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserCommitFilesAction_Content:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Content)))
		n += len(x.Content)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UserCommitFilesRequestHeader struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User                 *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	BranchName           []byte      `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CommitMessage        []byte      `protobuf:"bytes,4,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	CommitAuthorName     []byte      `protobuf:"bytes,5,opt,name=commit_author_name,json=commitAuthorName,proto3" json:"commit_author_name,omitempty"`
	CommitAuthorEmail    []byte      `protobuf:"bytes,6,opt,name=commit_author_email,json=commitAuthorEmail,proto3" json:"commit_author_email,omitempty"`
	StartBranchName      []byte      `protobuf:"bytes,7,opt,name=start_branch_name,json=startBranchName,proto3" json:"start_branch_name,omitempty"`
	StartRepository      *Repository `protobuf:"bytes,8,opt,name=start_repository,json=startRepository,proto3" json:"start_repository,omitempty"`
	Force                bool        `protobuf:"varint,9,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserCommitFilesRequestHeader) Reset()         { *m = UserCommitFilesRequestHeader{} }
func (m *UserCommitFilesRequestHeader) String() string { return proto.CompactTextString(m) }
func (*UserCommitFilesRequestHeader) ProtoMessage()    {}
func (*UserCommitFilesRequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{23}
}
func (m *UserCommitFilesRequestHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCommitFilesRequestHeader.Unmarshal(m, b)
}
func (m *UserCommitFilesRequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCommitFilesRequestHeader.Marshal(b, m, deterministic)
}
func (dst *UserCommitFilesRequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCommitFilesRequestHeader.Merge(dst, src)
}
func (m *UserCommitFilesRequestHeader) XXX_Size() int {
	return xxx_messageInfo_UserCommitFilesRequestHeader.Size(m)
}
func (m *UserCommitFilesRequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCommitFilesRequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_UserCommitFilesRequestHeader proto.InternalMessageInfo

func (m *UserCommitFilesRequestHeader) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserCommitFilesRequestHeader) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserCommitFilesRequestHeader) GetBranchName() []byte {
	if m != nil {
		return m.BranchName
	}
	return nil
}

func (m *UserCommitFilesRequestHeader) GetCommitMessage() []byte {
	if m != nil {
		return m.CommitMessage
	}
	return nil
}

func (m *UserCommitFilesRequestHeader) GetCommitAuthorName() []byte {
	if m != nil {
		return m.CommitAuthorName
	}
	return nil
}

func (m *UserCommitFilesRequestHeader) GetCommitAuthorEmail() []byte {
	if m != nil {
		return m.CommitAuthorEmail
	}
	return nil
}

func (m *UserCommitFilesRequestHeader) GetStartBranchName() []byte {
	if m != nil {
		return m.StartBranchName
	}
	return nil
}

func (m *UserCommitFilesRequestHeader) GetStartRepository() *Repository {
	if m != nil {
		return m.StartRepository
	}
	return nil
}

func (m *UserCommitFilesRequestHeader) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type UserCommitFilesRequest struct {
	// Types that are valid to be assigned to UserCommitFilesRequestPayload:
	//	*UserCommitFilesRequest_Header
	//	*UserCommitFilesRequest_Action
	UserCommitFilesRequestPayload isUserCommitFilesRequest_UserCommitFilesRequestPayload `protobuf_oneof:"user_commit_files_request_payload"`
	XXX_NoUnkeyedLiteral          struct{}                                               `json:"-"`
	XXX_unrecognized              []byte                                                 `json:"-"`
	XXX_sizecache                 int32                                                  `json:"-"`
}

func (m *UserCommitFilesRequest) Reset()         { *m = UserCommitFilesRequest{} }
func (m *UserCommitFilesRequest) String() string { return proto.CompactTextString(m) }
func (*UserCommitFilesRequest) ProtoMessage()    {}
func (*UserCommitFilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{24}
}
func (m *UserCommitFilesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCommitFilesRequest.Unmarshal(m, b)
}
func (m *UserCommitFilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCommitFilesRequest.Marshal(b, m, deterministic)
}
func (dst *UserCommitFilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCommitFilesRequest.Merge(dst, src)
}
func (m *UserCommitFilesRequest) XXX_Size() int {
	return xxx_messageInfo_UserCommitFilesRequest.Size(m)
}
func (m *UserCommitFilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCommitFilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserCommitFilesRequest proto.InternalMessageInfo

type isUserCommitFilesRequest_UserCommitFilesRequestPayload interface {
	isUserCommitFilesRequest_UserCommitFilesRequestPayload()
}

type UserCommitFilesRequest_Header struct {
	Header *UserCommitFilesRequestHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type UserCommitFilesRequest_Action struct {
	Action *UserCommitFilesAction `protobuf:"bytes,2,opt,name=action,proto3,oneof"`
}

func (*UserCommitFilesRequest_Header) isUserCommitFilesRequest_UserCommitFilesRequestPayload() {}

func (*UserCommitFilesRequest_Action) isUserCommitFilesRequest_UserCommitFilesRequestPayload() {}

func (m *UserCommitFilesRequest) GetUserCommitFilesRequestPayload() isUserCommitFilesRequest_UserCommitFilesRequestPayload {
	if m != nil {
		return m.UserCommitFilesRequestPayload
	}
	return nil
}

func (m *UserCommitFilesRequest) GetHeader() *UserCommitFilesRequestHeader {
	if x, ok := m.GetUserCommitFilesRequestPayload().(*UserCommitFilesRequest_Header); ok {
		return x.Header
	}
	return nil
}

func (m *UserCommitFilesRequest) GetAction() *UserCommitFilesAction {
	if x, ok := m.GetUserCommitFilesRequestPayload().(*UserCommitFilesRequest_Action); ok {
		return x.Action
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserCommitFilesRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserCommitFilesRequest_OneofMarshaler, _UserCommitFilesRequest_OneofUnmarshaler, _UserCommitFilesRequest_OneofSizer, []interface{}{
		(*UserCommitFilesRequest_Header)(nil),
		(*UserCommitFilesRequest_Action)(nil),
	}
}

func _UserCommitFilesRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserCommitFilesRequest)
	// user_commit_files_request_payload
	switch x := m.UserCommitFilesRequestPayload.(type) {
	case *UserCommitFilesRequest_Header:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *UserCommitFilesRequest_Action:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Action); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UserCommitFilesRequest.UserCommitFilesRequestPayload has unexpected type %T", x)
	}
	return nil
}

func _UserCommitFilesRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserCommitFilesRequest)
	switch tag {
	case 1: // user_commit_files_request_payload.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserCommitFilesRequestHeader)
		err := b.DecodeMessage(msg)
		m.UserCommitFilesRequestPayload = &UserCommitFilesRequest_Header{msg}
		return true, err
	case 2: // user_commit_files_request_payload.action
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserCommitFilesAction)
		err := b.DecodeMessage(msg)
		m.UserCommitFilesRequestPayload = &UserCommitFilesRequest_Action{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UserCommitFilesRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserCommitFilesRequest)
	// user_commit_files_request_payload
	switch x := m.UserCommitFilesRequestPayload.(type) {
	case *UserCommitFilesRequest_Header:
		s := proto.Size(x.Header)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserCommitFilesRequest_Action:
		s := proto.Size(x.Action)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UserCommitFilesResponse struct {
	BranchUpdate         *OperationBranchUpdate `protobuf:"bytes,1,opt,name=branch_update,json=branchUpdate,proto3" json:"branch_update,omitempty"`
	IndexError           string                 `protobuf:"bytes,2,opt,name=index_error,json=indexError,proto3" json:"index_error,omitempty"`
	PreReceiveError      string                 `protobuf:"bytes,3,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UserCommitFilesResponse) Reset()         { *m = UserCommitFilesResponse{} }
func (m *UserCommitFilesResponse) String() string { return proto.CompactTextString(m) }
func (*UserCommitFilesResponse) ProtoMessage()    {}
func (*UserCommitFilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{25}
}
func (m *UserCommitFilesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCommitFilesResponse.Unmarshal(m, b)
}
func (m *UserCommitFilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCommitFilesResponse.Marshal(b, m, deterministic)
}
func (dst *UserCommitFilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCommitFilesResponse.Merge(dst, src)
}
func (m *UserCommitFilesResponse) XXX_Size() int {
	return xxx_messageInfo_UserCommitFilesResponse.Size(m)
}
func (m *UserCommitFilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCommitFilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserCommitFilesResponse proto.InternalMessageInfo

func (m *UserCommitFilesResponse) GetBranchUpdate() *OperationBranchUpdate {
	if m != nil {
		return m.BranchUpdate
	}
	return nil
}

func (m *UserCommitFilesResponse) GetIndexError() string {
	if m != nil {
		return m.IndexError
	}
	return ""
}

func (m *UserCommitFilesResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

// DEPRECATED: https://gitlab.com/gitlab-org/gitaly/issues/1628
//
// Deprecated: Do not use.
type UserRebaseRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User                 *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	RebaseId             string      `protobuf:"bytes,3,opt,name=rebase_id,json=rebaseId,proto3" json:"rebase_id,omitempty"`
	Branch               []byte      `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	BranchSha            string      `protobuf:"bytes,5,opt,name=branch_sha,json=branchSha,proto3" json:"branch_sha,omitempty"`
	RemoteRepository     *Repository `protobuf:"bytes,6,opt,name=remote_repository,json=remoteRepository,proto3" json:"remote_repository,omitempty"`
	RemoteBranch         []byte      `protobuf:"bytes,7,opt,name=remote_branch,json=remoteBranch,proto3" json:"remote_branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserRebaseRequest) Reset()         { *m = UserRebaseRequest{} }
func (m *UserRebaseRequest) String() string { return proto.CompactTextString(m) }
func (*UserRebaseRequest) ProtoMessage()    {}
func (*UserRebaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{26}
}
func (m *UserRebaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRebaseRequest.Unmarshal(m, b)
}
func (m *UserRebaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRebaseRequest.Marshal(b, m, deterministic)
}
func (dst *UserRebaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRebaseRequest.Merge(dst, src)
}
func (m *UserRebaseRequest) XXX_Size() int {
	return xxx_messageInfo_UserRebaseRequest.Size(m)
}
func (m *UserRebaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRebaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRebaseRequest proto.InternalMessageInfo

func (m *UserRebaseRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserRebaseRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserRebaseRequest) GetRebaseId() string {
	if m != nil {
		return m.RebaseId
	}
	return ""
}

func (m *UserRebaseRequest) GetBranch() []byte {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *UserRebaseRequest) GetBranchSha() string {
	if m != nil {
		return m.BranchSha
	}
	return ""
}

func (m *UserRebaseRequest) GetRemoteRepository() *Repository {
	if m != nil {
		return m.RemoteRepository
	}
	return nil
}

func (m *UserRebaseRequest) GetRemoteBranch() []byte {
	if m != nil {
		return m.RemoteBranch
	}
	return nil
}

// DEPRECATED: https://gitlab.com/gitlab-org/gitaly/issues/1628
//
// Deprecated: Do not use.
type UserRebaseResponse struct {
	RebaseSha            string   `protobuf:"bytes,1,opt,name=rebase_sha,json=rebaseSha,proto3" json:"rebase_sha,omitempty"`
	PreReceiveError      string   `protobuf:"bytes,2,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	GitError             string   `protobuf:"bytes,3,opt,name=git_error,json=gitError,proto3" json:"git_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRebaseResponse) Reset()         { *m = UserRebaseResponse{} }
func (m *UserRebaseResponse) String() string { return proto.CompactTextString(m) }
func (*UserRebaseResponse) ProtoMessage()    {}
func (*UserRebaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{27}
}
func (m *UserRebaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRebaseResponse.Unmarshal(m, b)
}
func (m *UserRebaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRebaseResponse.Marshal(b, m, deterministic)
}
func (dst *UserRebaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRebaseResponse.Merge(dst, src)
}
func (m *UserRebaseResponse) XXX_Size() int {
	return xxx_messageInfo_UserRebaseResponse.Size(m)
}
func (m *UserRebaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRebaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserRebaseResponse proto.InternalMessageInfo

func (m *UserRebaseResponse) GetRebaseSha() string {
	if m != nil {
		return m.RebaseSha
	}
	return ""
}

func (m *UserRebaseResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

func (m *UserRebaseResponse) GetGitError() string {
	if m != nil {
		return m.GitError
	}
	return ""
}

type UserRebaseConfirmableRequest struct {
	// Types that are valid to be assigned to UserRebaseConfirmableRequestPayload:
	//	*UserRebaseConfirmableRequest_Header_
	//	*UserRebaseConfirmableRequest_Apply
	UserRebaseConfirmableRequestPayload isUserRebaseConfirmableRequest_UserRebaseConfirmableRequestPayload `protobuf_oneof:"user_rebase_confirmable_request_payload"`
	XXX_NoUnkeyedLiteral                struct{}                                                           `json:"-"`
	XXX_unrecognized                    []byte                                                             `json:"-"`
	XXX_sizecache                       int32                                                              `json:"-"`
}

func (m *UserRebaseConfirmableRequest) Reset()         { *m = UserRebaseConfirmableRequest{} }
func (m *UserRebaseConfirmableRequest) String() string { return proto.CompactTextString(m) }
func (*UserRebaseConfirmableRequest) ProtoMessage()    {}
func (*UserRebaseConfirmableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{28}
}
func (m *UserRebaseConfirmableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRebaseConfirmableRequest.Unmarshal(m, b)
}
func (m *UserRebaseConfirmableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRebaseConfirmableRequest.Marshal(b, m, deterministic)
}
func (dst *UserRebaseConfirmableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRebaseConfirmableRequest.Merge(dst, src)
}
func (m *UserRebaseConfirmableRequest) XXX_Size() int {
	return xxx_messageInfo_UserRebaseConfirmableRequest.Size(m)
}
func (m *UserRebaseConfirmableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRebaseConfirmableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRebaseConfirmableRequest proto.InternalMessageInfo

type isUserRebaseConfirmableRequest_UserRebaseConfirmableRequestPayload interface {
	isUserRebaseConfirmableRequest_UserRebaseConfirmableRequestPayload()
}

type UserRebaseConfirmableRequest_Header_ struct {
	Header *UserRebaseConfirmableRequest_Header `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type UserRebaseConfirmableRequest_Apply struct {
	Apply bool `protobuf:"varint,2,opt,name=apply,proto3,oneof"`
}

func (*UserRebaseConfirmableRequest_Header_) isUserRebaseConfirmableRequest_UserRebaseConfirmableRequestPayload() {
}

func (*UserRebaseConfirmableRequest_Apply) isUserRebaseConfirmableRequest_UserRebaseConfirmableRequestPayload() {
}

func (m *UserRebaseConfirmableRequest) GetUserRebaseConfirmableRequestPayload() isUserRebaseConfirmableRequest_UserRebaseConfirmableRequestPayload {
	if m != nil {
		return m.UserRebaseConfirmableRequestPayload
	}
	return nil
}

func (m *UserRebaseConfirmableRequest) GetHeader() *UserRebaseConfirmableRequest_Header {
	if x, ok := m.GetUserRebaseConfirmableRequestPayload().(*UserRebaseConfirmableRequest_Header_); ok {
		return x.Header
	}
	return nil
}

func (m *UserRebaseConfirmableRequest) GetApply() bool {
	if x, ok := m.GetUserRebaseConfirmableRequestPayload().(*UserRebaseConfirmableRequest_Apply); ok {
		return x.Apply
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserRebaseConfirmableRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserRebaseConfirmableRequest_OneofMarshaler, _UserRebaseConfirmableRequest_OneofUnmarshaler, _UserRebaseConfirmableRequest_OneofSizer, []interface{}{
		(*UserRebaseConfirmableRequest_Header_)(nil),
		(*UserRebaseConfirmableRequest_Apply)(nil),
	}
}

func _UserRebaseConfirmableRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserRebaseConfirmableRequest)
	// user_rebase_confirmable_request_payload
	switch x := m.UserRebaseConfirmableRequestPayload.(type) {
	case *UserRebaseConfirmableRequest_Header_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *UserRebaseConfirmableRequest_Apply:
		t := uint64(0)
		if x.Apply {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("UserRebaseConfirmableRequest.UserRebaseConfirmableRequestPayload has unexpected type %T", x)
	}
	return nil
}

func _UserRebaseConfirmableRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserRebaseConfirmableRequest)
	switch tag {
	case 1: // user_rebase_confirmable_request_payload.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserRebaseConfirmableRequest_Header)
		err := b.DecodeMessage(msg)
		m.UserRebaseConfirmableRequestPayload = &UserRebaseConfirmableRequest_Header_{msg}
		return true, err
	case 2: // user_rebase_confirmable_request_payload.apply
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.UserRebaseConfirmableRequestPayload = &UserRebaseConfirmableRequest_Apply{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _UserRebaseConfirmableRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserRebaseConfirmableRequest)
	// user_rebase_confirmable_request_payload
	switch x := m.UserRebaseConfirmableRequestPayload.(type) {
	case *UserRebaseConfirmableRequest_Header_:
		s := proto.Size(x.Header)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserRebaseConfirmableRequest_Apply:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UserRebaseConfirmableRequest_Header struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User                 *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	RebaseId             string      `protobuf:"bytes,3,opt,name=rebase_id,json=rebaseId,proto3" json:"rebase_id,omitempty"`
	Branch               []byte      `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	BranchSha            string      `protobuf:"bytes,5,opt,name=branch_sha,json=branchSha,proto3" json:"branch_sha,omitempty"`
	RemoteRepository     *Repository `protobuf:"bytes,6,opt,name=remote_repository,json=remoteRepository,proto3" json:"remote_repository,omitempty"`
	RemoteBranch         []byte      `protobuf:"bytes,7,opt,name=remote_branch,json=remoteBranch,proto3" json:"remote_branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserRebaseConfirmableRequest_Header) Reset()         { *m = UserRebaseConfirmableRequest_Header{} }
func (m *UserRebaseConfirmableRequest_Header) String() string { return proto.CompactTextString(m) }
func (*UserRebaseConfirmableRequest_Header) ProtoMessage()    {}
func (*UserRebaseConfirmableRequest_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{28, 0}
}
func (m *UserRebaseConfirmableRequest_Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRebaseConfirmableRequest_Header.Unmarshal(m, b)
}
func (m *UserRebaseConfirmableRequest_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRebaseConfirmableRequest_Header.Marshal(b, m, deterministic)
}
func (dst *UserRebaseConfirmableRequest_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRebaseConfirmableRequest_Header.Merge(dst, src)
}
func (m *UserRebaseConfirmableRequest_Header) XXX_Size() int {
	return xxx_messageInfo_UserRebaseConfirmableRequest_Header.Size(m)
}
func (m *UserRebaseConfirmableRequest_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRebaseConfirmableRequest_Header.DiscardUnknown(m)
}

var xxx_messageInfo_UserRebaseConfirmableRequest_Header proto.InternalMessageInfo

func (m *UserRebaseConfirmableRequest_Header) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserRebaseConfirmableRequest_Header) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserRebaseConfirmableRequest_Header) GetRebaseId() string {
	if m != nil {
		return m.RebaseId
	}
	return ""
}

func (m *UserRebaseConfirmableRequest_Header) GetBranch() []byte {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *UserRebaseConfirmableRequest_Header) GetBranchSha() string {
	if m != nil {
		return m.BranchSha
	}
	return ""
}

func (m *UserRebaseConfirmableRequest_Header) GetRemoteRepository() *Repository {
	if m != nil {
		return m.RemoteRepository
	}
	return nil
}

func (m *UserRebaseConfirmableRequest_Header) GetRemoteBranch() []byte {
	if m != nil {
		return m.RemoteBranch
	}
	return nil
}

type UserRebaseConfirmableResponse struct {
	// Types that are valid to be assigned to UserRebaseConfirmableResponsePayload:
	//	*UserRebaseConfirmableResponse_RebaseSha
	//	*UserRebaseConfirmableResponse_RebaseApplied
	UserRebaseConfirmableResponsePayload isUserRebaseConfirmableResponse_UserRebaseConfirmableResponsePayload `protobuf_oneof:"user_rebase_confirmable_response_payload"`
	PreReceiveError                      string                                                               `protobuf:"bytes,3,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	GitError                             string                                                               `protobuf:"bytes,4,opt,name=git_error,json=gitError,proto3" json:"git_error,omitempty"`
	XXX_NoUnkeyedLiteral                 struct{}                                                             `json:"-"`
	XXX_unrecognized                     []byte                                                               `json:"-"`
	XXX_sizecache                        int32                                                                `json:"-"`
}

func (m *UserRebaseConfirmableResponse) Reset()         { *m = UserRebaseConfirmableResponse{} }
func (m *UserRebaseConfirmableResponse) String() string { return proto.CompactTextString(m) }
func (*UserRebaseConfirmableResponse) ProtoMessage()    {}
func (*UserRebaseConfirmableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{29}
}
func (m *UserRebaseConfirmableResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRebaseConfirmableResponse.Unmarshal(m, b)
}
func (m *UserRebaseConfirmableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRebaseConfirmableResponse.Marshal(b, m, deterministic)
}
func (dst *UserRebaseConfirmableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRebaseConfirmableResponse.Merge(dst, src)
}
func (m *UserRebaseConfirmableResponse) XXX_Size() int {
	return xxx_messageInfo_UserRebaseConfirmableResponse.Size(m)
}
func (m *UserRebaseConfirmableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRebaseConfirmableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserRebaseConfirmableResponse proto.InternalMessageInfo

type isUserRebaseConfirmableResponse_UserRebaseConfirmableResponsePayload interface {
	isUserRebaseConfirmableResponse_UserRebaseConfirmableResponsePayload()
}

type UserRebaseConfirmableResponse_RebaseSha struct {
	RebaseSha string `protobuf:"bytes,1,opt,name=rebase_sha,json=rebaseSha,proto3,oneof"`
}

type UserRebaseConfirmableResponse_RebaseApplied struct {
	RebaseApplied bool `protobuf:"varint,2,opt,name=rebase_applied,json=rebaseApplied,proto3,oneof"`
}

func (*UserRebaseConfirmableResponse_RebaseSha) isUserRebaseConfirmableResponse_UserRebaseConfirmableResponsePayload() {
}

func (*UserRebaseConfirmableResponse_RebaseApplied) isUserRebaseConfirmableResponse_UserRebaseConfirmableResponsePayload() {
}

func (m *UserRebaseConfirmableResponse) GetUserRebaseConfirmableResponsePayload() isUserRebaseConfirmableResponse_UserRebaseConfirmableResponsePayload {
	if m != nil {
		return m.UserRebaseConfirmableResponsePayload
	}
	return nil
}

func (m *UserRebaseConfirmableResponse) GetRebaseSha() string {
	if x, ok := m.GetUserRebaseConfirmableResponsePayload().(*UserRebaseConfirmableResponse_RebaseSha); ok {
		return x.RebaseSha
	}
	return ""
}

func (m *UserRebaseConfirmableResponse) GetRebaseApplied() bool {
	if x, ok := m.GetUserRebaseConfirmableResponsePayload().(*UserRebaseConfirmableResponse_RebaseApplied); ok {
		return x.RebaseApplied
	}
	return false
}

func (m *UserRebaseConfirmableResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

func (m *UserRebaseConfirmableResponse) GetGitError() string {
	if m != nil {
		return m.GitError
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserRebaseConfirmableResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserRebaseConfirmableResponse_OneofMarshaler, _UserRebaseConfirmableResponse_OneofUnmarshaler, _UserRebaseConfirmableResponse_OneofSizer, []interface{}{
		(*UserRebaseConfirmableResponse_RebaseSha)(nil),
		(*UserRebaseConfirmableResponse_RebaseApplied)(nil),
	}
}

func _UserRebaseConfirmableResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserRebaseConfirmableResponse)
	// user_rebase_confirmable_response_payload
	switch x := m.UserRebaseConfirmableResponsePayload.(type) {
	case *UserRebaseConfirmableResponse_RebaseSha:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.RebaseSha)
	case *UserRebaseConfirmableResponse_RebaseApplied:
		t := uint64(0)
		if x.RebaseApplied {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("UserRebaseConfirmableResponse.UserRebaseConfirmableResponsePayload has unexpected type %T", x)
	}
	return nil
}

func _UserRebaseConfirmableResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserRebaseConfirmableResponse)
	switch tag {
	case 1: // user_rebase_confirmable_response_payload.rebase_sha
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.UserRebaseConfirmableResponsePayload = &UserRebaseConfirmableResponse_RebaseSha{x}
		return true, err
	case 2: // user_rebase_confirmable_response_payload.rebase_applied
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.UserRebaseConfirmableResponsePayload = &UserRebaseConfirmableResponse_RebaseApplied{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _UserRebaseConfirmableResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserRebaseConfirmableResponse)
	// user_rebase_confirmable_response_payload
	switch x := m.UserRebaseConfirmableResponsePayload.(type) {
	case *UserRebaseConfirmableResponse_RebaseSha:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.RebaseSha)))
		n += len(x.RebaseSha)
	case *UserRebaseConfirmableResponse_RebaseApplied:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UserSquashRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User                 *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	SquashId             string      `protobuf:"bytes,3,opt,name=squash_id,json=squashId,proto3" json:"squash_id,omitempty"`
	Branch               []byte      `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	StartSha             string      `protobuf:"bytes,5,opt,name=start_sha,json=startSha,proto3" json:"start_sha,omitempty"`
	EndSha               string      `protobuf:"bytes,6,opt,name=end_sha,json=endSha,proto3" json:"end_sha,omitempty"`
	Author               *User       `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	CommitMessage        []byte      `protobuf:"bytes,8,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserSquashRequest) Reset()         { *m = UserSquashRequest{} }
func (m *UserSquashRequest) String() string { return proto.CompactTextString(m) }
func (*UserSquashRequest) ProtoMessage()    {}
func (*UserSquashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{30}
}
func (m *UserSquashRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSquashRequest.Unmarshal(m, b)
}
func (m *UserSquashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSquashRequest.Marshal(b, m, deterministic)
}
func (dst *UserSquashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSquashRequest.Merge(dst, src)
}
func (m *UserSquashRequest) XXX_Size() int {
	return xxx_messageInfo_UserSquashRequest.Size(m)
}
func (m *UserSquashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSquashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserSquashRequest proto.InternalMessageInfo

func (m *UserSquashRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserSquashRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserSquashRequest) GetSquashId() string {
	if m != nil {
		return m.SquashId
	}
	return ""
}

func (m *UserSquashRequest) GetBranch() []byte {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *UserSquashRequest) GetStartSha() string {
	if m != nil {
		return m.StartSha
	}
	return ""
}

func (m *UserSquashRequest) GetEndSha() string {
	if m != nil {
		return m.EndSha
	}
	return ""
}

func (m *UserSquashRequest) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *UserSquashRequest) GetCommitMessage() []byte {
	if m != nil {
		return m.CommitMessage
	}
	return nil
}

type UserSquashResponse struct {
	SquashSha            string   `protobuf:"bytes,1,opt,name=squash_sha,json=squashSha,proto3" json:"squash_sha,omitempty"`
	GitError             string   `protobuf:"bytes,3,opt,name=git_error,json=gitError,proto3" json:"git_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserSquashResponse) Reset()         { *m = UserSquashResponse{} }
func (m *UserSquashResponse) String() string { return proto.CompactTextString(m) }
func (*UserSquashResponse) ProtoMessage()    {}
func (*UserSquashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{31}
}
func (m *UserSquashResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSquashResponse.Unmarshal(m, b)
}
func (m *UserSquashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSquashResponse.Marshal(b, m, deterministic)
}
func (dst *UserSquashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSquashResponse.Merge(dst, src)
}
func (m *UserSquashResponse) XXX_Size() int {
	return xxx_messageInfo_UserSquashResponse.Size(m)
}
func (m *UserSquashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSquashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserSquashResponse proto.InternalMessageInfo

func (m *UserSquashResponse) GetSquashSha() string {
	if m != nil {
		return m.SquashSha
	}
	return ""
}

func (m *UserSquashResponse) GetGitError() string {
	if m != nil {
		return m.GitError
	}
	return ""
}

type UserApplyPatchRequest struct {
	// Types that are valid to be assigned to UserApplyPatchRequestPayload:
	//	*UserApplyPatchRequest_Header_
	//	*UserApplyPatchRequest_Patches
	UserApplyPatchRequestPayload isUserApplyPatchRequest_UserApplyPatchRequestPayload `protobuf_oneof:"user_apply_patch_request_payload"`
	XXX_NoUnkeyedLiteral         struct{}                                             `json:"-"`
	XXX_unrecognized             []byte                                               `json:"-"`
	XXX_sizecache                int32                                                `json:"-"`
}

func (m *UserApplyPatchRequest) Reset()         { *m = UserApplyPatchRequest{} }
func (m *UserApplyPatchRequest) String() string { return proto.CompactTextString(m) }
func (*UserApplyPatchRequest) ProtoMessage()    {}
func (*UserApplyPatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{32}
}
func (m *UserApplyPatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserApplyPatchRequest.Unmarshal(m, b)
}
func (m *UserApplyPatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserApplyPatchRequest.Marshal(b, m, deterministic)
}
func (dst *UserApplyPatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserApplyPatchRequest.Merge(dst, src)
}
func (m *UserApplyPatchRequest) XXX_Size() int {
	return xxx_messageInfo_UserApplyPatchRequest.Size(m)
}
func (m *UserApplyPatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserApplyPatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserApplyPatchRequest proto.InternalMessageInfo

type isUserApplyPatchRequest_UserApplyPatchRequestPayload interface {
	isUserApplyPatchRequest_UserApplyPatchRequestPayload()
}

type UserApplyPatchRequest_Header_ struct {
	Header *UserApplyPatchRequest_Header `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type UserApplyPatchRequest_Patches struct {
	Patches []byte `protobuf:"bytes,2,opt,name=patches,proto3,oneof"`
}

func (*UserApplyPatchRequest_Header_) isUserApplyPatchRequest_UserApplyPatchRequestPayload() {}

func (*UserApplyPatchRequest_Patches) isUserApplyPatchRequest_UserApplyPatchRequestPayload() {}

func (m *UserApplyPatchRequest) GetUserApplyPatchRequestPayload() isUserApplyPatchRequest_UserApplyPatchRequestPayload {
	if m != nil {
		return m.UserApplyPatchRequestPayload
	}
	return nil
}

func (m *UserApplyPatchRequest) GetHeader() *UserApplyPatchRequest_Header {
	if x, ok := m.GetUserApplyPatchRequestPayload().(*UserApplyPatchRequest_Header_); ok {
		return x.Header
	}
	return nil
}

func (m *UserApplyPatchRequest) GetPatches() []byte {
	if x, ok := m.GetUserApplyPatchRequestPayload().(*UserApplyPatchRequest_Patches); ok {
		return x.Patches
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserApplyPatchRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserApplyPatchRequest_OneofMarshaler, _UserApplyPatchRequest_OneofUnmarshaler, _UserApplyPatchRequest_OneofSizer, []interface{}{
		(*UserApplyPatchRequest_Header_)(nil),
		(*UserApplyPatchRequest_Patches)(nil),
	}
}

func _UserApplyPatchRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserApplyPatchRequest)
	// user_apply_patch_request_payload
	switch x := m.UserApplyPatchRequestPayload.(type) {
	case *UserApplyPatchRequest_Header_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *UserApplyPatchRequest_Patches:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Patches)
	case nil:
	default:
		return fmt.Errorf("UserApplyPatchRequest.UserApplyPatchRequestPayload has unexpected type %T", x)
	}
	return nil
}

func _UserApplyPatchRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserApplyPatchRequest)
	switch tag {
	case 1: // user_apply_patch_request_payload.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserApplyPatchRequest_Header)
		err := b.DecodeMessage(msg)
		m.UserApplyPatchRequestPayload = &UserApplyPatchRequest_Header_{msg}
		return true, err
	case 2: // user_apply_patch_request_payload.patches
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.UserApplyPatchRequestPayload = &UserApplyPatchRequest_Patches{x}
		return true, err
	default:
		return false, nil
	}
}

func _UserApplyPatchRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserApplyPatchRequest)
	// user_apply_patch_request_payload
	switch x := m.UserApplyPatchRequestPayload.(type) {
	case *UserApplyPatchRequest_Header_:
		s := proto.Size(x.Header)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserApplyPatchRequest_Patches:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Patches)))
		n += len(x.Patches)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UserApplyPatchRequest_Header struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User                 *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	TargetBranch         []byte      `protobuf:"bytes,3,opt,name=target_branch,json=targetBranch,proto3" json:"target_branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserApplyPatchRequest_Header) Reset()         { *m = UserApplyPatchRequest_Header{} }
func (m *UserApplyPatchRequest_Header) String() string { return proto.CompactTextString(m) }
func (*UserApplyPatchRequest_Header) ProtoMessage()    {}
func (*UserApplyPatchRequest_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{32, 0}
}
func (m *UserApplyPatchRequest_Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserApplyPatchRequest_Header.Unmarshal(m, b)
}
func (m *UserApplyPatchRequest_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserApplyPatchRequest_Header.Marshal(b, m, deterministic)
}
func (dst *UserApplyPatchRequest_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserApplyPatchRequest_Header.Merge(dst, src)
}
func (m *UserApplyPatchRequest_Header) XXX_Size() int {
	return xxx_messageInfo_UserApplyPatchRequest_Header.Size(m)
}
func (m *UserApplyPatchRequest_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_UserApplyPatchRequest_Header.DiscardUnknown(m)
}

var xxx_messageInfo_UserApplyPatchRequest_Header proto.InternalMessageInfo

func (m *UserApplyPatchRequest_Header) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserApplyPatchRequest_Header) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserApplyPatchRequest_Header) GetTargetBranch() []byte {
	if m != nil {
		return m.TargetBranch
	}
	return nil
}

type UserApplyPatchResponse struct {
	BranchUpdate         *OperationBranchUpdate `protobuf:"bytes,1,opt,name=branch_update,json=branchUpdate,proto3" json:"branch_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UserApplyPatchResponse) Reset()         { *m = UserApplyPatchResponse{} }
func (m *UserApplyPatchResponse) String() string { return proto.CompactTextString(m) }
func (*UserApplyPatchResponse) ProtoMessage()    {}
func (*UserApplyPatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{33}
}
func (m *UserApplyPatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserApplyPatchResponse.Unmarshal(m, b)
}
func (m *UserApplyPatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserApplyPatchResponse.Marshal(b, m, deterministic)
}
func (dst *UserApplyPatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserApplyPatchResponse.Merge(dst, src)
}
func (m *UserApplyPatchResponse) XXX_Size() int {
	return xxx_messageInfo_UserApplyPatchResponse.Size(m)
}
func (m *UserApplyPatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserApplyPatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserApplyPatchResponse proto.InternalMessageInfo

func (m *UserApplyPatchResponse) GetBranchUpdate() *OperationBranchUpdate {
	if m != nil {
		return m.BranchUpdate
	}
	return nil
}

type UserUpdateSubmoduleRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	User                 *User       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	CommitSha            string      `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Branch               []byte      `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	Submodule            []byte      `protobuf:"bytes,5,opt,name=submodule,proto3" json:"submodule,omitempty"`
	CommitMessage        []byte      `protobuf:"bytes,6,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserUpdateSubmoduleRequest) Reset()         { *m = UserUpdateSubmoduleRequest{} }
func (m *UserUpdateSubmoduleRequest) String() string { return proto.CompactTextString(m) }
func (*UserUpdateSubmoduleRequest) ProtoMessage()    {}
func (*UserUpdateSubmoduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{34}
}
func (m *UserUpdateSubmoduleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserUpdateSubmoduleRequest.Unmarshal(m, b)
}
func (m *UserUpdateSubmoduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserUpdateSubmoduleRequest.Marshal(b, m, deterministic)
}
func (dst *UserUpdateSubmoduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUpdateSubmoduleRequest.Merge(dst, src)
}
func (m *UserUpdateSubmoduleRequest) XXX_Size() int {
	return xxx_messageInfo_UserUpdateSubmoduleRequest.Size(m)
}
func (m *UserUpdateSubmoduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUpdateSubmoduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserUpdateSubmoduleRequest proto.InternalMessageInfo

func (m *UserUpdateSubmoduleRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserUpdateSubmoduleRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserUpdateSubmoduleRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func (m *UserUpdateSubmoduleRequest) GetBranch() []byte {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *UserUpdateSubmoduleRequest) GetSubmodule() []byte {
	if m != nil {
		return m.Submodule
	}
	return nil
}

func (m *UserUpdateSubmoduleRequest) GetCommitMessage() []byte {
	if m != nil {
		return m.CommitMessage
	}
	return nil
}

type UserUpdateSubmoduleResponse struct {
	BranchUpdate         *OperationBranchUpdate `protobuf:"bytes,1,opt,name=branch_update,json=branchUpdate,proto3" json:"branch_update,omitempty"`
	PreReceiveError      string                 `protobuf:"bytes,2,opt,name=pre_receive_error,json=preReceiveError,proto3" json:"pre_receive_error,omitempty"`
	CommitError          string                 `protobuf:"bytes,4,opt,name=commit_error,json=commitError,proto3" json:"commit_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UserUpdateSubmoduleResponse) Reset()         { *m = UserUpdateSubmoduleResponse{} }
func (m *UserUpdateSubmoduleResponse) String() string { return proto.CompactTextString(m) }
func (*UserUpdateSubmoduleResponse) ProtoMessage()    {}
func (*UserUpdateSubmoduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_b7baaf8021f86e81, []int{35}
}
func (m *UserUpdateSubmoduleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserUpdateSubmoduleResponse.Unmarshal(m, b)
}
func (m *UserUpdateSubmoduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserUpdateSubmoduleResponse.Marshal(b, m, deterministic)
}
func (dst *UserUpdateSubmoduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUpdateSubmoduleResponse.Merge(dst, src)
}
func (m *UserUpdateSubmoduleResponse) XXX_Size() int {
	return xxx_messageInfo_UserUpdateSubmoduleResponse.Size(m)
}
func (m *UserUpdateSubmoduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUpdateSubmoduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserUpdateSubmoduleResponse proto.InternalMessageInfo

func (m *UserUpdateSubmoduleResponse) GetBranchUpdate() *OperationBranchUpdate {
	if m != nil {
		return m.BranchUpdate
	}
	return nil
}

func (m *UserUpdateSubmoduleResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

func (m *UserUpdateSubmoduleResponse) GetCommitError() string {
	if m != nil {
		return m.CommitError
	}
	return ""
}

func init() {
	proto.RegisterType((*UserCreateBranchRequest)(nil), "gitaly.UserCreateBranchRequest")
	proto.RegisterType((*UserCreateBranchResponse)(nil), "gitaly.UserCreateBranchResponse")
	proto.RegisterType((*UserUpdateBranchRequest)(nil), "gitaly.UserUpdateBranchRequest")
	proto.RegisterType((*UserUpdateBranchResponse)(nil), "gitaly.UserUpdateBranchResponse")
	proto.RegisterType((*UserDeleteBranchRequest)(nil), "gitaly.UserDeleteBranchRequest")
	proto.RegisterType((*UserDeleteBranchResponse)(nil), "gitaly.UserDeleteBranchResponse")
	proto.RegisterType((*UserDeleteTagRequest)(nil), "gitaly.UserDeleteTagRequest")
	proto.RegisterType((*UserDeleteTagResponse)(nil), "gitaly.UserDeleteTagResponse")
	proto.RegisterType((*UserCreateTagRequest)(nil), "gitaly.UserCreateTagRequest")
	proto.RegisterType((*UserCreateTagResponse)(nil), "gitaly.UserCreateTagResponse")
	proto.RegisterType((*UserMergeBranchRequest)(nil), "gitaly.UserMergeBranchRequest")
	proto.RegisterType((*UserMergeBranchResponse)(nil), "gitaly.UserMergeBranchResponse")
	proto.RegisterType((*UserMergeToRefRequest)(nil), "gitaly.UserMergeToRefRequest")
	proto.RegisterType((*UserMergeToRefResponse)(nil), "gitaly.UserMergeToRefResponse")
	proto.RegisterType((*OperationBranchUpdate)(nil), "gitaly.OperationBranchUpdate")
	proto.RegisterType((*UserFFBranchRequest)(nil), "gitaly.UserFFBranchRequest")
	proto.RegisterType((*UserFFBranchResponse)(nil), "gitaly.UserFFBranchResponse")
	proto.RegisterType((*UserCherryPickRequest)(nil), "gitaly.UserCherryPickRequest")
	proto.RegisterType((*UserCherryPickResponse)(nil), "gitaly.UserCherryPickResponse")
	proto.RegisterType((*UserRevertRequest)(nil), "gitaly.UserRevertRequest")
	proto.RegisterType((*UserRevertResponse)(nil), "gitaly.UserRevertResponse")
	proto.RegisterType((*UserCommitFilesActionHeader)(nil), "gitaly.UserCommitFilesActionHeader")
	proto.RegisterType((*UserCommitFilesAction)(nil), "gitaly.UserCommitFilesAction")
	proto.RegisterType((*UserCommitFilesRequestHeader)(nil), "gitaly.UserCommitFilesRequestHeader")
	proto.RegisterType((*UserCommitFilesRequest)(nil), "gitaly.UserCommitFilesRequest")
	proto.RegisterType((*UserCommitFilesResponse)(nil), "gitaly.UserCommitFilesResponse")
	proto.RegisterType((*UserRebaseRequest)(nil), "gitaly.UserRebaseRequest")
	proto.RegisterType((*UserRebaseResponse)(nil), "gitaly.UserRebaseResponse")
	proto.RegisterType((*UserRebaseConfirmableRequest)(nil), "gitaly.UserRebaseConfirmableRequest")
	proto.RegisterType((*UserRebaseConfirmableRequest_Header)(nil), "gitaly.UserRebaseConfirmableRequest.Header")
	proto.RegisterType((*UserRebaseConfirmableResponse)(nil), "gitaly.UserRebaseConfirmableResponse")
	proto.RegisterType((*UserSquashRequest)(nil), "gitaly.UserSquashRequest")
	proto.RegisterType((*UserSquashResponse)(nil), "gitaly.UserSquashResponse")
	proto.RegisterType((*UserApplyPatchRequest)(nil), "gitaly.UserApplyPatchRequest")
	proto.RegisterType((*UserApplyPatchRequest_Header)(nil), "gitaly.UserApplyPatchRequest.Header")
	proto.RegisterType((*UserApplyPatchResponse)(nil), "gitaly.UserApplyPatchResponse")
	proto.RegisterType((*UserUpdateSubmoduleRequest)(nil), "gitaly.UserUpdateSubmoduleRequest")
	proto.RegisterType((*UserUpdateSubmoduleResponse)(nil), "gitaly.UserUpdateSubmoduleResponse")
	proto.RegisterEnum("gitaly.UserCommitFilesActionHeader_ActionType", UserCommitFilesActionHeader_ActionType_name, UserCommitFilesActionHeader_ActionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OperationServiceClient is the client API for OperationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperationServiceClient interface {
	UserCreateBranch(ctx context.Context, in *UserCreateBranchRequest, opts ...grpc.CallOption) (*UserCreateBranchResponse, error)
	UserUpdateBranch(ctx context.Context, in *UserUpdateBranchRequest, opts ...grpc.CallOption) (*UserUpdateBranchResponse, error)
	UserDeleteBranch(ctx context.Context, in *UserDeleteBranchRequest, opts ...grpc.CallOption) (*UserDeleteBranchResponse, error)
	UserCreateTag(ctx context.Context, in *UserCreateTagRequest, opts ...grpc.CallOption) (*UserCreateTagResponse, error)
	UserDeleteTag(ctx context.Context, in *UserDeleteTagRequest, opts ...grpc.CallOption) (*UserDeleteTagResponse, error)
	UserMergeToRef(ctx context.Context, in *UserMergeToRefRequest, opts ...grpc.CallOption) (*UserMergeToRefResponse, error)
	UserMergeBranch(ctx context.Context, opts ...grpc.CallOption) (OperationService_UserMergeBranchClient, error)
	UserFFBranch(ctx context.Context, in *UserFFBranchRequest, opts ...grpc.CallOption) (*UserFFBranchResponse, error)
	UserCherryPick(ctx context.Context, in *UserCherryPickRequest, opts ...grpc.CallOption) (*UserCherryPickResponse, error)
	UserCommitFiles(ctx context.Context, opts ...grpc.CallOption) (OperationService_UserCommitFilesClient, error)
	UserRebase(ctx context.Context, in *UserRebaseRequest, opts ...grpc.CallOption) (*UserRebaseResponse, error)
	UserRebaseConfirmable(ctx context.Context, opts ...grpc.CallOption) (OperationService_UserRebaseConfirmableClient, error)
	UserRevert(ctx context.Context, in *UserRevertRequest, opts ...grpc.CallOption) (*UserRevertResponse, error)
	UserSquash(ctx context.Context, in *UserSquashRequest, opts ...grpc.CallOption) (*UserSquashResponse, error)
	UserApplyPatch(ctx context.Context, opts ...grpc.CallOption) (OperationService_UserApplyPatchClient, error)
	UserUpdateSubmodule(ctx context.Context, in *UserUpdateSubmoduleRequest, opts ...grpc.CallOption) (*UserUpdateSubmoduleResponse, error)
}

type operationServiceClient struct {
	cc *grpc.ClientConn
}

func NewOperationServiceClient(cc *grpc.ClientConn) OperationServiceClient {
	return &operationServiceClient{cc}
}

func (c *operationServiceClient) UserCreateBranch(ctx context.Context, in *UserCreateBranchRequest, opts ...grpc.CallOption) (*UserCreateBranchResponse, error) {
	out := new(UserCreateBranchResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserCreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserUpdateBranch(ctx context.Context, in *UserUpdateBranchRequest, opts ...grpc.CallOption) (*UserUpdateBranchResponse, error) {
	out := new(UserUpdateBranchResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserUpdateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserDeleteBranch(ctx context.Context, in *UserDeleteBranchRequest, opts ...grpc.CallOption) (*UserDeleteBranchResponse, error) {
	out := new(UserDeleteBranchResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserDeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserCreateTag(ctx context.Context, in *UserCreateTagRequest, opts ...grpc.CallOption) (*UserCreateTagResponse, error) {
	out := new(UserCreateTagResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserCreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserDeleteTag(ctx context.Context, in *UserDeleteTagRequest, opts ...grpc.CallOption) (*UserDeleteTagResponse, error) {
	out := new(UserDeleteTagResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserDeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserMergeToRef(ctx context.Context, in *UserMergeToRefRequest, opts ...grpc.CallOption) (*UserMergeToRefResponse, error) {
	out := new(UserMergeToRefResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserMergeToRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserMergeBranch(ctx context.Context, opts ...grpc.CallOption) (OperationService_UserMergeBranchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OperationService_serviceDesc.Streams[0], "/gitaly.OperationService/UserMergeBranch", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationServiceUserMergeBranchClient{stream}
	return x, nil
}

type OperationService_UserMergeBranchClient interface {
	Send(*UserMergeBranchRequest) error
	Recv() (*UserMergeBranchResponse, error)
	grpc.ClientStream
}

type operationServiceUserMergeBranchClient struct {
	grpc.ClientStream
}

func (x *operationServiceUserMergeBranchClient) Send(m *UserMergeBranchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operationServiceUserMergeBranchClient) Recv() (*UserMergeBranchResponse, error) {
	m := new(UserMergeBranchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operationServiceClient) UserFFBranch(ctx context.Context, in *UserFFBranchRequest, opts ...grpc.CallOption) (*UserFFBranchResponse, error) {
	out := new(UserFFBranchResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserFFBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserCherryPick(ctx context.Context, in *UserCherryPickRequest, opts ...grpc.CallOption) (*UserCherryPickResponse, error) {
	out := new(UserCherryPickResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserCherryPick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserCommitFiles(ctx context.Context, opts ...grpc.CallOption) (OperationService_UserCommitFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OperationService_serviceDesc.Streams[1], "/gitaly.OperationService/UserCommitFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationServiceUserCommitFilesClient{stream}
	return x, nil
}

type OperationService_UserCommitFilesClient interface {
	Send(*UserCommitFilesRequest) error
	CloseAndRecv() (*UserCommitFilesResponse, error)
	grpc.ClientStream
}

type operationServiceUserCommitFilesClient struct {
	grpc.ClientStream
}

func (x *operationServiceUserCommitFilesClient) Send(m *UserCommitFilesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operationServiceUserCommitFilesClient) CloseAndRecv() (*UserCommitFilesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UserCommitFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *operationServiceClient) UserRebase(ctx context.Context, in *UserRebaseRequest, opts ...grpc.CallOption) (*UserRebaseResponse, error) {
	out := new(UserRebaseResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserRebase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserRebaseConfirmable(ctx context.Context, opts ...grpc.CallOption) (OperationService_UserRebaseConfirmableClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OperationService_serviceDesc.Streams[2], "/gitaly.OperationService/UserRebaseConfirmable", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationServiceUserRebaseConfirmableClient{stream}
	return x, nil
}

type OperationService_UserRebaseConfirmableClient interface {
	Send(*UserRebaseConfirmableRequest) error
	Recv() (*UserRebaseConfirmableResponse, error)
	grpc.ClientStream
}

type operationServiceUserRebaseConfirmableClient struct {
	grpc.ClientStream
}

func (x *operationServiceUserRebaseConfirmableClient) Send(m *UserRebaseConfirmableRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operationServiceUserRebaseConfirmableClient) Recv() (*UserRebaseConfirmableResponse, error) {
	m := new(UserRebaseConfirmableResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operationServiceClient) UserRevert(ctx context.Context, in *UserRevertRequest, opts ...grpc.CallOption) (*UserRevertResponse, error) {
	out := new(UserRevertResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserRevert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserSquash(ctx context.Context, in *UserSquashRequest, opts ...grpc.CallOption) (*UserSquashResponse, error) {
	out := new(UserSquashResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserSquash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserApplyPatch(ctx context.Context, opts ...grpc.CallOption) (OperationService_UserApplyPatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OperationService_serviceDesc.Streams[3], "/gitaly.OperationService/UserApplyPatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationServiceUserApplyPatchClient{stream}
	return x, nil
}

type OperationService_UserApplyPatchClient interface {
	Send(*UserApplyPatchRequest) error
	CloseAndRecv() (*UserApplyPatchResponse, error)
	grpc.ClientStream
}

type operationServiceUserApplyPatchClient struct {
	grpc.ClientStream
}

func (x *operationServiceUserApplyPatchClient) Send(m *UserApplyPatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operationServiceUserApplyPatchClient) CloseAndRecv() (*UserApplyPatchResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UserApplyPatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operationServiceClient) UserUpdateSubmodule(ctx context.Context, in *UserUpdateSubmoduleRequest, opts ...grpc.CallOption) (*UserUpdateSubmoduleResponse, error) {
	out := new(UserUpdateSubmoduleResponse)
	err := c.cc.Invoke(ctx, "/gitaly.OperationService/UserUpdateSubmodule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationServiceServer is the server API for OperationService service.
type OperationServiceServer interface {
	UserCreateBranch(context.Context, *UserCreateBranchRequest) (*UserCreateBranchResponse, error)
	UserUpdateBranch(context.Context, *UserUpdateBranchRequest) (*UserUpdateBranchResponse, error)
	UserDeleteBranch(context.Context, *UserDeleteBranchRequest) (*UserDeleteBranchResponse, error)
	UserCreateTag(context.Context, *UserCreateTagRequest) (*UserCreateTagResponse, error)
	UserDeleteTag(context.Context, *UserDeleteTagRequest) (*UserDeleteTagResponse, error)
	UserMergeToRef(context.Context, *UserMergeToRefRequest) (*UserMergeToRefResponse, error)
	UserMergeBranch(OperationService_UserMergeBranchServer) error
	UserFFBranch(context.Context, *UserFFBranchRequest) (*UserFFBranchResponse, error)
	UserCherryPick(context.Context, *UserCherryPickRequest) (*UserCherryPickResponse, error)
	UserCommitFiles(OperationService_UserCommitFilesServer) error
	UserRebase(context.Context, *UserRebaseRequest) (*UserRebaseResponse, error)
	UserRebaseConfirmable(OperationService_UserRebaseConfirmableServer) error
	UserRevert(context.Context, *UserRevertRequest) (*UserRevertResponse, error)
	UserSquash(context.Context, *UserSquashRequest) (*UserSquashResponse, error)
	UserApplyPatch(OperationService_UserApplyPatchServer) error
	UserUpdateSubmodule(context.Context, *UserUpdateSubmoduleRequest) (*UserUpdateSubmoduleResponse, error)
}

func RegisterOperationServiceServer(s *grpc.Server, srv OperationServiceServer) {
	s.RegisterService(&_OperationService_serviceDesc, srv)
}

func _OperationService_UserCreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserCreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserCreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserCreateBranch(ctx, req.(*UserCreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserUpdateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserUpdateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserUpdateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserUpdateBranch(ctx, req.(*UserUpdateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserDeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserDeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserDeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserDeleteBranch(ctx, req.(*UserDeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserCreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserCreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserCreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserCreateTag(ctx, req.(*UserCreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserDeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserDeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserDeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserDeleteTag(ctx, req.(*UserDeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserMergeToRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMergeToRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserMergeToRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserMergeToRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserMergeToRef(ctx, req.(*UserMergeToRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserMergeBranch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperationServiceServer).UserMergeBranch(&operationServiceUserMergeBranchServer{stream})
}

type OperationService_UserMergeBranchServer interface {
	Send(*UserMergeBranchResponse) error
	Recv() (*UserMergeBranchRequest, error)
	grpc.ServerStream
}

type operationServiceUserMergeBranchServer struct {
	grpc.ServerStream
}

func (x *operationServiceUserMergeBranchServer) Send(m *UserMergeBranchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operationServiceUserMergeBranchServer) Recv() (*UserMergeBranchRequest, error) {
	m := new(UserMergeBranchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OperationService_UserFFBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFFBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserFFBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserFFBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserFFBranch(ctx, req.(*UserFFBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserCherryPick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCherryPickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserCherryPick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserCherryPick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserCherryPick(ctx, req.(*UserCherryPickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserCommitFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperationServiceServer).UserCommitFiles(&operationServiceUserCommitFilesServer{stream})
}

type OperationService_UserCommitFilesServer interface {
	SendAndClose(*UserCommitFilesResponse) error
	Recv() (*UserCommitFilesRequest, error)
	grpc.ServerStream
}

type operationServiceUserCommitFilesServer struct {
	grpc.ServerStream
}

func (x *operationServiceUserCommitFilesServer) SendAndClose(m *UserCommitFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operationServiceUserCommitFilesServer) Recv() (*UserCommitFilesRequest, error) {
	m := new(UserCommitFilesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OperationService_UserRebase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRebaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserRebase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserRebase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserRebase(ctx, req.(*UserRebaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserRebaseConfirmable_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperationServiceServer).UserRebaseConfirmable(&operationServiceUserRebaseConfirmableServer{stream})
}

type OperationService_UserRebaseConfirmableServer interface {
	Send(*UserRebaseConfirmableResponse) error
	Recv() (*UserRebaseConfirmableRequest, error)
	grpc.ServerStream
}

type operationServiceUserRebaseConfirmableServer struct {
	grpc.ServerStream
}

func (x *operationServiceUserRebaseConfirmableServer) Send(m *UserRebaseConfirmableResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operationServiceUserRebaseConfirmableServer) Recv() (*UserRebaseConfirmableRequest, error) {
	m := new(UserRebaseConfirmableRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OperationService_UserRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserRevert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserRevert(ctx, req.(*UserRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserSquash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSquashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserSquash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserSquash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserSquash(ctx, req.(*UserSquashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserApplyPatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperationServiceServer).UserApplyPatch(&operationServiceUserApplyPatchServer{stream})
}

type OperationService_UserApplyPatchServer interface {
	SendAndClose(*UserApplyPatchResponse) error
	Recv() (*UserApplyPatchRequest, error)
	grpc.ServerStream
}

type operationServiceUserApplyPatchServer struct {
	grpc.ServerStream
}

func (x *operationServiceUserApplyPatchServer) SendAndClose(m *UserApplyPatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operationServiceUserApplyPatchServer) Recv() (*UserApplyPatchRequest, error) {
	m := new(UserApplyPatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OperationService_UserUpdateSubmodule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateSubmoduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserUpdateSubmodule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserUpdateSubmodule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserUpdateSubmodule(ctx, req.(*UserUpdateSubmoduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OperationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.OperationService",
	HandlerType: (*OperationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreateBranch",
			Handler:    _OperationService_UserCreateBranch_Handler,
		},
		{
			MethodName: "UserUpdateBranch",
			Handler:    _OperationService_UserUpdateBranch_Handler,
		},
		{
			MethodName: "UserDeleteBranch",
			Handler:    _OperationService_UserDeleteBranch_Handler,
		},
		{
			MethodName: "UserCreateTag",
			Handler:    _OperationService_UserCreateTag_Handler,
		},
		{
			MethodName: "UserDeleteTag",
			Handler:    _OperationService_UserDeleteTag_Handler,
		},
		{
			MethodName: "UserMergeToRef",
			Handler:    _OperationService_UserMergeToRef_Handler,
		},
		{
			MethodName: "UserFFBranch",
			Handler:    _OperationService_UserFFBranch_Handler,
		},
		{
			MethodName: "UserCherryPick",
			Handler:    _OperationService_UserCherryPick_Handler,
		},
		{
			MethodName: "UserRebase",
			Handler:    _OperationService_UserRebase_Handler,
		},
		{
			MethodName: "UserRevert",
			Handler:    _OperationService_UserRevert_Handler,
		},
		{
			MethodName: "UserSquash",
			Handler:    _OperationService_UserSquash_Handler,
		},
		{
			MethodName: "UserUpdateSubmodule",
			Handler:    _OperationService_UserUpdateSubmodule_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserMergeBranch",
			Handler:       _OperationService_UserMergeBranch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UserCommitFiles",
			Handler:       _OperationService_UserCommitFiles_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UserRebaseConfirmable",
			Handler:       _OperationService_UserRebaseConfirmable_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UserApplyPatch",
			Handler:       _OperationService_UserApplyPatch_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "operations.proto",
}

func init() { proto.RegisterFile("operations.proto", fileDescriptor_operations_b7baaf8021f86e81) }

var fileDescriptor_operations_b7baaf8021f86e81 = []byte{
	// 2034 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0x4f, 0xdb, 0x8e, 0xe3, 0xbc, 0x38, 0x89, 0x53, 0xbb, 0x3b, 0xeb, 0xf5, 0x4c, 0x48, 0xb6,
	0x33, 0xc3, 0x64, 0x06, 0xd6, 0xf3, 0x01, 0x02, 0x09, 0x69, 0x41, 0x93, 0xc4, 0x21, 0xbb, 0x62,
	0x76, 0x42, 0x4f, 0x02, 0xd2, 0x0a, 0xd1, 0x74, 0xec, 0x8a, 0xdd, 0xc2, 0x76, 0x7b, 0xab, 0xdb,
	0x61, 0xc2, 0x01, 0x21, 0x21, 0x01, 0x47, 0x4e, 0x2c, 0x12, 0x42, 0x82, 0x13, 0x12, 0xe2, 0xc2,
	0x85, 0x03, 0x07, 0x84, 0xc4, 0x09, 0xae, 0x7b, 0xe0, 0x04, 0x7f, 0x02, 0x17, 0xc4, 0x65, 0x4f,
	0xa8, 0xea, 0xbd, 0xb6, 0xab, 0xfa, 0x23, 0x24, 0x4b, 0xa2, 0x19, 0x10, 0x37, 0xf7, 0xab, 0x57,
	0xaf, 0xde, 0xc7, 0xaf, 0xde, 0x7b, 0x55, 0x65, 0xa8, 0x05, 0x23, 0x2e, 0xbc, 0xc8, 0x0f, 0x86,
	0x61, 0x73, 0x24, 0x82, 0x28, 0x60, 0xe5, 0xae, 0x1f, 0x79, 0xfd, 0xd3, 0x46, 0x35, 0xec, 0x79,
	0x82, 0x77, 0x90, 0x6a, 0xff, 0xc6, 0x82, 0x57, 0x0f, 0x43, 0x2e, 0xb6, 0x05, 0xf7, 0x22, 0xbe,
	0x25, 0xbc, 0x61, 0xbb, 0xe7, 0xf0, 0xf7, 0xc6, 0x3c, 0x8c, 0xd8, 0x43, 0x00, 0xc1, 0x47, 0x41,
	0xe8, 0x47, 0x81, 0x38, 0xad, 0x5b, 0xeb, 0xd6, 0xe6, 0xc2, 0x43, 0xd6, 0x44, 0x31, 0x4d, 0x67,
	0x32, 0xe2, 0x68, 0x5c, 0x6c, 0x0d, 0x16, 0x8e, 0x94, 0x10, 0x77, 0xe8, 0x0d, 0x78, 0xbd, 0xb0,
	0x6e, 0x6d, 0x56, 0x1d, 0x40, 0xd2, 0x3b, 0xde, 0x80, 0xb3, 0x75, 0x28, 0x8d, 0x43, 0x2e, 0xea,
	0x45, 0x25, 0xae, 0x1a, 0x8b, 0x93, 0x3a, 0x38, 0x6a, 0x44, 0x8a, 0x08, 0x23, 0x4f, 0x44, 0xee,
	0x28, 0xf0, 0x87, 0x51, 0xbd, 0x84, 0x22, 0x14, 0x69, 0x5f, 0x52, 0xec, 0x21, 0xd4, 0xd3, 0x2a,
	0x87, 0xa3, 0x60, 0x18, 0x72, 0xf6, 0x71, 0x28, 0xe3, 0x62, 0xa4, 0xef, 0x52, 0xbc, 0x00, 0xf1,
	0xd1, 0x28, 0xbb, 0x0b, 0x2b, 0x23, 0xc1, 0x5d, 0xc1, 0xdb, 0xdc, 0x3f, 0xe1, 0x2e, 0x17, 0x22,
	0x10, 0x4a, 0xdb, 0x79, 0x67, 0x79, 0x24, 0xb8, 0x83, 0xf4, 0x96, 0x24, 0xdb, 0x7f, 0x20, 0x1f,
	0x1d, 0x8e, 0x3a, 0x2f, 0x8a, 0x8f, 0xae, 0x41, 0x79, 0xc8, 0xbf, 0x25, 0xf8, 0x09, 0xb9, 0x87,
	0xbe, 0x24, 0x3d, 0xe8, 0x77, 0x24, 0x7d, 0x16, 0xe9, 0xf8, 0x65, 0xef, 0xa2, 0xcb, 0x4c, 0x0b,
	0xc8, 0x65, 0x99, 0xae, 0xb0, 0xb2, 0x5d, 0xf1, 0x23, 0x72, 0xc5, 0x0e, 0xef, 0xf3, 0x17, 0xc3,
	0x15, 0xb1, 0x69, 0xa6, 0x46, 0x1f, 0xc1, 0xb4, 0x1f, 0x58, 0xf0, 0xf2, 0x54, 0xd0, 0x81, 0xd7,
	0xfd, 0x4f, 0xec, 0x7a, 0x0d, 0x2a, 0x91, 0xd7, 0xd5, 0x8d, 0x9a, 0x8b, 0xbc, 0xee, 0x39, 0x2d,
	0xda, 0x86, 0x57, 0x12, 0x8a, 0x7c, 0x04, 0x73, 0xfe, 0x4c, 0xe6, 0xe0, 0x2e, 0x79, 0x8e, 0xe6,
	0xb0, 0xdb, 0xb0, 0x1c, 0x79, 0xa2, 0xcb, 0x23, 0x57, 0xf0, 0x13, 0x3f, 0xf4, 0x83, 0x21, 0x81,
	0x76, 0x09, 0xc9, 0x0e, 0x51, 0x59, 0x1d, 0xe6, 0x06, 0x3c, 0x0c, 0xbd, 0x2e, 0x27, 0xf4, 0xc6,
	0x9f, 0xf6, 0xb7, 0xd1, 0x23, 0x9a, 0x2d, 0xe4, 0x91, 0x55, 0x28, 0x46, 0x5e, 0x97, 0xac, 0x58,
	0x88, 0x17, 0x97, 0x1c, 0x92, 0x2e, 0xb7, 0x03, 0x7f, 0xe6, 0x87, 0x51, 0xa8, 0xb4, 0xae, 0x38,
	0xf4, 0x95, 0xed, 0xc8, 0x62, 0xb6, 0x23, 0x3f, 0xb0, 0xe0, 0x9a, 0x5c, 0xfc, 0x31, 0x17, 0xdd,
	0x4b, 0x40, 0x7c, 0xec, 0xaf, 0x42, 0xae, 0xbf, 0xae, 0xc3, 0x7c, 0x3b, 0x18, 0x0c, 0xfc, 0xc8,
	0xf5, 0x3b, 0xa4, 0x54, 0x05, 0x09, 0x6f, 0x75, 0xa4, 0x45, 0x94, 0xdf, 0x68, 0xe3, 0x53, 0x3e,
	0xcb, 0xf5, 0x1d, 0x7b, 0x19, 0x66, 0xbd, 0xd1, 0xa8, 0x7f, 0x5a, 0x2f, 0x2b, 0x17, 0xe0, 0x87,
	0xfd, 0x6b, 0xda, 0xc8, 0x86, 0x55, 0xe4, 0x54, 0x43, 0x01, 0x2b, 0xa1, 0xc0, 0x16, 0x2c, 0xd2,
	0x8e, 0x1d, 0xab, 0x64, 0x42, 0x81, 0x5f, 0x8d, 0x0d, 0x79, 0x12, 0xd7, 0x1d, 0x14, 0x8a, 0x19,
	0xc7, 0xa9, 0x1e, 0x69, 0x5f, 0xd9, 0xee, 0x2f, 0x65, 0xba, 0xff, 0xed, 0x52, 0xa5, 0x50, 0x2b,
	0xda, 0x7f, 0xb5, 0x10, 0x01, 0x4a, 0xdd, 0x83, 0xc0, 0xe1, 0xc7, 0x57, 0x1b, 0x83, 0x55, 0x80,
	0x30, 0x18, 0x8b, 0x36, 0x77, 0xc3, 0x9e, 0x47, 0x41, 0x98, 0x47, 0xca, 0xd3, 0x9e, 0x97, 0x1b,
	0x85, 0x55, 0x80, 0x09, 0xd4, 0x8f, 0x29, 0x10, 0xf3, 0x31, 0xca, 0x8f, 0xf5, 0x20, 0x95, 0x4d,
	0x80, 0x7b, 0x1a, 0xc6, 0xc8, 0xbc, 0xf3, 0x04, 0xe3, 0x22, 0x55, 0xec, 0x3b, 0xf0, 0x4a, 0x66,
	0x6c, 0xce, 0x5e, 0xe1, 0x75, 0xa8, 0x4a, 0xc7, 0xb9, 0x6d, 0xb5, 0xf5, 0x3a, 0xb4, 0x8f, 0x16,
	0x24, 0x0d, 0x77, 0x63, 0x87, 0xdd, 0x82, 0x25, 0x42, 0x44, 0xcc, 0x54, 0x54, 0x4c, 0x84, 0x13,
	0x62, 0xb3, 0x7f, 0x6e, 0xc1, 0x4b, 0xd2, 0xc6, 0xdd, 0xdd, 0x17, 0x75, 0x13, 0xd9, 0xdf, 0xa7,
	0x9c, 0x39, 0x55, 0x91, 0x82, 0x90, 0x02, 0xbd, 0x75, 0x49, 0xa0, 0xcf, 0x89, 0xd5, 0xef, 0x0b,
	0x94, 0xf0, 0x7a, 0x5c, 0x88, 0xd3, 0x7d, 0xbf, 0xfd, 0xcd, 0xab, 0xf5, 0xd6, 0x1d, 0x28, 0xa3,
	0x73, 0x68, 0x37, 0xaf, 0xc4, 0x3c, 0x5f, 0xf4, 0xa3, 0x6d, 0x35, 0xe0, 0x10, 0x43, 0xb2, 0x62,
	0x97, 0x52, 0x15, 0x3b, 0x3f, 0x13, 0xdd, 0x85, 0x15, 0x6c, 0xec, 0x74, 0x01, 0xb8, 0x11, 0x96,
	0xd5, 0xc0, 0xd6, 0x54, 0xca, 0x9b, 0x50, 0x43, 0x5e, 0xcd, 0xda, 0xb9, 0x5c, 0x6b, 0x71, 0xfa,
	0x94, 0x60, 0xff, 0x85, 0x92, 0xb6, 0xee, 0xc0, 0xcb, 0x8d, 0x25, 0x62, 0xdd, 0x8d, 0x04, 0x4f,
	0xc4, 0x12, 0x07, 0x0e, 0x04, 0xc7, 0x58, 0xca, 0x1d, 0x44, 0x48, 0xd4, 0xcb, 0xcc, 0x02, 0xd2,
	0x90, 0xe5, 0x02, 0xf9, 0xd0, 0xfe, 0x5d, 0x01, 0x56, 0x54, 0xe4, 0xf8, 0x09, 0x97, 0x26, 0xff,
	0x1f, 0x16, 0x17, 0x80, 0xc5, 0x07, 0x16, 0x30, 0xdd, 0x79, 0xff, 0x1b, 0x90, 0xf8, 0x67, 0x01,
	0xae, 0x2b, 0xb0, 0xab, 0xf9, 0xbb, 0x7e, 0x9f, 0x87, 0x8f, 0xda, 0x52, 0xdd, 0x3d, 0xee, 0x75,
	0xb8, 0x60, 0xbb, 0x50, 0xf6, 0xd4, 0xb7, 0xb2, 0x6b, 0xe9, 0x61, 0x53, 0x0f, 0x75, 0xce, 0xa4,
	0x26, 0x7e, 0x1c, 0x9c, 0x8e, 0xb8, 0x43, 0xb3, 0x65, 0x4e, 0x3d, 0xf6, 0xfb, 0xdc, 0x1d, 0x79,
	0x51, 0x8f, 0xda, 0xc0, 0x8a, 0x24, 0xec, 0x7b, 0x51, 0x8f, 0x6d, 0xc0, 0xe2, 0x48, 0xf6, 0x77,
	0xc1, 0x38, 0x44, 0x86, 0xa2, 0x62, 0xa8, 0xc6, 0x44, 0xc5, 0x24, 0x4b, 0x85, 0x17, 0xf2, 0xcf,
	0x7c, 0xda, 0x6d, 0x07, 0xc3, 0x88, 0xd3, 0xe9, 0x4e, 0x96, 0x0a, 0x45, 0xdd, 0x46, 0x22, 0xbb,
	0x03, 0x35, 0xfe, 0x8c, 0xb7, 0xc7, 0x11, 0x77, 0xa5, 0xfc, 0x41, 0xd0, 0x41, 0xd0, 0x54, 0x9c,
	0x65, 0xa2, 0xef, 0x12, 0x59, 0x2e, 0xeb, 0x0f, 0x8f, 0xb9, 0x98, 0x08, 0xc4, 0x2e, 0xa7, 0xaa,
	0x88, 0x24, 0xcf, 0x3e, 0x04, 0x98, 0x9a, 0xc3, 0x00, 0xca, 0xdb, 0x4e, 0xeb, 0xd1, 0x41, 0xab,
	0x36, 0xc3, 0x96, 0x00, 0xf0, 0xb7, 0xbb, 0xf3, 0x96, 0x53, 0xb3, 0xe4, 0xd8, 0xe1, 0xfe, 0x8e,
	0x1c, 0x2b, 0xb0, 0x0a, 0x94, 0x1e, 0x3f, 0xf9, 0x4a, 0xab, 0x56, 0x94, 0xd4, 0x9d, 0xd6, 0x97,
	0x5a, 0x07, 0xad, 0x5a, 0x89, 0xcd, 0xc3, 0xec, 0xf6, 0xde, 0xe3, 0x27, 0x3b, 0xb5, 0x59, 0xfb,
	0xc7, 0xd4, 0x94, 0xa4, 0x5c, 0xc8, 0xde, 0x84, 0x72, 0x4f, 0xb9, 0x91, 0x90, 0xb4, 0x71, 0x0e,
	0x8f, 0xef, 0xcd, 0x38, 0x34, 0x89, 0x35, 0x60, 0x2e, 0x36, 0x47, 0xb9, 0x79, 0x6f, 0xc6, 0x89,
	0x09, 0x5b, 0x36, 0xac, 0xcb, 0xbd, 0xe9, 0x12, 0x80, 0xa4, 0x7f, 0x42, 0x17, 0x03, 0xe4, 0x8e,
	0xbc, 0xd3, 0x7e, 0xe0, 0x75, 0xec, 0x9f, 0x16, 0xe1, 0x46, 0x62, 0x25, 0x4a, 0x14, 0x84, 0x88,
	0xab, 0x49, 0x17, 0x89, 0x1c, 0x50, 0x4c, 0xe5, 0x80, 0x5b, 0xb0, 0x44, 0x6a, 0xc7, 0xa9, 0x00,
	0xf3, 0xc4, 0x22, 0x52, 0x1f, 0x53, 0x42, 0xf8, 0x24, 0x30, 0x62, 0xf3, 0xc6, 0x51, 0x2f, 0x10,
	0x28, 0x0e, 0xb3, 0x46, 0x0d, 0x47, 0x1e, 0xa9, 0x01, 0x25, 0xb4, 0x09, 0x2f, 0x99, 0xdc, 0x7c,
	0xe0, 0xf9, 0x7d, 0x4a, 0x20, 0x2b, 0x3a, 0x7b, 0x4b, 0x0e, 0x64, 0xa7, 0x9b, 0xb9, 0xf3, 0xa7,
	0x9b, 0xca, 0xb9, 0xd3, 0x8d, 0x6c, 0xbd, 0x8f, 0x03, 0xd1, 0xe6, 0xf5, 0x79, 0x6c, 0xbd, 0xd5,
	0x87, 0xfd, 0xdb, 0xb8, 0x36, 0xa5, 0xa2, 0xc3, 0x3e, 0x9f, 0xc0, 0xcd, 0xcd, 0x1c, 0xdc, 0x18,
	0xd1, 0xd4, 0x80, 0xf3, 0xd9, 0xc9, 0x4e, 0x2f, 0x98, 0x19, 0x2c, 0x1b, 0x77, 0x33, 0xf1, 0xd6,
	0xde, 0xda, 0x80, 0xd7, 0xd3, 0xa8, 0x12, 0xb8, 0xca, 0x04, 0x56, 0xbf, 0x8a, 0xef, 0x8a, 0x74,
	0x45, 0x2e, 0x31, 0x85, 0xae, 0xc1, 0x82, 0x3f, 0xec, 0xf0, 0x67, 0x46, 0xf2, 0x04, 0x45, 0x3a,
	0x23, 0x29, 0xe6, 0x1c, 0xdb, 0x7e, 0x39, 0xa9, 0x93, 0x32, 0xb7, 0x5c, 0x79, 0xb3, 0x29, 0xd4,
	0x32, 0x5a, 0xb3, 0x89, 0x84, 0x33, 0x4e, 0x6c, 0xab, 0x40, 0x5b, 0x43, 0x1d, 0x31, 0x66, 0xf1,
	0x88, 0x81, 0x14, 0x79, 0xc4, 0xf8, 0x02, 0xac, 0x08, 0x3e, 0x08, 0x22, 0xae, 0x63, 0xaf, 0x9c,
	0xab, 0x70, 0x0d, 0x99, 0x35, 0xf0, 0x6d, 0xc0, 0x22, 0x09, 0xa0, 0xe5, 0x11, 0xe3, 0x55, 0x24,
	0x62, 0x18, 0x3e, 0x57, 0xa8, 0x5b, 0xf6, 0x77, 0x27, 0x45, 0x11, 0x3d, 0x35, 0x39, 0x5a, 0x03,
	0x19, 0x25, 0xf5, 0xc3, 0x73, 0x01, 0x99, 0x29, 0xf5, 0xbb, 0x40, 0x3b, 0x2b, 0xfd, 0xd3, 0x4d,
	0x14, 0xbb, 0x4a, 0x97, 0x2a, 0x9d, 0x52, 0xe1, 0x8f, 0x94, 0xb0, 0x50, 0x85, 0xed, 0x60, 0x78,
	0xec, 0x8b, 0x81, 0x77, 0xd4, 0x9f, 0xc4, 0xad, 0x95, 0xd8, 0x18, 0x9f, 0x30, 0xa2, 0x90, 0x33,
	0xab, 0x99, 0xda, 0x1f, 0xd7, 0xe2, 0xb3, 0xb0, 0x3a, 0xc6, 0xec, 0xcd, 0xd0, 0x69, 0xb8, 0xf1,
	0x93, 0x02, 0x94, 0xaf, 0x34, 0x35, 0xfe, 0xd7, 0x22, 0x64, 0xeb, 0x0e, 0xdc, 0x56, 0x99, 0x81,
	0xd4, 0x6f, 0x4f, 0xbd, 0x9c, 0xca, 0x0f, 0x7f, 0xb3, 0x60, 0x35, 0x27, 0x1e, 0x84, 0xa9, 0xb5,
	0x34, 0xa6, 0xf6, 0x66, 0x74, 0x54, 0xdd, 0x86, 0x25, 0x62, 0x90, 0x81, 0xf1, 0xe3, 0x03, 0xe7,
	0xde, 0x8c, 0xb3, 0x88, 0xf4, 0x47, 0x48, 0xbe, 0x48, 0x2a, 0x30, 0xe1, 0x57, 0x32, 0xe1, 0xb7,
	0x75, 0x17, 0x36, 0xf3, 0xed, 0x43, 0xb5, 0x27, 0x06, 0xfe, 0x82, 0x72, 0xca, 0xd3, 0xf7, 0xc6,
	0x5e, 0x78, 0xf5, 0x07, 0xd8, 0x50, 0x2d, 0xa3, 0x21, 0x06, 0x09, 0x67, 0x20, 0x46, 0x4e, 0x52,
	0xf5, 0x6a, 0x0a, 0x98, 0x8a, 0x22, 0x48, 0xdf, 0xbe, 0x0a, 0x73, 0x7c, 0xd8, 0x51, 0x43, 0x65,
	0x35, 0x54, 0xe6, 0xc3, 0x8e, 0x1c, 0xb8, 0x09, 0x65, 0x2c, 0x9d, 0xd4, 0x4a, 0x9b, 0xea, 0xd0,
	0x58, 0x46, 0xf1, 0xae, 0x64, 0x14, 0x6f, 0xdb, 0xc7, 0x64, 0x12, 0xbb, 0x68, 0x9a, 0x4c, 0xc8,
	0x1a, 0x2d, 0x99, 0x20, 0x45, 0x6a, 0x70, 0x56, 0x82, 0xc0, 0x1b, 0x20, 0x27, 0x1d, 0x6e, 0xfb,
	0x67, 0x74, 0x4a, 0x96, 0x98, 0x38, 0xdd, 0xf7, 0xa2, 0xe9, 0x9d, 0xc2, 0x99, 0x75, 0x34, 0xc5,
	0xde, 0xcc, 0x6a, 0xc0, 0x46, 0x92, 0x81, 0x87, 0xd3, 0x06, 0x8c, 0x08, 0x8d, 0xef, 0x59, 0x57,
	0x9c, 0x2b, 0x36, 0x60, 0x91, 0x2e, 0x91, 0x28, 0xc6, 0xd4, 0x49, 0x23, 0x91, 0xb6, 0x65, 0xdc,
	0x06, 0xaa, 0xfc, 0xe5, 0x2a, 0xdd, 0x52, 0xfb, 0xf1, 0x6b, 0xd8, 0x67, 0xe8, 0xf6, 0x5e, 0x5e,
	0xb5, 0xb6, 0xff, 0x6e, 0x41, 0x63, 0xfa, 0xa6, 0xf0, 0x74, 0x7c, 0x34, 0x08, 0x3a, 0xe3, 0x3e,
	0xbf, 0xf2, 0x7b, 0x39, 0x02, 0xa1, 0x76, 0x2f, 0x87, 0x94, 0xb3, 0xee, 0xe5, 0x6e, 0xc0, 0x7c,
	0x18, 0x2b, 0x18, 0x5f, 0xcb, 0x4d, 0x08, 0x19, 0xc8, 0x2e, 0x67, 0x21, 0xfb, 0x4f, 0x16, 0x1e,
	0xb3, 0x52, 0x06, 0x3f, 0x9f, 0x4b, 0xa2, 0xd4, 0x29, 0xb2, 0x94, 0x3a, 0x45, 0xbe, 0x5d, 0xaa,
	0x14, 0x6b, 0x25, 0x27, 0x7d, 0x30, 0x7d, 0xf8, 0x8f, 0x05, 0xa8, 0x4d, 0xf4, 0x79, 0xca, 0xc5,
	0x89, 0xdf, 0xe6, 0xec, 0x1b, 0x50, 0x4b, 0xbe, 0xab, 0xb1, 0x35, 0xa3, 0x83, 0x4c, 0x3f, 0x12,
	0x36, 0xd6, 0xf3, 0x19, 0xd0, 0x2f, 0xf6, 0xfc, 0x87, 0xef, 0x6f, 0xce, 0x56, 0xac, 0x86, 0xf5,
	0x20, 0x5e, 0x41, 0x7f, 0x86, 0x32, 0x57, 0xc8, 0x78, 0x62, 0x33, 0x57, 0xc8, 0x7a, 0xc1, 0xca,
	0x58, 0x41, 0x7f, 0x0d, 0x32, 0x57, 0xc8, 0x78, 0xb9, 0x32, 0x57, 0xc8, 0x7a, 0x48, 0xd2, 0x57,
	0xf8, 0x2a, 0x2c, 0x1a, 0x6f, 0x11, 0xec, 0x46, 0xda, 0x03, 0xd3, 0xe7, 0x96, 0xc6, 0x6a, 0xce,
	0x68, 0xae, 0xe0, 0xc9, 0xb3, 0x8f, 0x29, 0x38, 0xf9, 0x2c, 0x65, 0x0a, 0x4e, 0xbd, 0x15, 0xe9,
	0x82, 0xdf, 0x85, 0x25, 0xf3, 0x72, 0x99, 0x19, 0x73, 0x53, 0x77, 0xea, 0x8d, 0x8f, 0xe5, 0x0d,
	0xa7, 0x65, 0x7b, 0xb0, 0x9c, 0x78, 0x46, 0x60, 0xe9, 0xd9, 0xa6, 0xb7, 0xd7, 0x72, 0xc7, 0x53,
	0xe2, 0x37, 0xad, 0xfb, 0x16, 0x3b, 0x80, 0xaa, 0x7e, 0x29, 0xcb, 0xae, 0xeb, 0xf3, 0x13, 0xb7,
	0xc9, 0x8d, 0x1b, 0xd9, 0x83, 0xb9, 0x4e, 0x99, 0x5e, 0x10, 0x9a, 0x4e, 0x49, 0xdd, 0xbc, 0x9a,
	0x4e, 0x49, 0xdf, 0x2b, 0x66, 0x38, 0x45, 0x3b, 0x27, 0x99, 0x4e, 0x49, 0x9f, 0xe4, 0x4c, 0xa7,
	0x64, 0x1c, 0xb0, 0xec, 0x85, 0x0f, 0xdf, 0xdf, 0x9c, 0xab, 0x58, 0x8d, 0xe2, 0x83, 0xe6, 0x83,
	0x4d, 0x8b, 0x7d, 0x19, 0x60, 0xda, 0x6a, 0xb1, 0xd7, 0xd2, 0xed, 0x70, 0x2c, 0xb8, 0x91, 0x35,
	0x44, 0x32, 0xab, 0x13, 0x95, 0x7f, 0x58, 0xb0, 0xd8, 0x18, 0xab, 0x69, 0xaa, 0x7b, 0x63, 0x37,
	0xcf, 0xd3, 0x6c, 0x37, 0x6e, 0xfd, 0x1b, 0xae, 0x4c, 0x3b, 0xee, 0x5b, 0xec, 0x9d, 0xd8, 0x92,
	0x13, 0x2e, 0xa2, 0xa4, 0x25, 0xda, 0x1d, 0x67, 0xd2, 0x12, 0xfd, 0x06, 0x4f, 0x77, 0x3e, 0xc9,
	0xc3, 0x06, 0xc4, 0x94, 0x67, 0xf4, 0x6d, 0xa6, 0x3c, 0xb3, 0x5f, 0xd1, 0xe5, 0x7d, 0x1d, 0x81,
	0x32, 0xad, 0xa2, 0x26, 0x50, 0x52, 0xdd, 0x84, 0x09, 0x94, 0x74, 0xf1, 0x4d, 0x46, 0xd2, 0xc7,
	0x67, 0x91, 0x44, 0x55, 0x61, 0x76, 0x3a, 0xeb, 0x25, 0x6b, 0x6c, 0x63, 0xe3, 0x4c, 0x9e, 0x94,
	0x29, 0x5b, 0xf7, 0xdf, 0x95, 0x13, 0xfa, 0xde, 0x51, 0xb3, 0x1d, 0x0c, 0xee, 0xe1, 0xcf, 0x37,
	0x02, 0xd1, 0xbd, 0x87, 0x62, 0xde, 0x50, 0x7f, 0x09, 0xb9, 0xd7, 0x0d, 0xe8, 0x7b, 0x74, 0x74,
	0x54, 0x56, 0xa4, 0x4f, 0xfd, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x28, 0x82, 0x72, 0x4f, 0x22,
	0x00, 0x00,
}
