// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package gitalypb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServerInfoRequest struct {
}

func (m *ServerInfoRequest) Reset()                    { *m = ServerInfoRequest{} }
func (m *ServerInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerInfoRequest) ProtoMessage()               {}
func (*ServerInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

type ServerInfoResponse struct {
	ServerVersion   string                              `protobuf:"bytes,1,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	GitVersion      string                              `protobuf:"bytes,2,opt,name=git_version,json=gitVersion" json:"git_version,omitempty"`
	StorageStatuses []*ServerInfoResponse_StorageStatus `protobuf:"bytes,3,rep,name=storage_statuses,json=storageStatuses" json:"storage_statuses,omitempty"`
}

func (m *ServerInfoResponse) Reset()                    { *m = ServerInfoResponse{} }
func (m *ServerInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerInfoResponse) ProtoMessage()               {}
func (*ServerInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *ServerInfoResponse) GetServerVersion() string {
	if m != nil {
		return m.ServerVersion
	}
	return ""
}

func (m *ServerInfoResponse) GetGitVersion() string {
	if m != nil {
		return m.GitVersion
	}
	return ""
}

func (m *ServerInfoResponse) GetStorageStatuses() []*ServerInfoResponse_StorageStatus {
	if m != nil {
		return m.StorageStatuses
	}
	return nil
}

type ServerInfoResponse_StorageStatus struct {
	StorageName string `protobuf:"bytes,1,opt,name=storage_name,json=storageName" json:"storage_name,omitempty"`
	Readable    bool   `protobuf:"varint,2,opt,name=readable" json:"readable,omitempty"`
	Writeable   bool   `protobuf:"varint,3,opt,name=writeable" json:"writeable,omitempty"`
}

func (m *ServerInfoResponse_StorageStatus) Reset()         { *m = ServerInfoResponse_StorageStatus{} }
func (m *ServerInfoResponse_StorageStatus) String() string { return proto.CompactTextString(m) }
func (*ServerInfoResponse_StorageStatus) ProtoMessage()    {}
func (*ServerInfoResponse_StorageStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{1, 0}
}

func (m *ServerInfoResponse_StorageStatus) GetStorageName() string {
	if m != nil {
		return m.StorageName
	}
	return ""
}

func (m *ServerInfoResponse_StorageStatus) GetReadable() bool {
	if m != nil {
		return m.Readable
	}
	return false
}

func (m *ServerInfoResponse_StorageStatus) GetWriteable() bool {
	if m != nil {
		return m.Writeable
	}
	return false
}

func init() {
	proto.RegisterType((*ServerInfoRequest)(nil), "gitaly.ServerInfoRequest")
	proto.RegisterType((*ServerInfoResponse)(nil), "gitaly.ServerInfoResponse")
	proto.RegisterType((*ServerInfoResponse_StorageStatus)(nil), "gitaly.ServerInfoResponse.StorageStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerService service

type ServerServiceClient interface {
	ServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error)
}

type serverServiceClient struct {
	cc *grpc.ClientConn
}

func NewServerServiceClient(cc *grpc.ClientConn) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) ServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error) {
	out := new(ServerInfoResponse)
	err := grpc.Invoke(ctx, "/gitaly.ServerService/ServerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerService service

type ServerServiceServer interface {
	ServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error)
}

func RegisterServerServiceServer(s *grpc.Server, srv ServerServiceServer) {
	s.RegisterService(&_ServerService_serviceDesc, srv)
}

func _ServerService_ServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.ServerService/ServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ServerInfo(ctx, req.(*ServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerInfo",
			Handler:    _ServerService_ServerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x6d, 0x03, 0xa5, 0x9d, 0x34, 0xfe, 0x19, 0x2f, 0x35, 0x08, 0xd6, 0x80, 0x90, 0x53,
	0x0e, 0xf5, 0x19, 0x3c, 0x78, 0xf1, 0x90, 0x40, 0xaf, 0x65, 0xab, 0x63, 0x58, 0x48, 0xb3, 0x75,
	0x67, 0x5a, 0xf1, 0x69, 0x7c, 0x55, 0x71, 0xb6, 0x7f, 0x22, 0xea, 0x65, 0x61, 0x7e, 0xf3, 0xcd,
	0xce, 0xf7, 0xed, 0xc2, 0x98, 0xc9, 0x6f, 0xc9, 0x17, 0x6b, 0xef, 0xc4, 0xe1, 0xa0, 0xb6, 0x62,
	0x9a, 0x8f, 0xec, 0x12, 0x2e, 0x2a, 0xe5, 0x8f, 0xed, 0xab, 0x2b, 0xe9, 0x6d, 0x43, 0x2c, 0xd9,
	0x67, 0x1f, 0xb0, 0x4b, 0x79, 0xed, 0x5a, 0x26, 0xbc, 0x83, 0xd3, 0x70, 0xc7, 0x62, 0x4b, 0x9e,
	0xad, 0x6b, 0x27, 0xbd, 0x69, 0x2f, 0x1f, 0x95, 0x49, 0xa0, 0xf3, 0x00, 0xf1, 0x06, 0xe2, 0xda,
	0xca, 0x41, 0xd3, 0x57, 0x0d, 0xd4, 0x56, 0xf6, 0x82, 0x0a, 0xce, 0x59, 0x9c, 0x37, 0x35, 0x2d,
	0x58, 0x8c, 0x6c, 0x98, 0x78, 0x12, 0x4d, 0xa3, 0x3c, 0x9e, 0xe5, 0x45, 0xb0, 0x55, 0xfc, 0xde,
	0x5e, 0x54, 0x61, 0xa4, 0xd2, 0x89, 0xf2, 0x8c, 0xbb, 0x25, 0x71, 0xda, 0x40, 0xf2, 0x43, 0x81,
	0xb7, 0x30, 0xde, 0x6f, 0x69, 0xcd, 0x8a, 0x76, 0x5e, 0xe3, 0x1d, 0x7b, 0x32, 0x2b, 0xc2, 0x14,
	0x86, 0x9e, 0xcc, 0x8b, 0x59, 0x36, 0xa4, 0x36, 0x87, 0xe5, 0xa1, 0xc6, 0x6b, 0x18, 0xbd, 0x7b,
	0x2b, 0xa4, 0xcd, 0x48, 0x9b, 0x47, 0x30, 0x9b, 0x43, 0x12, 0x2c, 0x7e, 0x9f, 0xf6, 0x99, 0xf0,
	0x01, 0xe0, 0xe8, 0x19, 0xaf, 0xfe, 0xca, 0xa1, 0x6f, 0x9b, 0xa6, 0xff, 0x47, 0xcc, 0x4e, 0x96,
	0x03, 0xfd, 0x9d, 0xfb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xe4, 0x68, 0x27, 0xad, 0x01,
	0x00, 0x00,
}
