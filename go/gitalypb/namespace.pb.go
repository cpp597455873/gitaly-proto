// Code generated by protoc-gen-go. DO NOT EDIT.
// source: namespace.proto

package gitalypb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AddNamespaceRequest struct {
	StorageName string `protobuf:"bytes,1,opt,name=storage_name,json=storageName" json:"storage_name,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *AddNamespaceRequest) Reset()                    { *m = AddNamespaceRequest{} }
func (m *AddNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*AddNamespaceRequest) ProtoMessage()               {}
func (*AddNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *AddNamespaceRequest) GetStorageName() string {
	if m != nil {
		return m.StorageName
	}
	return ""
}

func (m *AddNamespaceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RemoveNamespaceRequest struct {
	StorageName string `protobuf:"bytes,1,opt,name=storage_name,json=storageName" json:"storage_name,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *RemoveNamespaceRequest) Reset()                    { *m = RemoveNamespaceRequest{} }
func (m *RemoveNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveNamespaceRequest) ProtoMessage()               {}
func (*RemoveNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *RemoveNamespaceRequest) GetStorageName() string {
	if m != nil {
		return m.StorageName
	}
	return ""
}

func (m *RemoveNamespaceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RenameNamespaceRequest struct {
	StorageName string `protobuf:"bytes,1,opt,name=storage_name,json=storageName" json:"storage_name,omitempty"`
	From        string `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	To          string `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
	Override    bool   `protobuf:"varint,4,opt,name=override" json:"override,omitempty"`
}

func (m *RenameNamespaceRequest) Reset()                    { *m = RenameNamespaceRequest{} }
func (m *RenameNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameNamespaceRequest) ProtoMessage()               {}
func (*RenameNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *RenameNamespaceRequest) GetStorageName() string {
	if m != nil {
		return m.StorageName
	}
	return ""
}

func (m *RenameNamespaceRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RenameNamespaceRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *RenameNamespaceRequest) GetOverride() bool {
	if m != nil {
		return m.Override
	}
	return false
}

type NamespaceExistsRequest struct {
	StorageName string `protobuf:"bytes,1,opt,name=storage_name,json=storageName" json:"storage_name,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *NamespaceExistsRequest) Reset()                    { *m = NamespaceExistsRequest{} }
func (m *NamespaceExistsRequest) String() string            { return proto.CompactTextString(m) }
func (*NamespaceExistsRequest) ProtoMessage()               {}
func (*NamespaceExistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *NamespaceExistsRequest) GetStorageName() string {
	if m != nil {
		return m.StorageName
	}
	return ""
}

func (m *NamespaceExistsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NamespaceExistsResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *NamespaceExistsResponse) Reset()                    { *m = NamespaceExistsResponse{} }
func (m *NamespaceExistsResponse) String() string            { return proto.CompactTextString(m) }
func (*NamespaceExistsResponse) ProtoMessage()               {}
func (*NamespaceExistsResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *NamespaceExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type AddNamespaceResponse struct {
}

func (m *AddNamespaceResponse) Reset()                    { *m = AddNamespaceResponse{} }
func (m *AddNamespaceResponse) String() string            { return proto.CompactTextString(m) }
func (*AddNamespaceResponse) ProtoMessage()               {}
func (*AddNamespaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

type RemoveNamespaceResponse struct {
}

func (m *RemoveNamespaceResponse) Reset()                    { *m = RemoveNamespaceResponse{} }
func (m *RemoveNamespaceResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveNamespaceResponse) ProtoMessage()               {}
func (*RemoveNamespaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

type RenameNamespaceResponse struct {
}

func (m *RenameNamespaceResponse) Reset()                    { *m = RenameNamespaceResponse{} }
func (m *RenameNamespaceResponse) String() string            { return proto.CompactTextString(m) }
func (*RenameNamespaceResponse) ProtoMessage()               {}
func (*RenameNamespaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func init() {
	proto.RegisterType((*AddNamespaceRequest)(nil), "gitaly.AddNamespaceRequest")
	proto.RegisterType((*RemoveNamespaceRequest)(nil), "gitaly.RemoveNamespaceRequest")
	proto.RegisterType((*RenameNamespaceRequest)(nil), "gitaly.RenameNamespaceRequest")
	proto.RegisterType((*NamespaceExistsRequest)(nil), "gitaly.NamespaceExistsRequest")
	proto.RegisterType((*NamespaceExistsResponse)(nil), "gitaly.NamespaceExistsResponse")
	proto.RegisterType((*AddNamespaceResponse)(nil), "gitaly.AddNamespaceResponse")
	proto.RegisterType((*RemoveNamespaceResponse)(nil), "gitaly.RemoveNamespaceResponse")
	proto.RegisterType((*RenameNamespaceResponse)(nil), "gitaly.RenameNamespaceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NamespaceService service

type NamespaceServiceClient interface {
	AddNamespace(ctx context.Context, in *AddNamespaceRequest, opts ...grpc.CallOption) (*AddNamespaceResponse, error)
	RemoveNamespace(ctx context.Context, in *RemoveNamespaceRequest, opts ...grpc.CallOption) (*RemoveNamespaceResponse, error)
	RenameNamespace(ctx context.Context, in *RenameNamespaceRequest, opts ...grpc.CallOption) (*RenameNamespaceResponse, error)
	NamespaceExists(ctx context.Context, in *NamespaceExistsRequest, opts ...grpc.CallOption) (*NamespaceExistsResponse, error)
}

type namespaceServiceClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceServiceClient(cc *grpc.ClientConn) NamespaceServiceClient {
	return &namespaceServiceClient{cc}
}

func (c *namespaceServiceClient) AddNamespace(ctx context.Context, in *AddNamespaceRequest, opts ...grpc.CallOption) (*AddNamespaceResponse, error) {
	out := new(AddNamespaceResponse)
	err := grpc.Invoke(ctx, "/gitaly.NamespaceService/AddNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) RemoveNamespace(ctx context.Context, in *RemoveNamespaceRequest, opts ...grpc.CallOption) (*RemoveNamespaceResponse, error) {
	out := new(RemoveNamespaceResponse)
	err := grpc.Invoke(ctx, "/gitaly.NamespaceService/RemoveNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) RenameNamespace(ctx context.Context, in *RenameNamespaceRequest, opts ...grpc.CallOption) (*RenameNamespaceResponse, error) {
	out := new(RenameNamespaceResponse)
	err := grpc.Invoke(ctx, "/gitaly.NamespaceService/RenameNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) NamespaceExists(ctx context.Context, in *NamespaceExistsRequest, opts ...grpc.CallOption) (*NamespaceExistsResponse, error) {
	out := new(NamespaceExistsResponse)
	err := grpc.Invoke(ctx, "/gitaly.NamespaceService/NamespaceExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NamespaceService service

type NamespaceServiceServer interface {
	AddNamespace(context.Context, *AddNamespaceRequest) (*AddNamespaceResponse, error)
	RemoveNamespace(context.Context, *RemoveNamespaceRequest) (*RemoveNamespaceResponse, error)
	RenameNamespace(context.Context, *RenameNamespaceRequest) (*RenameNamespaceResponse, error)
	NamespaceExists(context.Context, *NamespaceExistsRequest) (*NamespaceExistsResponse, error)
}

func RegisterNamespaceServiceServer(s *grpc.Server, srv NamespaceServiceServer) {
	s.RegisterService(&_NamespaceService_serviceDesc, srv)
}

func _NamespaceService_AddNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).AddNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.NamespaceService/AddNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).AddNamespace(ctx, req.(*AddNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_RemoveNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).RemoveNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.NamespaceService/RemoveNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).RemoveNamespace(ctx, req.(*RemoveNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_RenameNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).RenameNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.NamespaceService/RenameNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).RenameNamespace(ctx, req.(*RenameNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_NamespaceExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).NamespaceExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.NamespaceService/NamespaceExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).NamespaceExists(ctx, req.(*NamespaceExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NamespaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.NamespaceService",
	HandlerType: (*NamespaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNamespace",
			Handler:    _NamespaceService_AddNamespace_Handler,
		},
		{
			MethodName: "RemoveNamespace",
			Handler:    _NamespaceService_RemoveNamespace_Handler,
		},
		{
			MethodName: "RenameNamespace",
			Handler:    _NamespaceService_RenameNamespace_Handler,
		},
		{
			MethodName: "NamespaceExists",
			Handler:    _NamespaceService_NamespaceExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "namespace.proto",
}

func init() { proto.RegisterFile("namespace.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcf, 0x4e, 0x83, 0x40,
	0x10, 0xc6, 0x5b, 0x6c, 0x1a, 0x1c, 0x1b, 0x6b, 0x46, 0x43, 0x11, 0x8d, 0x56, 0x4e, 0x3d, 0x91,
	0xa8, 0x4f, 0xe0, 0xc1, 0x93, 0x46, 0x13, 0xf4, 0x6e, 0xb0, 0x8c, 0x0d, 0x89, 0x74, 0x71, 0x77,
	0x25, 0x1a, 0x9f, 0xd6, 0x37, 0x31, 0xbb, 0xfc, 0x29, 0xd0, 0xed, 0x45, 0xbd, 0xcd, 0xce, 0xb7,
	0xfb, 0x1b, 0x66, 0xe6, 0x03, 0xc6, 0xcb, 0x28, 0x25, 0x91, 0x45, 0x73, 0x0a, 0x32, 0xce, 0x24,
	0xc3, 0xe1, 0x22, 0x91, 0xd1, 0xeb, 0xa7, 0x7f, 0x0b, 0xfb, 0x57, 0x71, 0x7c, 0x57, 0xa9, 0x21,
	0xbd, 0xbd, 0x93, 0x90, 0x78, 0x06, 0x23, 0x21, 0x19, 0x8f, 0x16, 0xf4, 0xa4, 0x5e, 0xba, 0xfd,
	0x69, 0x7f, 0xb6, 0x1d, 0xee, 0x94, 0x39, 0x75, 0x1d, 0x11, 0x06, 0x5a, 0xb2, 0xb4, 0xa4, 0x63,
	0xff, 0x1e, 0x9c, 0x90, 0x52, 0x96, 0xd3, 0x7f, 0x01, 0xbf, 0x14, 0x50, 0x45, 0xbf, 0x04, 0xbe,
	0x70, 0x96, 0x56, 0x40, 0x15, 0xe3, 0x2e, 0x58, 0x92, 0xb9, 0x5b, 0x3a, 0x63, 0x49, 0x86, 0x1e,
	0xd8, 0x2c, 0x27, 0xce, 0x93, 0x98, 0xdc, 0xc1, 0xb4, 0x3f, 0xb3, 0xc3, 0xfa, 0xac, 0xba, 0xa9,
	0xcb, 0x5e, 0x7f, 0x24, 0x42, 0x8a, 0x3f, 0x76, 0x73, 0x0e, 0x93, 0x35, 0xa0, 0xc8, 0xd8, 0x52,
	0x10, 0x3a, 0x30, 0x24, 0x9d, 0xd1, 0x2c, 0x3b, 0x2c, 0x4f, 0xbe, 0x03, 0x07, 0xed, 0xfd, 0x14,
	0xf7, 0xfd, 0x43, 0x98, 0xac, 0x4d, 0xba, 0x29, 0x75, 0x66, 0x56, 0x48, 0x17, 0xdf, 0x16, 0xec,
	0xd5, 0xd9, 0x07, 0xe2, 0x79, 0x32, 0x27, 0xbc, 0x81, 0x51, 0xb3, 0x04, 0x1e, 0x05, 0x85, 0x37,
	0x02, 0x83, 0x31, 0xbc, 0x63, 0xb3, 0x58, 0x96, 0xee, 0xe1, 0x23, 0x8c, 0x3b, 0xdf, 0x85, 0x27,
	0xd5, 0x13, 0xb3, 0x35, 0xbc, 0xd3, 0x8d, 0x7a, 0x9b, 0xda, 0x6a, 0xa9, 0x49, 0x35, 0xf9, 0xa3,
	0x49, 0x35, 0xce, 0xa2, 0xa0, 0x76, 0xd6, 0xb1, 0xa2, 0x9a, 0x17, 0xbf, 0xa2, 0x6e, 0xd8, 0xa3,
	0xdf, 0x7b, 0x1e, 0xea, 0x1f, 0xec, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0x33, 0xf7, 0xac, 0x87,
	0x73, 0x03, 0x00, 0x00,
}
