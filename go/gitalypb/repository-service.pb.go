// Code generated by protoc-gen-go. DO NOT EDIT.
// source: repository-service.proto

package gitalypb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetArchiveRequest_Format int32

const (
	GetArchiveRequest_ZIP     GetArchiveRequest_Format = 0
	GetArchiveRequest_TAR     GetArchiveRequest_Format = 1
	GetArchiveRequest_TAR_GZ  GetArchiveRequest_Format = 2
	GetArchiveRequest_TAR_BZ2 GetArchiveRequest_Format = 3
)

var GetArchiveRequest_Format_name = map[int32]string{
	0: "ZIP",
	1: "TAR",
	2: "TAR_GZ",
	3: "TAR_BZ2",
}
var GetArchiveRequest_Format_value = map[string]int32{
	"ZIP":     0,
	"TAR":     1,
	"TAR_GZ":  2,
	"TAR_BZ2": 3,
}

func (x GetArchiveRequest_Format) String() string {
	return proto.EnumName(GetArchiveRequest_Format_name, int32(x))
}
func (GetArchiveRequest_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{18, 0}
}

type GetRawChangesResponse_RawChange_Operation int32

const (
	GetRawChangesResponse_RawChange_UNKNOWN      GetRawChangesResponse_RawChange_Operation = 0
	GetRawChangesResponse_RawChange_ADDED        GetRawChangesResponse_RawChange_Operation = 1
	GetRawChangesResponse_RawChange_COPIED       GetRawChangesResponse_RawChange_Operation = 2
	GetRawChangesResponse_RawChange_DELETED      GetRawChangesResponse_RawChange_Operation = 3
	GetRawChangesResponse_RawChange_MODIFIED     GetRawChangesResponse_RawChange_Operation = 4
	GetRawChangesResponse_RawChange_RENAMED      GetRawChangesResponse_RawChange_Operation = 5
	GetRawChangesResponse_RawChange_TYPE_CHANGED GetRawChangesResponse_RawChange_Operation = 6
)

var GetRawChangesResponse_RawChange_Operation_name = map[int32]string{
	0: "UNKNOWN",
	1: "ADDED",
	2: "COPIED",
	3: "DELETED",
	4: "MODIFIED",
	5: "RENAMED",
	6: "TYPE_CHANGED",
}
var GetRawChangesResponse_RawChange_Operation_value = map[string]int32{
	"UNKNOWN":      0,
	"ADDED":        1,
	"COPIED":       2,
	"DELETED":      3,
	"MODIFIED":     4,
	"RENAMED":      5,
	"TYPE_CHANGED": 6,
}

func (x GetRawChangesResponse_RawChange_Operation) String() string {
	return proto.EnumName(GetRawChangesResponse_RawChange_Operation_name, int32(x))
}
func (GetRawChangesResponse_RawChange_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{63, 0, 0}
}

type RepositoryExistsRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *RepositoryExistsRequest) Reset()                    { *m = RepositoryExistsRequest{} }
func (m *RepositoryExistsRequest) String() string            { return proto.CompactTextString(m) }
func (*RepositoryExistsRequest) ProtoMessage()               {}
func (*RepositoryExistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *RepositoryExistsRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type RepositoryExistsResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *RepositoryExistsResponse) Reset()                    { *m = RepositoryExistsResponse{} }
func (m *RepositoryExistsResponse) String() string            { return proto.CompactTextString(m) }
func (*RepositoryExistsResponse) ProtoMessage()               {}
func (*RepositoryExistsResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *RepositoryExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type RepackIncrementalRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *RepackIncrementalRequest) Reset()                    { *m = RepackIncrementalRequest{} }
func (m *RepackIncrementalRequest) String() string            { return proto.CompactTextString(m) }
func (*RepackIncrementalRequest) ProtoMessage()               {}
func (*RepackIncrementalRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *RepackIncrementalRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type RepackIncrementalResponse struct {
}

func (m *RepackIncrementalResponse) Reset()                    { *m = RepackIncrementalResponse{} }
func (m *RepackIncrementalResponse) String() string            { return proto.CompactTextString(m) }
func (*RepackIncrementalResponse) ProtoMessage()               {}
func (*RepackIncrementalResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

type RepackFullRequest struct {
	Repository   *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	CreateBitmap bool        `protobuf:"varint,2,opt,name=create_bitmap,json=createBitmap" json:"create_bitmap,omitempty"`
}

func (m *RepackFullRequest) Reset()                    { *m = RepackFullRequest{} }
func (m *RepackFullRequest) String() string            { return proto.CompactTextString(m) }
func (*RepackFullRequest) ProtoMessage()               {}
func (*RepackFullRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

func (m *RepackFullRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *RepackFullRequest) GetCreateBitmap() bool {
	if m != nil {
		return m.CreateBitmap
	}
	return false
}

type RepackFullResponse struct {
}

func (m *RepackFullResponse) Reset()                    { *m = RepackFullResponse{} }
func (m *RepackFullResponse) String() string            { return proto.CompactTextString(m) }
func (*RepackFullResponse) ProtoMessage()               {}
func (*RepackFullResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

type GarbageCollectRequest struct {
	Repository   *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	CreateBitmap bool        `protobuf:"varint,2,opt,name=create_bitmap,json=createBitmap" json:"create_bitmap,omitempty"`
}

func (m *GarbageCollectRequest) Reset()                    { *m = GarbageCollectRequest{} }
func (m *GarbageCollectRequest) String() string            { return proto.CompactTextString(m) }
func (*GarbageCollectRequest) ProtoMessage()               {}
func (*GarbageCollectRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{6} }

func (m *GarbageCollectRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *GarbageCollectRequest) GetCreateBitmap() bool {
	if m != nil {
		return m.CreateBitmap
	}
	return false
}

type GarbageCollectResponse struct {
}

func (m *GarbageCollectResponse) Reset()                    { *m = GarbageCollectResponse{} }
func (m *GarbageCollectResponse) String() string            { return proto.CompactTextString(m) }
func (*GarbageCollectResponse) ProtoMessage()               {}
func (*GarbageCollectResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{7} }

type CleanupRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *CleanupRequest) Reset()                    { *m = CleanupRequest{} }
func (m *CleanupRequest) String() string            { return proto.CompactTextString(m) }
func (*CleanupRequest) ProtoMessage()               {}
func (*CleanupRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{8} }

func (m *CleanupRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type CleanupResponse struct {
}

func (m *CleanupResponse) Reset()                    { *m = CleanupResponse{} }
func (m *CleanupResponse) String() string            { return proto.CompactTextString(m) }
func (*CleanupResponse) ProtoMessage()               {}
func (*CleanupResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{9} }

type RepositorySizeRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *RepositorySizeRequest) Reset()                    { *m = RepositorySizeRequest{} }
func (m *RepositorySizeRequest) String() string            { return proto.CompactTextString(m) }
func (*RepositorySizeRequest) ProtoMessage()               {}
func (*RepositorySizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{10} }

func (m *RepositorySizeRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type RepositorySizeResponse struct {
	// Repository size in kilobytes
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *RepositorySizeResponse) Reset()                    { *m = RepositorySizeResponse{} }
func (m *RepositorySizeResponse) String() string            { return proto.CompactTextString(m) }
func (*RepositorySizeResponse) ProtoMessage()               {}
func (*RepositorySizeResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{11} }

func (m *RepositorySizeResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ApplyGitattributesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Revision   []byte      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (m *ApplyGitattributesRequest) Reset()                    { *m = ApplyGitattributesRequest{} }
func (m *ApplyGitattributesRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyGitattributesRequest) ProtoMessage()               {}
func (*ApplyGitattributesRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{12} }

func (m *ApplyGitattributesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ApplyGitattributesRequest) GetRevision() []byte {
	if m != nil {
		return m.Revision
	}
	return nil
}

type ApplyGitattributesResponse struct {
}

func (m *ApplyGitattributesResponse) Reset()                    { *m = ApplyGitattributesResponse{} }
func (m *ApplyGitattributesResponse) String() string            { return proto.CompactTextString(m) }
func (*ApplyGitattributesResponse) ProtoMessage()               {}
func (*ApplyGitattributesResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{13} }

type FetchRemoteRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Remote     string      `protobuf:"bytes,2,opt,name=remote" json:"remote,omitempty"`
	Force      bool        `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	NoTags     bool        `protobuf:"varint,4,opt,name=no_tags,json=noTags" json:"no_tags,omitempty"`
	Timeout    int32       `protobuf:"varint,5,opt,name=timeout" json:"timeout,omitempty"`
	SshKey     string      `protobuf:"bytes,6,opt,name=ssh_key,json=sshKey" json:"ssh_key,omitempty"`
	KnownHosts string      `protobuf:"bytes,7,opt,name=known_hosts,json=knownHosts" json:"known_hosts,omitempty"`
	NoPrune    bool        `protobuf:"varint,9,opt,name=no_prune,json=noPrune" json:"no_prune,omitempty"`
}

func (m *FetchRemoteRequest) Reset()                    { *m = FetchRemoteRequest{} }
func (m *FetchRemoteRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRemoteRequest) ProtoMessage()               {}
func (*FetchRemoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{14} }

func (m *FetchRemoteRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FetchRemoteRequest) GetRemote() string {
	if m != nil {
		return m.Remote
	}
	return ""
}

func (m *FetchRemoteRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *FetchRemoteRequest) GetNoTags() bool {
	if m != nil {
		return m.NoTags
	}
	return false
}

func (m *FetchRemoteRequest) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *FetchRemoteRequest) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *FetchRemoteRequest) GetKnownHosts() string {
	if m != nil {
		return m.KnownHosts
	}
	return ""
}

func (m *FetchRemoteRequest) GetNoPrune() bool {
	if m != nil {
		return m.NoPrune
	}
	return false
}

type FetchRemoteResponse struct {
}

func (m *FetchRemoteResponse) Reset()                    { *m = FetchRemoteResponse{} }
func (m *FetchRemoteResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchRemoteResponse) ProtoMessage()               {}
func (*FetchRemoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{15} }

type CreateRepositoryRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *CreateRepositoryRequest) Reset()                    { *m = CreateRepositoryRequest{} }
func (m *CreateRepositoryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRepositoryRequest) ProtoMessage()               {}
func (*CreateRepositoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{16} }

func (m *CreateRepositoryRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type CreateRepositoryResponse struct {
}

func (m *CreateRepositoryResponse) Reset()                    { *m = CreateRepositoryResponse{} }
func (m *CreateRepositoryResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRepositoryResponse) ProtoMessage()               {}
func (*CreateRepositoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{17} }

type GetArchiveRequest struct {
	Repository *Repository              `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	CommitId   string                   `protobuf:"bytes,2,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Prefix     string                   `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
	Format     GetArchiveRequest_Format `protobuf:"varint,4,opt,name=format,enum=gitaly.GetArchiveRequest_Format" json:"format,omitempty"`
}

func (m *GetArchiveRequest) Reset()                    { *m = GetArchiveRequest{} }
func (m *GetArchiveRequest) String() string            { return proto.CompactTextString(m) }
func (*GetArchiveRequest) ProtoMessage()               {}
func (*GetArchiveRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{18} }

func (m *GetArchiveRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *GetArchiveRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *GetArchiveRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *GetArchiveRequest) GetFormat() GetArchiveRequest_Format {
	if m != nil {
		return m.Format
	}
	return GetArchiveRequest_ZIP
}

type GetArchiveResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GetArchiveResponse) Reset()                    { *m = GetArchiveResponse{} }
func (m *GetArchiveResponse) String() string            { return proto.CompactTextString(m) }
func (*GetArchiveResponse) ProtoMessage()               {}
func (*GetArchiveResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{19} }

func (m *GetArchiveResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type HasLocalBranchesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *HasLocalBranchesRequest) Reset()                    { *m = HasLocalBranchesRequest{} }
func (m *HasLocalBranchesRequest) String() string            { return proto.CompactTextString(m) }
func (*HasLocalBranchesRequest) ProtoMessage()               {}
func (*HasLocalBranchesRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{20} }

func (m *HasLocalBranchesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type HasLocalBranchesResponse struct {
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *HasLocalBranchesResponse) Reset()                    { *m = HasLocalBranchesResponse{} }
func (m *HasLocalBranchesResponse) String() string            { return proto.CompactTextString(m) }
func (*HasLocalBranchesResponse) ProtoMessage()               {}
func (*HasLocalBranchesResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{21} }

func (m *HasLocalBranchesResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type FetchSourceBranchRequest struct {
	Repository       *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	SourceRepository *Repository `protobuf:"bytes,2,opt,name=source_repository,json=sourceRepository" json:"source_repository,omitempty"`
	SourceBranch     []byte      `protobuf:"bytes,3,opt,name=source_branch,json=sourceBranch,proto3" json:"source_branch,omitempty"`
	TargetRef        []byte      `protobuf:"bytes,4,opt,name=target_ref,json=targetRef,proto3" json:"target_ref,omitempty"`
}

func (m *FetchSourceBranchRequest) Reset()                    { *m = FetchSourceBranchRequest{} }
func (m *FetchSourceBranchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchSourceBranchRequest) ProtoMessage()               {}
func (*FetchSourceBranchRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{22} }

func (m *FetchSourceBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FetchSourceBranchRequest) GetSourceRepository() *Repository {
	if m != nil {
		return m.SourceRepository
	}
	return nil
}

func (m *FetchSourceBranchRequest) GetSourceBranch() []byte {
	if m != nil {
		return m.SourceBranch
	}
	return nil
}

func (m *FetchSourceBranchRequest) GetTargetRef() []byte {
	if m != nil {
		return m.TargetRef
	}
	return nil
}

type FetchSourceBranchResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *FetchSourceBranchResponse) Reset()                    { *m = FetchSourceBranchResponse{} }
func (m *FetchSourceBranchResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchSourceBranchResponse) ProtoMessage()               {}
func (*FetchSourceBranchResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{23} }

func (m *FetchSourceBranchResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type FsckRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *FsckRequest) Reset()                    { *m = FsckRequest{} }
func (m *FsckRequest) String() string            { return proto.CompactTextString(m) }
func (*FsckRequest) ProtoMessage()               {}
func (*FsckRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{24} }

func (m *FsckRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FsckResponse struct {
	Error []byte `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *FsckResponse) Reset()                    { *m = FsckResponse{} }
func (m *FsckResponse) String() string            { return proto.CompactTextString(m) }
func (*FsckResponse) ProtoMessage()               {}
func (*FsckResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{25} }

func (m *FsckResponse) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

type WriteRefRequest struct {
	Repository  *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Ref         []byte      `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Revision    []byte      `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	OldRevision []byte      `protobuf:"bytes,4,opt,name=old_revision,json=oldRevision,proto3" json:"old_revision,omitempty"`
	Force       bool        `protobuf:"varint,5,opt,name=force" json:"force,omitempty"`
}

func (m *WriteRefRequest) Reset()                    { *m = WriteRefRequest{} }
func (m *WriteRefRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRefRequest) ProtoMessage()               {}
func (*WriteRefRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{26} }

func (m *WriteRefRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *WriteRefRequest) GetRef() []byte {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *WriteRefRequest) GetRevision() []byte {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *WriteRefRequest) GetOldRevision() []byte {
	if m != nil {
		return m.OldRevision
	}
	return nil
}

func (m *WriteRefRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type WriteRefResponse struct {
}

func (m *WriteRefResponse) Reset()                    { *m = WriteRefResponse{} }
func (m *WriteRefResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteRefResponse) ProtoMessage()               {}
func (*WriteRefResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{27} }

type FindMergeBaseRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	// We use a repeated field because rugged supports finding a base
	// for more than 2 revisions, so if we needed that in the future we don't
	// need to change the protocol.
	Revisions [][]byte `protobuf:"bytes,2,rep,name=revisions,proto3" json:"revisions,omitempty"`
}

func (m *FindMergeBaseRequest) Reset()                    { *m = FindMergeBaseRequest{} }
func (m *FindMergeBaseRequest) String() string            { return proto.CompactTextString(m) }
func (*FindMergeBaseRequest) ProtoMessage()               {}
func (*FindMergeBaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{28} }

func (m *FindMergeBaseRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindMergeBaseRequest) GetRevisions() [][]byte {
	if m != nil {
		return m.Revisions
	}
	return nil
}

type FindMergeBaseResponse struct {
	Base string `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *FindMergeBaseResponse) Reset()                    { *m = FindMergeBaseResponse{} }
func (m *FindMergeBaseResponse) String() string            { return proto.CompactTextString(m) }
func (*FindMergeBaseResponse) ProtoMessage()               {}
func (*FindMergeBaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{29} }

func (m *FindMergeBaseResponse) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

type CreateForkRequest struct {
	Repository       *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	SourceRepository *Repository `protobuf:"bytes,2,opt,name=source_repository,json=sourceRepository" json:"source_repository,omitempty"`
}

func (m *CreateForkRequest) Reset()                    { *m = CreateForkRequest{} }
func (m *CreateForkRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateForkRequest) ProtoMessage()               {}
func (*CreateForkRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{30} }

func (m *CreateForkRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CreateForkRequest) GetSourceRepository() *Repository {
	if m != nil {
		return m.SourceRepository
	}
	return nil
}

type CreateForkResponse struct {
}

func (m *CreateForkResponse) Reset()                    { *m = CreateForkResponse{} }
func (m *CreateForkResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateForkResponse) ProtoMessage()               {}
func (*CreateForkResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{31} }

type IsRebaseInProgressRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	RebaseId   string      `protobuf:"bytes,2,opt,name=rebase_id,json=rebaseId" json:"rebase_id,omitempty"`
}

func (m *IsRebaseInProgressRequest) Reset()                    { *m = IsRebaseInProgressRequest{} }
func (m *IsRebaseInProgressRequest) String() string            { return proto.CompactTextString(m) }
func (*IsRebaseInProgressRequest) ProtoMessage()               {}
func (*IsRebaseInProgressRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{32} }

func (m *IsRebaseInProgressRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *IsRebaseInProgressRequest) GetRebaseId() string {
	if m != nil {
		return m.RebaseId
	}
	return ""
}

type IsRebaseInProgressResponse struct {
	InProgress bool `protobuf:"varint,1,opt,name=in_progress,json=inProgress" json:"in_progress,omitempty"`
}

func (m *IsRebaseInProgressResponse) Reset()                    { *m = IsRebaseInProgressResponse{} }
func (m *IsRebaseInProgressResponse) String() string            { return proto.CompactTextString(m) }
func (*IsRebaseInProgressResponse) ProtoMessage()               {}
func (*IsRebaseInProgressResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{33} }

func (m *IsRebaseInProgressResponse) GetInProgress() bool {
	if m != nil {
		return m.InProgress
	}
	return false
}

type IsSquashInProgressRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	SquashId   string      `protobuf:"bytes,2,opt,name=squash_id,json=squashId" json:"squash_id,omitempty"`
}

func (m *IsSquashInProgressRequest) Reset()                    { *m = IsSquashInProgressRequest{} }
func (m *IsSquashInProgressRequest) String() string            { return proto.CompactTextString(m) }
func (*IsSquashInProgressRequest) ProtoMessage()               {}
func (*IsSquashInProgressRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{34} }

func (m *IsSquashInProgressRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *IsSquashInProgressRequest) GetSquashId() string {
	if m != nil {
		return m.SquashId
	}
	return ""
}

type IsSquashInProgressResponse struct {
	InProgress bool `protobuf:"varint,1,opt,name=in_progress,json=inProgress" json:"in_progress,omitempty"`
}

func (m *IsSquashInProgressResponse) Reset()                    { *m = IsSquashInProgressResponse{} }
func (m *IsSquashInProgressResponse) String() string            { return proto.CompactTextString(m) }
func (*IsSquashInProgressResponse) ProtoMessage()               {}
func (*IsSquashInProgressResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{35} }

func (m *IsSquashInProgressResponse) GetInProgress() bool {
	if m != nil {
		return m.InProgress
	}
	return false
}

type CreateRepositoryFromURLRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Url        string      `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *CreateRepositoryFromURLRequest) Reset()         { *m = CreateRepositoryFromURLRequest{} }
func (m *CreateRepositoryFromURLRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRepositoryFromURLRequest) ProtoMessage()    {}
func (*CreateRepositoryFromURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{36}
}

func (m *CreateRepositoryFromURLRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CreateRepositoryFromURLRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type CreateRepositoryFromURLResponse struct {
}

func (m *CreateRepositoryFromURLResponse) Reset()         { *m = CreateRepositoryFromURLResponse{} }
func (m *CreateRepositoryFromURLResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRepositoryFromURLResponse) ProtoMessage()    {}
func (*CreateRepositoryFromURLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{37}
}

type CreateBundleRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *CreateBundleRequest) Reset()                    { *m = CreateBundleRequest{} }
func (m *CreateBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBundleRequest) ProtoMessage()               {}
func (*CreateBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{38} }

func (m *CreateBundleRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type CreateBundleResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CreateBundleResponse) Reset()                    { *m = CreateBundleResponse{} }
func (m *CreateBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateBundleResponse) ProtoMessage()               {}
func (*CreateBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{39} }

func (m *CreateBundleResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WriteConfigRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	FullPath   string      `protobuf:"bytes,2,opt,name=full_path,json=fullPath" json:"full_path,omitempty"`
}

func (m *WriteConfigRequest) Reset()                    { *m = WriteConfigRequest{} }
func (m *WriteConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteConfigRequest) ProtoMessage()               {}
func (*WriteConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{40} }

func (m *WriteConfigRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *WriteConfigRequest) GetFullPath() string {
	if m != nil {
		return m.FullPath
	}
	return ""
}

type WriteConfigResponse struct {
	Error []byte `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *WriteConfigResponse) Reset()                    { *m = WriteConfigResponse{} }
func (m *WriteConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteConfigResponse) ProtoMessage()               {}
func (*WriteConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{41} }

func (m *WriteConfigResponse) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

type SetConfigRequest struct {
	Repository *Repository               `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Entries    []*SetConfigRequest_Entry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (m *SetConfigRequest) Reset()                    { *m = SetConfigRequest{} }
func (m *SetConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*SetConfigRequest) ProtoMessage()               {}
func (*SetConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{42} }

func (m *SetConfigRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *SetConfigRequest) GetEntries() []*SetConfigRequest_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type SetConfigRequest_Entry struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*SetConfigRequest_Entry_ValueStr
	//	*SetConfigRequest_Entry_ValueInt32
	//	*SetConfigRequest_Entry_ValueBool
	Value isSetConfigRequest_Entry_Value `protobuf_oneof:"value"`
}

func (m *SetConfigRequest_Entry) Reset()                    { *m = SetConfigRequest_Entry{} }
func (m *SetConfigRequest_Entry) String() string            { return proto.CompactTextString(m) }
func (*SetConfigRequest_Entry) ProtoMessage()               {}
func (*SetConfigRequest_Entry) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{42, 0} }

type isSetConfigRequest_Entry_Value interface{ isSetConfigRequest_Entry_Value() }

type SetConfigRequest_Entry_ValueStr struct {
	ValueStr string `protobuf:"bytes,2,opt,name=value_str,json=valueStr,oneof"`
}
type SetConfigRequest_Entry_ValueInt32 struct {
	ValueInt32 int32 `protobuf:"varint,3,opt,name=value_int32,json=valueInt32,oneof"`
}
type SetConfigRequest_Entry_ValueBool struct {
	ValueBool bool `protobuf:"varint,4,opt,name=value_bool,json=valueBool,oneof"`
}

func (*SetConfigRequest_Entry_ValueStr) isSetConfigRequest_Entry_Value()   {}
func (*SetConfigRequest_Entry_ValueInt32) isSetConfigRequest_Entry_Value() {}
func (*SetConfigRequest_Entry_ValueBool) isSetConfigRequest_Entry_Value()  {}

func (m *SetConfigRequest_Entry) GetValue() isSetConfigRequest_Entry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SetConfigRequest_Entry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetConfigRequest_Entry) GetValueStr() string {
	if x, ok := m.GetValue().(*SetConfigRequest_Entry_ValueStr); ok {
		return x.ValueStr
	}
	return ""
}

func (m *SetConfigRequest_Entry) GetValueInt32() int32 {
	if x, ok := m.GetValue().(*SetConfigRequest_Entry_ValueInt32); ok {
		return x.ValueInt32
	}
	return 0
}

func (m *SetConfigRequest_Entry) GetValueBool() bool {
	if x, ok := m.GetValue().(*SetConfigRequest_Entry_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SetConfigRequest_Entry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SetConfigRequest_Entry_OneofMarshaler, _SetConfigRequest_Entry_OneofUnmarshaler, _SetConfigRequest_Entry_OneofSizer, []interface{}{
		(*SetConfigRequest_Entry_ValueStr)(nil),
		(*SetConfigRequest_Entry_ValueInt32)(nil),
		(*SetConfigRequest_Entry_ValueBool)(nil),
	}
}

func _SetConfigRequest_Entry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SetConfigRequest_Entry)
	// value
	switch x := m.Value.(type) {
	case *SetConfigRequest_Entry_ValueStr:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ValueStr)
	case *SetConfigRequest_Entry_ValueInt32:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ValueInt32))
	case *SetConfigRequest_Entry_ValueBool:
		t := uint64(0)
		if x.ValueBool {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("SetConfigRequest_Entry.Value has unexpected type %T", x)
	}
	return nil
}

func _SetConfigRequest_Entry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SetConfigRequest_Entry)
	switch tag {
	case 2: // value.value_str
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &SetConfigRequest_Entry_ValueStr{x}
		return true, err
	case 3: // value.value_int32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SetConfigRequest_Entry_ValueInt32{int32(x)}
		return true, err
	case 4: // value.value_bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SetConfigRequest_Entry_ValueBool{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _SetConfigRequest_Entry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SetConfigRequest_Entry)
	// value
	switch x := m.Value.(type) {
	case *SetConfigRequest_Entry_ValueStr:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ValueStr)))
		n += len(x.ValueStr)
	case *SetConfigRequest_Entry_ValueInt32:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ValueInt32))
	case *SetConfigRequest_Entry_ValueBool:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SetConfigResponse struct {
}

func (m *SetConfigResponse) Reset()                    { *m = SetConfigResponse{} }
func (m *SetConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*SetConfigResponse) ProtoMessage()               {}
func (*SetConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{43} }

type DeleteConfigRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Keys       []string    `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
}

func (m *DeleteConfigRequest) Reset()                    { *m = DeleteConfigRequest{} }
func (m *DeleteConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigRequest) ProtoMessage()               {}
func (*DeleteConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{44} }

func (m *DeleteConfigRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *DeleteConfigRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type DeleteConfigResponse struct {
}

func (m *DeleteConfigResponse) Reset()                    { *m = DeleteConfigResponse{} }
func (m *DeleteConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigResponse) ProtoMessage()               {}
func (*DeleteConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{45} }

type RestoreCustomHooksRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Data       []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RestoreCustomHooksRequest) Reset()                    { *m = RestoreCustomHooksRequest{} }
func (m *RestoreCustomHooksRequest) String() string            { return proto.CompactTextString(m) }
func (*RestoreCustomHooksRequest) ProtoMessage()               {}
func (*RestoreCustomHooksRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{46} }

func (m *RestoreCustomHooksRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *RestoreCustomHooksRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RestoreCustomHooksResponse struct {
}

func (m *RestoreCustomHooksResponse) Reset()                    { *m = RestoreCustomHooksResponse{} }
func (m *RestoreCustomHooksResponse) String() string            { return proto.CompactTextString(m) }
func (*RestoreCustomHooksResponse) ProtoMessage()               {}
func (*RestoreCustomHooksResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{47} }

type BackupCustomHooksRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *BackupCustomHooksRequest) Reset()                    { *m = BackupCustomHooksRequest{} }
func (m *BackupCustomHooksRequest) String() string            { return proto.CompactTextString(m) }
func (*BackupCustomHooksRequest) ProtoMessage()               {}
func (*BackupCustomHooksRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{48} }

func (m *BackupCustomHooksRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type BackupCustomHooksResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BackupCustomHooksResponse) Reset()                    { *m = BackupCustomHooksResponse{} }
func (m *BackupCustomHooksResponse) String() string            { return proto.CompactTextString(m) }
func (*BackupCustomHooksResponse) ProtoMessage()               {}
func (*BackupCustomHooksResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{49} }

func (m *BackupCustomHooksResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateRepositoryFromBundleRequest struct {
	// Only available on the first message
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Data       []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CreateRepositoryFromBundleRequest) Reset()         { *m = CreateRepositoryFromBundleRequest{} }
func (m *CreateRepositoryFromBundleRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRepositoryFromBundleRequest) ProtoMessage()    {}
func (*CreateRepositoryFromBundleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{50}
}

func (m *CreateRepositoryFromBundleRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CreateRepositoryFromBundleRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateRepositoryFromBundleResponse struct {
}

func (m *CreateRepositoryFromBundleResponse) Reset()         { *m = CreateRepositoryFromBundleResponse{} }
func (m *CreateRepositoryFromBundleResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRepositoryFromBundleResponse) ProtoMessage()    {}
func (*CreateRepositoryFromBundleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{51}
}

type FindLicenseRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *FindLicenseRequest) Reset()                    { *m = FindLicenseRequest{} }
func (m *FindLicenseRequest) String() string            { return proto.CompactTextString(m) }
func (*FindLicenseRequest) ProtoMessage()               {}
func (*FindLicenseRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{52} }

func (m *FindLicenseRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindLicenseResponse struct {
	LicenseShortName string `protobuf:"bytes,1,opt,name=license_short_name,json=licenseShortName" json:"license_short_name,omitempty"`
}

func (m *FindLicenseResponse) Reset()                    { *m = FindLicenseResponse{} }
func (m *FindLicenseResponse) String() string            { return proto.CompactTextString(m) }
func (*FindLicenseResponse) ProtoMessage()               {}
func (*FindLicenseResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{53} }

func (m *FindLicenseResponse) GetLicenseShortName() string {
	if m != nil {
		return m.LicenseShortName
	}
	return ""
}

type GetInfoAttributesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *GetInfoAttributesRequest) Reset()                    { *m = GetInfoAttributesRequest{} }
func (m *GetInfoAttributesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInfoAttributesRequest) ProtoMessage()               {}
func (*GetInfoAttributesRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{54} }

func (m *GetInfoAttributesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type GetInfoAttributesResponse struct {
	Attributes []byte `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *GetInfoAttributesResponse) Reset()                    { *m = GetInfoAttributesResponse{} }
func (m *GetInfoAttributesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetInfoAttributesResponse) ProtoMessage()               {}
func (*GetInfoAttributesResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{55} }

func (m *GetInfoAttributesResponse) GetAttributes() []byte {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type CalculateChecksumRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *CalculateChecksumRequest) Reset()                    { *m = CalculateChecksumRequest{} }
func (m *CalculateChecksumRequest) String() string            { return proto.CompactTextString(m) }
func (*CalculateChecksumRequest) ProtoMessage()               {}
func (*CalculateChecksumRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{56} }

func (m *CalculateChecksumRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type CalculateChecksumResponse struct {
	Checksum string `protobuf:"bytes,1,opt,name=checksum" json:"checksum,omitempty"`
}

func (m *CalculateChecksumResponse) Reset()                    { *m = CalculateChecksumResponse{} }
func (m *CalculateChecksumResponse) String() string            { return proto.CompactTextString(m) }
func (*CalculateChecksumResponse) ProtoMessage()               {}
func (*CalculateChecksumResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{57} }

func (m *CalculateChecksumResponse) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

type GetSnapshotRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *GetSnapshotRequest) Reset()                    { *m = GetSnapshotRequest{} }
func (m *GetSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSnapshotRequest) ProtoMessage()               {}
func (*GetSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{58} }

func (m *GetSnapshotRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type GetSnapshotResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GetSnapshotResponse) Reset()                    { *m = GetSnapshotResponse{} }
func (m *GetSnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSnapshotResponse) ProtoMessage()               {}
func (*GetSnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{59} }

func (m *GetSnapshotResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateRepositoryFromSnapshotRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	HttpUrl    string      `protobuf:"bytes,2,opt,name=http_url,json=httpUrl" json:"http_url,omitempty"`
	HttpAuth   string      `protobuf:"bytes,3,opt,name=http_auth,json=httpAuth" json:"http_auth,omitempty"`
}

func (m *CreateRepositoryFromSnapshotRequest) Reset()         { *m = CreateRepositoryFromSnapshotRequest{} }
func (m *CreateRepositoryFromSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRepositoryFromSnapshotRequest) ProtoMessage()    {}
func (*CreateRepositoryFromSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{60}
}

func (m *CreateRepositoryFromSnapshotRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CreateRepositoryFromSnapshotRequest) GetHttpUrl() string {
	if m != nil {
		return m.HttpUrl
	}
	return ""
}

func (m *CreateRepositoryFromSnapshotRequest) GetHttpAuth() string {
	if m != nil {
		return m.HttpAuth
	}
	return ""
}

type CreateRepositoryFromSnapshotResponse struct {
}

func (m *CreateRepositoryFromSnapshotResponse) Reset()         { *m = CreateRepositoryFromSnapshotResponse{} }
func (m *CreateRepositoryFromSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRepositoryFromSnapshotResponse) ProtoMessage()    {}
func (*CreateRepositoryFromSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{61}
}

type GetRawChangesRequest struct {
	Repository   *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	FromRevision string      `protobuf:"bytes,2,opt,name=from_revision,json=fromRevision" json:"from_revision,omitempty"`
	ToRevision   string      `protobuf:"bytes,3,opt,name=to_revision,json=toRevision" json:"to_revision,omitempty"`
}

func (m *GetRawChangesRequest) Reset()                    { *m = GetRawChangesRequest{} }
func (m *GetRawChangesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRawChangesRequest) ProtoMessage()               {}
func (*GetRawChangesRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{62} }

func (m *GetRawChangesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *GetRawChangesRequest) GetFromRevision() string {
	if m != nil {
		return m.FromRevision
	}
	return ""
}

func (m *GetRawChangesRequest) GetToRevision() string {
	if m != nil {
		return m.ToRevision
	}
	return ""
}

type GetRawChangesResponse struct {
	RawChanges []*GetRawChangesResponse_RawChange `protobuf:"bytes,1,rep,name=raw_changes,json=rawChanges" json:"raw_changes,omitempty"`
}

func (m *GetRawChangesResponse) Reset()                    { *m = GetRawChangesResponse{} }
func (m *GetRawChangesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRawChangesResponse) ProtoMessage()               {}
func (*GetRawChangesResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{63} }

func (m *GetRawChangesResponse) GetRawChanges() []*GetRawChangesResponse_RawChange {
	if m != nil {
		return m.RawChanges
	}
	return nil
}

type GetRawChangesResponse_RawChange struct {
	BlobId       string                                    `protobuf:"bytes,1,opt,name=blob_id,json=blobId" json:"blob_id,omitempty"`
	Size         int64                                     `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	NewPath      string                                    `protobuf:"bytes,3,opt,name=new_path,json=newPath" json:"new_path,omitempty"`
	OldPath      string                                    `protobuf:"bytes,4,opt,name=old_path,json=oldPath" json:"old_path,omitempty"`
	Operation    GetRawChangesResponse_RawChange_Operation `protobuf:"varint,5,opt,name=operation,enum=gitaly.GetRawChangesResponse_RawChange_Operation" json:"operation,omitempty"`
	RawOperation string                                    `protobuf:"bytes,6,opt,name=raw_operation,json=rawOperation" json:"raw_operation,omitempty"`
	OldMode      int32                                     `protobuf:"varint,7,opt,name=old_mode,json=oldMode" json:"old_mode,omitempty"`
	NewMode      int32                                     `protobuf:"varint,8,opt,name=new_mode,json=newMode" json:"new_mode,omitempty"`
}

func (m *GetRawChangesResponse_RawChange) Reset()         { *m = GetRawChangesResponse_RawChange{} }
func (m *GetRawChangesResponse_RawChange) String() string { return proto.CompactTextString(m) }
func (*GetRawChangesResponse_RawChange) ProtoMessage()    {}
func (*GetRawChangesResponse_RawChange) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{63, 0}
}

func (m *GetRawChangesResponse_RawChange) GetBlobId() string {
	if m != nil {
		return m.BlobId
	}
	return ""
}

func (m *GetRawChangesResponse_RawChange) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *GetRawChangesResponse_RawChange) GetNewPath() string {
	if m != nil {
		return m.NewPath
	}
	return ""
}

func (m *GetRawChangesResponse_RawChange) GetOldPath() string {
	if m != nil {
		return m.OldPath
	}
	return ""
}

func (m *GetRawChangesResponse_RawChange) GetOperation() GetRawChangesResponse_RawChange_Operation {
	if m != nil {
		return m.Operation
	}
	return GetRawChangesResponse_RawChange_UNKNOWN
}

func (m *GetRawChangesResponse_RawChange) GetRawOperation() string {
	if m != nil {
		return m.RawOperation
	}
	return ""
}

func (m *GetRawChangesResponse_RawChange) GetOldMode() int32 {
	if m != nil {
		return m.OldMode
	}
	return 0
}

func (m *GetRawChangesResponse_RawChange) GetNewMode() int32 {
	if m != nil {
		return m.NewMode
	}
	return 0
}

type SearchFilesByNameRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Query      string      `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	Ref        []byte      `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (m *SearchFilesByNameRequest) Reset()                    { *m = SearchFilesByNameRequest{} }
func (m *SearchFilesByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchFilesByNameRequest) ProtoMessage()               {}
func (*SearchFilesByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{64} }

func (m *SearchFilesByNameRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *SearchFilesByNameRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchFilesByNameRequest) GetRef() []byte {
	if m != nil {
		return m.Ref
	}
	return nil
}

type SearchFilesByNameResponse struct {
	Files [][]byte `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (m *SearchFilesByNameResponse) Reset()                    { *m = SearchFilesByNameResponse{} }
func (m *SearchFilesByNameResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchFilesByNameResponse) ProtoMessage()               {}
func (*SearchFilesByNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{65} }

func (m *SearchFilesByNameResponse) GetFiles() [][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

type SearchFilesByContentRequest struct {
	Repository      *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Query           string      `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	Ref             []byte      `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	ChunkedResponse bool        `protobuf:"varint,4,opt,name=chunked_response,json=chunkedResponse" json:"chunked_response,omitempty"`
}

func (m *SearchFilesByContentRequest) Reset()                    { *m = SearchFilesByContentRequest{} }
func (m *SearchFilesByContentRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchFilesByContentRequest) ProtoMessage()               {}
func (*SearchFilesByContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{66} }

func (m *SearchFilesByContentRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *SearchFilesByContentRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchFilesByContentRequest) GetRef() []byte {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *SearchFilesByContentRequest) GetChunkedResponse() bool {
	if m != nil {
		return m.ChunkedResponse
	}
	return false
}

type SearchFilesByContentResponse struct {
	Matches    [][]byte `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	MatchData  []byte   `protobuf:"bytes,2,opt,name=match_data,json=matchData,proto3" json:"match_data,omitempty"`
	EndOfMatch bool     `protobuf:"varint,3,opt,name=end_of_match,json=endOfMatch" json:"end_of_match,omitempty"`
}

func (m *SearchFilesByContentResponse) Reset()                    { *m = SearchFilesByContentResponse{} }
func (m *SearchFilesByContentResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchFilesByContentResponse) ProtoMessage()               {}
func (*SearchFilesByContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{67} }

func (m *SearchFilesByContentResponse) GetMatches() [][]byte {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *SearchFilesByContentResponse) GetMatchData() []byte {
	if m != nil {
		return m.MatchData
	}
	return nil
}

func (m *SearchFilesByContentResponse) GetEndOfMatch() bool {
	if m != nil {
		return m.EndOfMatch
	}
	return false
}

func init() {
	proto.RegisterType((*RepositoryExistsRequest)(nil), "gitaly.RepositoryExistsRequest")
	proto.RegisterType((*RepositoryExistsResponse)(nil), "gitaly.RepositoryExistsResponse")
	proto.RegisterType((*RepackIncrementalRequest)(nil), "gitaly.RepackIncrementalRequest")
	proto.RegisterType((*RepackIncrementalResponse)(nil), "gitaly.RepackIncrementalResponse")
	proto.RegisterType((*RepackFullRequest)(nil), "gitaly.RepackFullRequest")
	proto.RegisterType((*RepackFullResponse)(nil), "gitaly.RepackFullResponse")
	proto.RegisterType((*GarbageCollectRequest)(nil), "gitaly.GarbageCollectRequest")
	proto.RegisterType((*GarbageCollectResponse)(nil), "gitaly.GarbageCollectResponse")
	proto.RegisterType((*CleanupRequest)(nil), "gitaly.CleanupRequest")
	proto.RegisterType((*CleanupResponse)(nil), "gitaly.CleanupResponse")
	proto.RegisterType((*RepositorySizeRequest)(nil), "gitaly.RepositorySizeRequest")
	proto.RegisterType((*RepositorySizeResponse)(nil), "gitaly.RepositorySizeResponse")
	proto.RegisterType((*ApplyGitattributesRequest)(nil), "gitaly.ApplyGitattributesRequest")
	proto.RegisterType((*ApplyGitattributesResponse)(nil), "gitaly.ApplyGitattributesResponse")
	proto.RegisterType((*FetchRemoteRequest)(nil), "gitaly.FetchRemoteRequest")
	proto.RegisterType((*FetchRemoteResponse)(nil), "gitaly.FetchRemoteResponse")
	proto.RegisterType((*CreateRepositoryRequest)(nil), "gitaly.CreateRepositoryRequest")
	proto.RegisterType((*CreateRepositoryResponse)(nil), "gitaly.CreateRepositoryResponse")
	proto.RegisterType((*GetArchiveRequest)(nil), "gitaly.GetArchiveRequest")
	proto.RegisterType((*GetArchiveResponse)(nil), "gitaly.GetArchiveResponse")
	proto.RegisterType((*HasLocalBranchesRequest)(nil), "gitaly.HasLocalBranchesRequest")
	proto.RegisterType((*HasLocalBranchesResponse)(nil), "gitaly.HasLocalBranchesResponse")
	proto.RegisterType((*FetchSourceBranchRequest)(nil), "gitaly.FetchSourceBranchRequest")
	proto.RegisterType((*FetchSourceBranchResponse)(nil), "gitaly.FetchSourceBranchResponse")
	proto.RegisterType((*FsckRequest)(nil), "gitaly.FsckRequest")
	proto.RegisterType((*FsckResponse)(nil), "gitaly.FsckResponse")
	proto.RegisterType((*WriteRefRequest)(nil), "gitaly.WriteRefRequest")
	proto.RegisterType((*WriteRefResponse)(nil), "gitaly.WriteRefResponse")
	proto.RegisterType((*FindMergeBaseRequest)(nil), "gitaly.FindMergeBaseRequest")
	proto.RegisterType((*FindMergeBaseResponse)(nil), "gitaly.FindMergeBaseResponse")
	proto.RegisterType((*CreateForkRequest)(nil), "gitaly.CreateForkRequest")
	proto.RegisterType((*CreateForkResponse)(nil), "gitaly.CreateForkResponse")
	proto.RegisterType((*IsRebaseInProgressRequest)(nil), "gitaly.IsRebaseInProgressRequest")
	proto.RegisterType((*IsRebaseInProgressResponse)(nil), "gitaly.IsRebaseInProgressResponse")
	proto.RegisterType((*IsSquashInProgressRequest)(nil), "gitaly.IsSquashInProgressRequest")
	proto.RegisterType((*IsSquashInProgressResponse)(nil), "gitaly.IsSquashInProgressResponse")
	proto.RegisterType((*CreateRepositoryFromURLRequest)(nil), "gitaly.CreateRepositoryFromURLRequest")
	proto.RegisterType((*CreateRepositoryFromURLResponse)(nil), "gitaly.CreateRepositoryFromURLResponse")
	proto.RegisterType((*CreateBundleRequest)(nil), "gitaly.CreateBundleRequest")
	proto.RegisterType((*CreateBundleResponse)(nil), "gitaly.CreateBundleResponse")
	proto.RegisterType((*WriteConfigRequest)(nil), "gitaly.WriteConfigRequest")
	proto.RegisterType((*WriteConfigResponse)(nil), "gitaly.WriteConfigResponse")
	proto.RegisterType((*SetConfigRequest)(nil), "gitaly.SetConfigRequest")
	proto.RegisterType((*SetConfigRequest_Entry)(nil), "gitaly.SetConfigRequest.Entry")
	proto.RegisterType((*SetConfigResponse)(nil), "gitaly.SetConfigResponse")
	proto.RegisterType((*DeleteConfigRequest)(nil), "gitaly.DeleteConfigRequest")
	proto.RegisterType((*DeleteConfigResponse)(nil), "gitaly.DeleteConfigResponse")
	proto.RegisterType((*RestoreCustomHooksRequest)(nil), "gitaly.RestoreCustomHooksRequest")
	proto.RegisterType((*RestoreCustomHooksResponse)(nil), "gitaly.RestoreCustomHooksResponse")
	proto.RegisterType((*BackupCustomHooksRequest)(nil), "gitaly.BackupCustomHooksRequest")
	proto.RegisterType((*BackupCustomHooksResponse)(nil), "gitaly.BackupCustomHooksResponse")
	proto.RegisterType((*CreateRepositoryFromBundleRequest)(nil), "gitaly.CreateRepositoryFromBundleRequest")
	proto.RegisterType((*CreateRepositoryFromBundleResponse)(nil), "gitaly.CreateRepositoryFromBundleResponse")
	proto.RegisterType((*FindLicenseRequest)(nil), "gitaly.FindLicenseRequest")
	proto.RegisterType((*FindLicenseResponse)(nil), "gitaly.FindLicenseResponse")
	proto.RegisterType((*GetInfoAttributesRequest)(nil), "gitaly.GetInfoAttributesRequest")
	proto.RegisterType((*GetInfoAttributesResponse)(nil), "gitaly.GetInfoAttributesResponse")
	proto.RegisterType((*CalculateChecksumRequest)(nil), "gitaly.CalculateChecksumRequest")
	proto.RegisterType((*CalculateChecksumResponse)(nil), "gitaly.CalculateChecksumResponse")
	proto.RegisterType((*GetSnapshotRequest)(nil), "gitaly.GetSnapshotRequest")
	proto.RegisterType((*GetSnapshotResponse)(nil), "gitaly.GetSnapshotResponse")
	proto.RegisterType((*CreateRepositoryFromSnapshotRequest)(nil), "gitaly.CreateRepositoryFromSnapshotRequest")
	proto.RegisterType((*CreateRepositoryFromSnapshotResponse)(nil), "gitaly.CreateRepositoryFromSnapshotResponse")
	proto.RegisterType((*GetRawChangesRequest)(nil), "gitaly.GetRawChangesRequest")
	proto.RegisterType((*GetRawChangesResponse)(nil), "gitaly.GetRawChangesResponse")
	proto.RegisterType((*GetRawChangesResponse_RawChange)(nil), "gitaly.GetRawChangesResponse.RawChange")
	proto.RegisterType((*SearchFilesByNameRequest)(nil), "gitaly.SearchFilesByNameRequest")
	proto.RegisterType((*SearchFilesByNameResponse)(nil), "gitaly.SearchFilesByNameResponse")
	proto.RegisterType((*SearchFilesByContentRequest)(nil), "gitaly.SearchFilesByContentRequest")
	proto.RegisterType((*SearchFilesByContentResponse)(nil), "gitaly.SearchFilesByContentResponse")
	proto.RegisterEnum("gitaly.GetArchiveRequest_Format", GetArchiveRequest_Format_name, GetArchiveRequest_Format_value)
	proto.RegisterEnum("gitaly.GetRawChangesResponse_RawChange_Operation", GetRawChangesResponse_RawChange_Operation_name, GetRawChangesResponse_RawChange_Operation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RepositoryService service

type RepositoryServiceClient interface {
	RepositoryExists(ctx context.Context, in *RepositoryExistsRequest, opts ...grpc.CallOption) (*RepositoryExistsResponse, error)
	RepackIncremental(ctx context.Context, in *RepackIncrementalRequest, opts ...grpc.CallOption) (*RepackIncrementalResponse, error)
	RepackFull(ctx context.Context, in *RepackFullRequest, opts ...grpc.CallOption) (*RepackFullResponse, error)
	GarbageCollect(ctx context.Context, in *GarbageCollectRequest, opts ...grpc.CallOption) (*GarbageCollectResponse, error)
	RepositorySize(ctx context.Context, in *RepositorySizeRequest, opts ...grpc.CallOption) (*RepositorySizeResponse, error)
	ApplyGitattributes(ctx context.Context, in *ApplyGitattributesRequest, opts ...grpc.CallOption) (*ApplyGitattributesResponse, error)
	FetchRemote(ctx context.Context, in *FetchRemoteRequest, opts ...grpc.CallOption) (*FetchRemoteResponse, error)
	CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*CreateRepositoryResponse, error)
	GetArchive(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (RepositoryService_GetArchiveClient, error)
	HasLocalBranches(ctx context.Context, in *HasLocalBranchesRequest, opts ...grpc.CallOption) (*HasLocalBranchesResponse, error)
	FetchSourceBranch(ctx context.Context, in *FetchSourceBranchRequest, opts ...grpc.CallOption) (*FetchSourceBranchResponse, error)
	Fsck(ctx context.Context, in *FsckRequest, opts ...grpc.CallOption) (*FsckResponse, error)
	WriteRef(ctx context.Context, in *WriteRefRequest, opts ...grpc.CallOption) (*WriteRefResponse, error)
	FindMergeBase(ctx context.Context, in *FindMergeBaseRequest, opts ...grpc.CallOption) (*FindMergeBaseResponse, error)
	CreateFork(ctx context.Context, in *CreateForkRequest, opts ...grpc.CallOption) (*CreateForkResponse, error)
	IsRebaseInProgress(ctx context.Context, in *IsRebaseInProgressRequest, opts ...grpc.CallOption) (*IsRebaseInProgressResponse, error)
	IsSquashInProgress(ctx context.Context, in *IsSquashInProgressRequest, opts ...grpc.CallOption) (*IsSquashInProgressResponse, error)
	CreateRepositoryFromURL(ctx context.Context, in *CreateRepositoryFromURLRequest, opts ...grpc.CallOption) (*CreateRepositoryFromURLResponse, error)
	CreateBundle(ctx context.Context, in *CreateBundleRequest, opts ...grpc.CallOption) (RepositoryService_CreateBundleClient, error)
	CreateRepositoryFromBundle(ctx context.Context, opts ...grpc.CallOption) (RepositoryService_CreateRepositoryFromBundleClient, error)
	WriteConfig(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*WriteConfigResponse, error)
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error)
	FindLicense(ctx context.Context, in *FindLicenseRequest, opts ...grpc.CallOption) (*FindLicenseResponse, error)
	GetInfoAttributes(ctx context.Context, in *GetInfoAttributesRequest, opts ...grpc.CallOption) (RepositoryService_GetInfoAttributesClient, error)
	CalculateChecksum(ctx context.Context, in *CalculateChecksumRequest, opts ...grpc.CallOption) (*CalculateChecksumResponse, error)
	Cleanup(ctx context.Context, in *CleanupRequest, opts ...grpc.CallOption) (*CleanupResponse, error)
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (RepositoryService_GetSnapshotClient, error)
	CreateRepositoryFromSnapshot(ctx context.Context, in *CreateRepositoryFromSnapshotRequest, opts ...grpc.CallOption) (*CreateRepositoryFromSnapshotResponse, error)
	GetRawChanges(ctx context.Context, in *GetRawChangesRequest, opts ...grpc.CallOption) (RepositoryService_GetRawChangesClient, error)
	SearchFilesByContent(ctx context.Context, in *SearchFilesByContentRequest, opts ...grpc.CallOption) (RepositoryService_SearchFilesByContentClient, error)
	SearchFilesByName(ctx context.Context, in *SearchFilesByNameRequest, opts ...grpc.CallOption) (RepositoryService_SearchFilesByNameClient, error)
	RestoreCustomHooks(ctx context.Context, opts ...grpc.CallOption) (RepositoryService_RestoreCustomHooksClient, error)
	BackupCustomHooks(ctx context.Context, in *BackupCustomHooksRequest, opts ...grpc.CallOption) (RepositoryService_BackupCustomHooksClient, error)
}

type repositoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryServiceClient(cc *grpc.ClientConn) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

func (c *repositoryServiceClient) RepositoryExists(ctx context.Context, in *RepositoryExistsRequest, opts ...grpc.CallOption) (*RepositoryExistsResponse, error) {
	out := new(RepositoryExistsResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/RepositoryExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) RepackIncremental(ctx context.Context, in *RepackIncrementalRequest, opts ...grpc.CallOption) (*RepackIncrementalResponse, error) {
	out := new(RepackIncrementalResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/RepackIncremental", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) RepackFull(ctx context.Context, in *RepackFullRequest, opts ...grpc.CallOption) (*RepackFullResponse, error) {
	out := new(RepackFullResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/RepackFull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GarbageCollect(ctx context.Context, in *GarbageCollectRequest, opts ...grpc.CallOption) (*GarbageCollectResponse, error) {
	out := new(GarbageCollectResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/GarbageCollect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) RepositorySize(ctx context.Context, in *RepositorySizeRequest, opts ...grpc.CallOption) (*RepositorySizeResponse, error) {
	out := new(RepositorySizeResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/RepositorySize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) ApplyGitattributes(ctx context.Context, in *ApplyGitattributesRequest, opts ...grpc.CallOption) (*ApplyGitattributesResponse, error) {
	out := new(ApplyGitattributesResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/ApplyGitattributes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) FetchRemote(ctx context.Context, in *FetchRemoteRequest, opts ...grpc.CallOption) (*FetchRemoteResponse, error) {
	out := new(FetchRemoteResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/FetchRemote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*CreateRepositoryResponse, error) {
	out := new(CreateRepositoryResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/CreateRepository", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetArchive(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (RepositoryService_GetArchiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryService_serviceDesc.Streams[0], c.cc, "/gitaly.RepositoryService/GetArchive", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceGetArchiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_GetArchiveClient interface {
	Recv() (*GetArchiveResponse, error)
	grpc.ClientStream
}

type repositoryServiceGetArchiveClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceGetArchiveClient) Recv() (*GetArchiveResponse, error) {
	m := new(GetArchiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) HasLocalBranches(ctx context.Context, in *HasLocalBranchesRequest, opts ...grpc.CallOption) (*HasLocalBranchesResponse, error) {
	out := new(HasLocalBranchesResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/HasLocalBranches", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) FetchSourceBranch(ctx context.Context, in *FetchSourceBranchRequest, opts ...grpc.CallOption) (*FetchSourceBranchResponse, error) {
	out := new(FetchSourceBranchResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/FetchSourceBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) Fsck(ctx context.Context, in *FsckRequest, opts ...grpc.CallOption) (*FsckResponse, error) {
	out := new(FsckResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/Fsck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) WriteRef(ctx context.Context, in *WriteRefRequest, opts ...grpc.CallOption) (*WriteRefResponse, error) {
	out := new(WriteRefResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/WriteRef", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) FindMergeBase(ctx context.Context, in *FindMergeBaseRequest, opts ...grpc.CallOption) (*FindMergeBaseResponse, error) {
	out := new(FindMergeBaseResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/FindMergeBase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) CreateFork(ctx context.Context, in *CreateForkRequest, opts ...grpc.CallOption) (*CreateForkResponse, error) {
	out := new(CreateForkResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/CreateFork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) IsRebaseInProgress(ctx context.Context, in *IsRebaseInProgressRequest, opts ...grpc.CallOption) (*IsRebaseInProgressResponse, error) {
	out := new(IsRebaseInProgressResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/IsRebaseInProgress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) IsSquashInProgress(ctx context.Context, in *IsSquashInProgressRequest, opts ...grpc.CallOption) (*IsSquashInProgressResponse, error) {
	out := new(IsSquashInProgressResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/IsSquashInProgress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) CreateRepositoryFromURL(ctx context.Context, in *CreateRepositoryFromURLRequest, opts ...grpc.CallOption) (*CreateRepositoryFromURLResponse, error) {
	out := new(CreateRepositoryFromURLResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/CreateRepositoryFromURL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) CreateBundle(ctx context.Context, in *CreateBundleRequest, opts ...grpc.CallOption) (RepositoryService_CreateBundleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryService_serviceDesc.Streams[1], c.cc, "/gitaly.RepositoryService/CreateBundle", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceCreateBundleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_CreateBundleClient interface {
	Recv() (*CreateBundleResponse, error)
	grpc.ClientStream
}

type repositoryServiceCreateBundleClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceCreateBundleClient) Recv() (*CreateBundleResponse, error) {
	m := new(CreateBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) CreateRepositoryFromBundle(ctx context.Context, opts ...grpc.CallOption) (RepositoryService_CreateRepositoryFromBundleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryService_serviceDesc.Streams[2], c.cc, "/gitaly.RepositoryService/CreateRepositoryFromBundle", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceCreateRepositoryFromBundleClient{stream}
	return x, nil
}

type RepositoryService_CreateRepositoryFromBundleClient interface {
	Send(*CreateRepositoryFromBundleRequest) error
	CloseAndRecv() (*CreateRepositoryFromBundleResponse, error)
	grpc.ClientStream
}

type repositoryServiceCreateRepositoryFromBundleClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceCreateRepositoryFromBundleClient) Send(m *CreateRepositoryFromBundleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *repositoryServiceCreateRepositoryFromBundleClient) CloseAndRecv() (*CreateRepositoryFromBundleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateRepositoryFromBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) WriteConfig(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*WriteConfigResponse, error) {
	out := new(WriteConfigResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/WriteConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/SetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error) {
	out := new(DeleteConfigResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/DeleteConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) FindLicense(ctx context.Context, in *FindLicenseRequest, opts ...grpc.CallOption) (*FindLicenseResponse, error) {
	out := new(FindLicenseResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/FindLicense", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetInfoAttributes(ctx context.Context, in *GetInfoAttributesRequest, opts ...grpc.CallOption) (RepositoryService_GetInfoAttributesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryService_serviceDesc.Streams[3], c.cc, "/gitaly.RepositoryService/GetInfoAttributes", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceGetInfoAttributesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_GetInfoAttributesClient interface {
	Recv() (*GetInfoAttributesResponse, error)
	grpc.ClientStream
}

type repositoryServiceGetInfoAttributesClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceGetInfoAttributesClient) Recv() (*GetInfoAttributesResponse, error) {
	m := new(GetInfoAttributesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) CalculateChecksum(ctx context.Context, in *CalculateChecksumRequest, opts ...grpc.CallOption) (*CalculateChecksumResponse, error) {
	out := new(CalculateChecksumResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/CalculateChecksum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) Cleanup(ctx context.Context, in *CleanupRequest, opts ...grpc.CallOption) (*CleanupResponse, error) {
	out := new(CleanupResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/Cleanup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (RepositoryService_GetSnapshotClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryService_serviceDesc.Streams[4], c.cc, "/gitaly.RepositoryService/GetSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceGetSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_GetSnapshotClient interface {
	Recv() (*GetSnapshotResponse, error)
	grpc.ClientStream
}

type repositoryServiceGetSnapshotClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceGetSnapshotClient) Recv() (*GetSnapshotResponse, error) {
	m := new(GetSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) CreateRepositoryFromSnapshot(ctx context.Context, in *CreateRepositoryFromSnapshotRequest, opts ...grpc.CallOption) (*CreateRepositoryFromSnapshotResponse, error) {
	out := new(CreateRepositoryFromSnapshotResponse)
	err := grpc.Invoke(ctx, "/gitaly.RepositoryService/CreateRepositoryFromSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetRawChanges(ctx context.Context, in *GetRawChangesRequest, opts ...grpc.CallOption) (RepositoryService_GetRawChangesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryService_serviceDesc.Streams[5], c.cc, "/gitaly.RepositoryService/GetRawChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceGetRawChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_GetRawChangesClient interface {
	Recv() (*GetRawChangesResponse, error)
	grpc.ClientStream
}

type repositoryServiceGetRawChangesClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceGetRawChangesClient) Recv() (*GetRawChangesResponse, error) {
	m := new(GetRawChangesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) SearchFilesByContent(ctx context.Context, in *SearchFilesByContentRequest, opts ...grpc.CallOption) (RepositoryService_SearchFilesByContentClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryService_serviceDesc.Streams[6], c.cc, "/gitaly.RepositoryService/SearchFilesByContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceSearchFilesByContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_SearchFilesByContentClient interface {
	Recv() (*SearchFilesByContentResponse, error)
	grpc.ClientStream
}

type repositoryServiceSearchFilesByContentClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceSearchFilesByContentClient) Recv() (*SearchFilesByContentResponse, error) {
	m := new(SearchFilesByContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) SearchFilesByName(ctx context.Context, in *SearchFilesByNameRequest, opts ...grpc.CallOption) (RepositoryService_SearchFilesByNameClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryService_serviceDesc.Streams[7], c.cc, "/gitaly.RepositoryService/SearchFilesByName", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceSearchFilesByNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_SearchFilesByNameClient interface {
	Recv() (*SearchFilesByNameResponse, error)
	grpc.ClientStream
}

type repositoryServiceSearchFilesByNameClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceSearchFilesByNameClient) Recv() (*SearchFilesByNameResponse, error) {
	m := new(SearchFilesByNameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) RestoreCustomHooks(ctx context.Context, opts ...grpc.CallOption) (RepositoryService_RestoreCustomHooksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryService_serviceDesc.Streams[8], c.cc, "/gitaly.RepositoryService/RestoreCustomHooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceRestoreCustomHooksClient{stream}
	return x, nil
}

type RepositoryService_RestoreCustomHooksClient interface {
	Send(*RestoreCustomHooksRequest) error
	CloseAndRecv() (*RestoreCustomHooksResponse, error)
	grpc.ClientStream
}

type repositoryServiceRestoreCustomHooksClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceRestoreCustomHooksClient) Send(m *RestoreCustomHooksRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *repositoryServiceRestoreCustomHooksClient) CloseAndRecv() (*RestoreCustomHooksResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RestoreCustomHooksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) BackupCustomHooks(ctx context.Context, in *BackupCustomHooksRequest, opts ...grpc.CallOption) (RepositoryService_BackupCustomHooksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryService_serviceDesc.Streams[9], c.cc, "/gitaly.RepositoryService/BackupCustomHooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceBackupCustomHooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_BackupCustomHooksClient interface {
	Recv() (*BackupCustomHooksResponse, error)
	grpc.ClientStream
}

type repositoryServiceBackupCustomHooksClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceBackupCustomHooksClient) Recv() (*BackupCustomHooksResponse, error) {
	m := new(BackupCustomHooksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RepositoryService service

type RepositoryServiceServer interface {
	RepositoryExists(context.Context, *RepositoryExistsRequest) (*RepositoryExistsResponse, error)
	RepackIncremental(context.Context, *RepackIncrementalRequest) (*RepackIncrementalResponse, error)
	RepackFull(context.Context, *RepackFullRequest) (*RepackFullResponse, error)
	GarbageCollect(context.Context, *GarbageCollectRequest) (*GarbageCollectResponse, error)
	RepositorySize(context.Context, *RepositorySizeRequest) (*RepositorySizeResponse, error)
	ApplyGitattributes(context.Context, *ApplyGitattributesRequest) (*ApplyGitattributesResponse, error)
	FetchRemote(context.Context, *FetchRemoteRequest) (*FetchRemoteResponse, error)
	CreateRepository(context.Context, *CreateRepositoryRequest) (*CreateRepositoryResponse, error)
	GetArchive(*GetArchiveRequest, RepositoryService_GetArchiveServer) error
	HasLocalBranches(context.Context, *HasLocalBranchesRequest) (*HasLocalBranchesResponse, error)
	FetchSourceBranch(context.Context, *FetchSourceBranchRequest) (*FetchSourceBranchResponse, error)
	Fsck(context.Context, *FsckRequest) (*FsckResponse, error)
	WriteRef(context.Context, *WriteRefRequest) (*WriteRefResponse, error)
	FindMergeBase(context.Context, *FindMergeBaseRequest) (*FindMergeBaseResponse, error)
	CreateFork(context.Context, *CreateForkRequest) (*CreateForkResponse, error)
	IsRebaseInProgress(context.Context, *IsRebaseInProgressRequest) (*IsRebaseInProgressResponse, error)
	IsSquashInProgress(context.Context, *IsSquashInProgressRequest) (*IsSquashInProgressResponse, error)
	CreateRepositoryFromURL(context.Context, *CreateRepositoryFromURLRequest) (*CreateRepositoryFromURLResponse, error)
	CreateBundle(*CreateBundleRequest, RepositoryService_CreateBundleServer) error
	CreateRepositoryFromBundle(RepositoryService_CreateRepositoryFromBundleServer) error
	WriteConfig(context.Context, *WriteConfigRequest) (*WriteConfigResponse, error)
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error)
	FindLicense(context.Context, *FindLicenseRequest) (*FindLicenseResponse, error)
	GetInfoAttributes(*GetInfoAttributesRequest, RepositoryService_GetInfoAttributesServer) error
	CalculateChecksum(context.Context, *CalculateChecksumRequest) (*CalculateChecksumResponse, error)
	Cleanup(context.Context, *CleanupRequest) (*CleanupResponse, error)
	GetSnapshot(*GetSnapshotRequest, RepositoryService_GetSnapshotServer) error
	CreateRepositoryFromSnapshot(context.Context, *CreateRepositoryFromSnapshotRequest) (*CreateRepositoryFromSnapshotResponse, error)
	GetRawChanges(*GetRawChangesRequest, RepositoryService_GetRawChangesServer) error
	SearchFilesByContent(*SearchFilesByContentRequest, RepositoryService_SearchFilesByContentServer) error
	SearchFilesByName(*SearchFilesByNameRequest, RepositoryService_SearchFilesByNameServer) error
	RestoreCustomHooks(RepositoryService_RestoreCustomHooksServer) error
	BackupCustomHooks(*BackupCustomHooksRequest, RepositoryService_BackupCustomHooksServer) error
}

func RegisterRepositoryServiceServer(s *grpc.Server, srv RepositoryServiceServer) {
	s.RegisterService(&_RepositoryService_serviceDesc, srv)
}

func _RepositoryService_RepositoryExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).RepositoryExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/RepositoryExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).RepositoryExists(ctx, req.(*RepositoryExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_RepackIncremental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepackIncrementalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).RepackIncremental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/RepackIncremental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).RepackIncremental(ctx, req.(*RepackIncrementalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_RepackFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepackFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).RepackFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/RepackFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).RepackFull(ctx, req.(*RepackFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GarbageCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GarbageCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GarbageCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/GarbageCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GarbageCollect(ctx, req.(*GarbageCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_RepositorySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositorySizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).RepositorySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/RepositorySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).RepositorySize(ctx, req.(*RepositorySizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_ApplyGitattributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyGitattributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ApplyGitattributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/ApplyGitattributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ApplyGitattributes(ctx, req.(*ApplyGitattributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_FetchRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).FetchRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/FetchRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).FetchRemote(ctx, req.(*FetchRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).CreateRepository(ctx, req.(*CreateRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetArchive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetArchiveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).GetArchive(m, &repositoryServiceGetArchiveServer{stream})
}

type RepositoryService_GetArchiveServer interface {
	Send(*GetArchiveResponse) error
	grpc.ServerStream
}

type repositoryServiceGetArchiveServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceGetArchiveServer) Send(m *GetArchiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_HasLocalBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasLocalBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).HasLocalBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/HasLocalBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).HasLocalBranches(ctx, req.(*HasLocalBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_FetchSourceBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSourceBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).FetchSourceBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/FetchSourceBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).FetchSourceBranch(ctx, req.(*FetchSourceBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Fsck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Fsck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/Fsck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Fsck(ctx, req.(*FsckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_WriteRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).WriteRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/WriteRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).WriteRef(ctx, req.(*WriteRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_FindMergeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMergeBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).FindMergeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/FindMergeBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).FindMergeBase(ctx, req.(*FindMergeBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_CreateFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).CreateFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/CreateFork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).CreateFork(ctx, req.(*CreateForkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_IsRebaseInProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRebaseInProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).IsRebaseInProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/IsRebaseInProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).IsRebaseInProgress(ctx, req.(*IsRebaseInProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_IsSquashInProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSquashInProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).IsSquashInProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/IsSquashInProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).IsSquashInProgress(ctx, req.(*IsSquashInProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_CreateRepositoryFromURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryFromURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).CreateRepositoryFromURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/CreateRepositoryFromURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).CreateRepositoryFromURL(ctx, req.(*CreateRepositoryFromURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_CreateBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateBundleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).CreateBundle(m, &repositoryServiceCreateBundleServer{stream})
}

type RepositoryService_CreateBundleServer interface {
	Send(*CreateBundleResponse) error
	grpc.ServerStream
}

type repositoryServiceCreateBundleServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceCreateBundleServer) Send(m *CreateBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_CreateRepositoryFromBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RepositoryServiceServer).CreateRepositoryFromBundle(&repositoryServiceCreateRepositoryFromBundleServer{stream})
}

type RepositoryService_CreateRepositoryFromBundleServer interface {
	SendAndClose(*CreateRepositoryFromBundleResponse) error
	Recv() (*CreateRepositoryFromBundleRequest, error)
	grpc.ServerStream
}

type repositoryServiceCreateRepositoryFromBundleServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceCreateRepositoryFromBundleServer) SendAndClose(m *CreateRepositoryFromBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *repositoryServiceCreateRepositoryFromBundleServer) Recv() (*CreateRepositoryFromBundleRequest, error) {
	m := new(CreateRepositoryFromBundleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RepositoryService_WriteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).WriteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/WriteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).WriteConfig(ctx, req.(*WriteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_FindLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).FindLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/FindLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).FindLicense(ctx, req.(*FindLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetInfoAttributes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetInfoAttributesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).GetInfoAttributes(m, &repositoryServiceGetInfoAttributesServer{stream})
}

type RepositoryService_GetInfoAttributesServer interface {
	Send(*GetInfoAttributesResponse) error
	grpc.ServerStream
}

type repositoryServiceGetInfoAttributesServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceGetInfoAttributesServer) Send(m *GetInfoAttributesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_CalculateChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).CalculateChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/CalculateChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).CalculateChecksum(ctx, req.(*CalculateChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/Cleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Cleanup(ctx, req.(*CleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSnapshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).GetSnapshot(m, &repositoryServiceGetSnapshotServer{stream})
}

type RepositoryService_GetSnapshotServer interface {
	Send(*GetSnapshotResponse) error
	grpc.ServerStream
}

type repositoryServiceGetSnapshotServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceGetSnapshotServer) Send(m *GetSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_CreateRepositoryFromSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryFromSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).CreateRepositoryFromSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RepositoryService/CreateRepositoryFromSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).CreateRepositoryFromSnapshot(ctx, req.(*CreateRepositoryFromSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetRawChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRawChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).GetRawChanges(m, &repositoryServiceGetRawChangesServer{stream})
}

type RepositoryService_GetRawChangesServer interface {
	Send(*GetRawChangesResponse) error
	grpc.ServerStream
}

type repositoryServiceGetRawChangesServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceGetRawChangesServer) Send(m *GetRawChangesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_SearchFilesByContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchFilesByContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).SearchFilesByContent(m, &repositoryServiceSearchFilesByContentServer{stream})
}

type RepositoryService_SearchFilesByContentServer interface {
	Send(*SearchFilesByContentResponse) error
	grpc.ServerStream
}

type repositoryServiceSearchFilesByContentServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceSearchFilesByContentServer) Send(m *SearchFilesByContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_SearchFilesByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchFilesByNameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).SearchFilesByName(m, &repositoryServiceSearchFilesByNameServer{stream})
}

type RepositoryService_SearchFilesByNameServer interface {
	Send(*SearchFilesByNameResponse) error
	grpc.ServerStream
}

type repositoryServiceSearchFilesByNameServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceSearchFilesByNameServer) Send(m *SearchFilesByNameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_RestoreCustomHooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RepositoryServiceServer).RestoreCustomHooks(&repositoryServiceRestoreCustomHooksServer{stream})
}

type RepositoryService_RestoreCustomHooksServer interface {
	SendAndClose(*RestoreCustomHooksResponse) error
	Recv() (*RestoreCustomHooksRequest, error)
	grpc.ServerStream
}

type repositoryServiceRestoreCustomHooksServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceRestoreCustomHooksServer) SendAndClose(m *RestoreCustomHooksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *repositoryServiceRestoreCustomHooksServer) Recv() (*RestoreCustomHooksRequest, error) {
	m := new(RestoreCustomHooksRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RepositoryService_BackupCustomHooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BackupCustomHooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).BackupCustomHooks(m, &repositoryServiceBackupCustomHooksServer{stream})
}

type RepositoryService_BackupCustomHooksServer interface {
	Send(*BackupCustomHooksResponse) error
	grpc.ServerStream
}

type repositoryServiceBackupCustomHooksServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceBackupCustomHooksServer) Send(m *BackupCustomHooksResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RepositoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RepositoryExists",
			Handler:    _RepositoryService_RepositoryExists_Handler,
		},
		{
			MethodName: "RepackIncremental",
			Handler:    _RepositoryService_RepackIncremental_Handler,
		},
		{
			MethodName: "RepackFull",
			Handler:    _RepositoryService_RepackFull_Handler,
		},
		{
			MethodName: "GarbageCollect",
			Handler:    _RepositoryService_GarbageCollect_Handler,
		},
		{
			MethodName: "RepositorySize",
			Handler:    _RepositoryService_RepositorySize_Handler,
		},
		{
			MethodName: "ApplyGitattributes",
			Handler:    _RepositoryService_ApplyGitattributes_Handler,
		},
		{
			MethodName: "FetchRemote",
			Handler:    _RepositoryService_FetchRemote_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _RepositoryService_CreateRepository_Handler,
		},
		{
			MethodName: "HasLocalBranches",
			Handler:    _RepositoryService_HasLocalBranches_Handler,
		},
		{
			MethodName: "FetchSourceBranch",
			Handler:    _RepositoryService_FetchSourceBranch_Handler,
		},
		{
			MethodName: "Fsck",
			Handler:    _RepositoryService_Fsck_Handler,
		},
		{
			MethodName: "WriteRef",
			Handler:    _RepositoryService_WriteRef_Handler,
		},
		{
			MethodName: "FindMergeBase",
			Handler:    _RepositoryService_FindMergeBase_Handler,
		},
		{
			MethodName: "CreateFork",
			Handler:    _RepositoryService_CreateFork_Handler,
		},
		{
			MethodName: "IsRebaseInProgress",
			Handler:    _RepositoryService_IsRebaseInProgress_Handler,
		},
		{
			MethodName: "IsSquashInProgress",
			Handler:    _RepositoryService_IsSquashInProgress_Handler,
		},
		{
			MethodName: "CreateRepositoryFromURL",
			Handler:    _RepositoryService_CreateRepositoryFromURL_Handler,
		},
		{
			MethodName: "WriteConfig",
			Handler:    _RepositoryService_WriteConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _RepositoryService_SetConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _RepositoryService_DeleteConfig_Handler,
		},
		{
			MethodName: "FindLicense",
			Handler:    _RepositoryService_FindLicense_Handler,
		},
		{
			MethodName: "CalculateChecksum",
			Handler:    _RepositoryService_CalculateChecksum_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _RepositoryService_Cleanup_Handler,
		},
		{
			MethodName: "CreateRepositoryFromSnapshot",
			Handler:    _RepositoryService_CreateRepositoryFromSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetArchive",
			Handler:       _RepositoryService_GetArchive_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateBundle",
			Handler:       _RepositoryService_CreateBundle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateRepositoryFromBundle",
			Handler:       _RepositoryService_CreateRepositoryFromBundle_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetInfoAttributes",
			Handler:       _RepositoryService_GetInfoAttributes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSnapshot",
			Handler:       _RepositoryService_GetSnapshot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRawChanges",
			Handler:       _RepositoryService_GetRawChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchFilesByContent",
			Handler:       _RepositoryService_SearchFilesByContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchFilesByName",
			Handler:       _RepositoryService_SearchFilesByName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RestoreCustomHooks",
			Handler:       _RepositoryService_RestoreCustomHooks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BackupCustomHooks",
			Handler:       _RepositoryService_BackupCustomHooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "repository-service.proto",
}

func init() { proto.RegisterFile("repository-service.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 2419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0xef, 0x6e, 0xdb, 0xc8,
	0x11, 0x97, 0x6c, 0xcb, 0x92, 0x46, 0x4a, 0x22, 0xaf, 0x1d, 0x47, 0x66, 0x9c, 0xd8, 0x61, 0x82,
	0xbb, 0xe4, 0x92, 0xba, 0x77, 0xce, 0x87, 0x1e, 0xd0, 0x16, 0x07, 0x5b, 0x92, 0x6d, 0x25, 0xf1,
	0x9f, 0xd2, 0x09, 0x82, 0x06, 0x17, 0x10, 0x34, 0xb5, 0xb2, 0x08, 0x51, 0x5c, 0x65, 0xb9, 0x8a,
	0xcf, 0xd7, 0xaf, 0x3d, 0xe0, 0x3e, 0xb6, 0xef, 0xd0, 0x27, 0xe8, 0xab, 0xf4, 0x29, 0x8a, 0x7e,
	0xe9, 0x23, 0x14, 0xbb, 0x4b, 0x71, 0x49, 0x91, 0x54, 0x03, 0x30, 0xed, 0x7d, 0xe3, 0xce, 0xec,
	0xce, 0xcc, 0xce, 0xcc, 0xce, 0xee, 0xfc, 0x24, 0x68, 0x52, 0x3c, 0x26, 0xbe, 0xc3, 0x08, 0xbd,
	0xfe, 0x95, 0x8f, 0xe9, 0x47, 0xc7, 0xc6, 0x3b, 0x63, 0x4a, 0x18, 0x41, 0xcb, 0x97, 0x0e, 0xb3,
	0xdc, 0x6b, 0xad, 0xee, 0x0f, 0x2c, 0x8a, 0x7b, 0x92, 0xaa, 0x1f, 0xc3, 0x1d, 0x23, 0x5c, 0xd1,
	0xf9, 0xc1, 0xf1, 0x99, 0x6f, 0xe0, 0x0f, 0x13, 0xec, 0x33, 0xb4, 0x0b, 0xa0, 0x84, 0x35, 0x8b,
	0xdb, 0xc5, 0xc7, 0xb5, 0x5d, 0xb4, 0x23, 0xa5, 0xec, 0xa8, 0x45, 0x46, 0x64, 0x96, 0xbe, 0x0b,
	0xcd, 0xa4, 0x38, 0x7f, 0x4c, 0x3c, 0x1f, 0xa3, 0x75, 0x58, 0xc6, 0x82, 0x22, 0x64, 0x55, 0x8c,
	0x60, 0xa4, 0x9f, 0x88, 0x35, 0x96, 0x3d, 0xec, 0x7a, 0x36, 0xc5, 0x23, 0xec, 0x31, 0xcb, 0xcd,
	0x63, 0xc3, 0x5d, 0xd8, 0x48, 0x91, 0x27, 0x8d, 0xd0, 0x5d, 0x58, 0x91, 0xcc, 0x83, 0x89, 0x9b,
	0x47, 0x0b, 0x7a, 0x08, 0x37, 0x6c, 0x8a, 0x2d, 0x86, 0xcd, 0x0b, 0x87, 0x8d, 0xac, 0x71, 0x73,
	0x41, 0x6c, 0xaa, 0x2e, 0x89, 0xfb, 0x82, 0xa6, 0xaf, 0x01, 0x8a, 0x6a, 0x0b, 0x6c, 0x18, 0xc3,
	0xed, 0x43, 0x8b, 0x5e, 0x58, 0x97, 0xb8, 0x45, 0x5c, 0x17, 0xdb, 0xec, 0x7f, 0x6e, 0x47, 0x13,
	0xd6, 0x67, 0x35, 0x06, 0xb6, 0xb4, 0xe1, 0x66, 0xcb, 0xc5, 0x96, 0x37, 0x19, 0xe7, 0x71, 0xf9,
	0x0a, 0xdc, 0x0a, 0xa5, 0x04, 0x82, 0x5f, 0xc2, 0x6d, 0x35, 0xf9, 0xdc, 0xf9, 0x11, 0xe7, 0x91,
	0xff, 0x0c, 0xd6, 0x67, 0x85, 0x05, 0x49, 0x85, 0x60, 0xc9, 0x77, 0x7e, 0xc4, 0x42, 0xce, 0xa2,
	0x21, 0xbe, 0xf5, 0x21, 0x6c, 0xec, 0x8d, 0xc7, 0xee, 0xf5, 0xa1, 0xc3, 0x2c, 0xc6, 0xa8, 0x73,
	0x31, 0x61, 0x38, 0x4f, 0x56, 0x23, 0x0d, 0x2a, 0x14, 0x7f, 0x74, 0x7c, 0x87, 0x78, 0xc2, 0xbd,
	0x75, 0x23, 0x1c, 0xeb, 0x9b, 0xa0, 0xa5, 0x29, 0x0b, 0xbc, 0xf0, 0xe7, 0x05, 0x40, 0x07, 0x98,
	0xd9, 0x03, 0x03, 0x8f, 0x08, 0xcb, 0xe3, 0x03, 0x7e, 0x7c, 0xa8, 0x10, 0x22, 0x4c, 0xa8, 0x1a,
	0xc1, 0x08, 0xad, 0x41, 0xa9, 0x4f, 0xa8, 0x8d, 0x9b, 0x8b, 0x22, 0xf0, 0x72, 0x80, 0xee, 0x40,
	0xd9, 0x23, 0x26, 0xb3, 0x2e, 0xfd, 0xe6, 0x92, 0x3c, 0x6d, 0x1e, 0x79, 0x6d, 0x5d, 0xfa, 0xa8,
	0x09, 0x65, 0xe6, 0x8c, 0x30, 0x99, 0xb0, 0x66, 0x69, 0xbb, 0xf8, 0xb8, 0x64, 0x4c, 0x87, 0x7c,
	0x89, 0xef, 0x0f, 0xcc, 0x21, 0xbe, 0x6e, 0x2e, 0x4b, 0x0d, 0xbe, 0x3f, 0x78, 0x89, 0xaf, 0xd1,
	0x16, 0xd4, 0x86, 0x1e, 0xb9, 0xf2, 0xcc, 0x01, 0xe1, 0xa7, 0xb7, 0x2c, 0x98, 0x20, 0x48, 0x47,
	0x9c, 0x82, 0x36, 0xa0, 0xe2, 0x11, 0x73, 0x4c, 0x27, 0x1e, 0x6e, 0x56, 0x85, 0xb6, 0xb2, 0x47,
	0xce, 0xf8, 0xf0, 0xc5, 0x52, 0xa5, 0xd2, 0xa8, 0xea, 0xb7, 0x61, 0x35, 0xe6, 0x85, 0xc0, 0x3b,
	0xc7, 0x70, 0xa7, 0x25, 0xd2, 0x34, 0xb2, 0xe5, 0x1c, 0x59, 0xa2, 0x41, 0x33, 0x29, 0x2e, 0x50,
	0xf5, 0xaf, 0x22, 0xac, 0x1c, 0x62, 0xb6, 0x47, 0xed, 0x81, 0xf3, 0x31, 0x57, 0x1c, 0xee, 0x42,
	0xd5, 0x26, 0xa3, 0x91, 0xc3, 0x4c, 0xa7, 0x17, 0x84, 0xa2, 0x22, 0x09, 0xdd, 0x1e, 0x0f, 0xd2,
	0x98, 0xe2, 0xbe, 0xf3, 0x83, 0x88, 0x46, 0xd5, 0x08, 0x46, 0xe8, 0x5b, 0x58, 0xee, 0x13, 0x3a,
	0xb2, 0x98, 0x88, 0xc6, 0xcd, 0xdd, 0xed, 0xa9, 0x92, 0x84, 0x4d, 0x3b, 0x07, 0x62, 0x9e, 0x11,
	0xcc, 0xd7, 0x9f, 0xc3, 0xb2, 0xa4, 0xa0, 0x32, 0x2c, 0xbe, 0xeb, 0x9e, 0x35, 0x0a, 0xfc, 0xe3,
	0xf5, 0x9e, 0xd1, 0x28, 0x22, 0x80, 0xe5, 0xd7, 0x7b, 0x86, 0x79, 0xf8, 0xae, 0xb1, 0x80, 0x6a,
	0x50, 0xe6, 0xdf, 0xfb, 0xef, 0x76, 0x1b, 0x8b, 0xfa, 0x63, 0x40, 0x51, 0xc1, 0xea, 0xac, 0xf4,
	0x2c, 0x66, 0x89, 0x7d, 0xd6, 0x0d, 0xf1, 0xcd, 0x43, 0x70, 0x64, 0xf9, 0xaf, 0x88, 0x6d, 0xb9,
	0xfb, 0xd4, 0xf2, 0xec, 0x41, 0xae, 0x93, 0xa2, 0x7f, 0x0d, 0xcd, 0xa4, 0xb8, 0x40, 0xfd, 0x1a,
	0x94, 0x3e, 0x5a, 0xee, 0x04, 0x07, 0xe5, 0x5f, 0x0e, 0xf4, 0x7f, 0x14, 0xa1, 0x29, 0x72, 0xe3,
	0x9c, 0x4c, 0xa8, 0x8d, 0xe5, 0xaa, 0x3c, 0xf1, 0xf9, 0x0e, 0x56, 0x7c, 0x21, 0xca, 0x8c, 0x2c,
	0x5d, 0xc8, 0x5c, 0xda, 0x90, 0x93, 0x8d, 0x58, 0x45, 0x0d, 0x04, 0x5c, 0x08, 0x63, 0x44, 0x28,
	0xeb, 0x46, 0xdd, 0x8f, 0x18, 0x88, 0xee, 0x01, 0x30, 0x8b, 0x5e, 0x62, 0x66, 0x52, 0xdc, 0x17,
	0x41, 0xad, 0x1b, 0x55, 0x49, 0x31, 0x70, 0x5f, 0x7f, 0x0e, 0x1b, 0x29, 0x9b, 0x52, 0x17, 0x21,
	0xc5, 0xfe, 0xc4, 0x65, 0xd3, 0x8b, 0x50, 0x8e, 0xf4, 0x3d, 0xa8, 0x1d, 0xf8, 0xf6, 0x30, 0x8f,
	0xff, 0x1f, 0x41, 0x5d, 0x8a, 0x50, 0x3e, 0xc7, 0x94, 0x12, 0x1a, 0xc4, 0x5c, 0x0e, 0xf4, 0xbf,
	0x17, 0xe1, 0xd6, 0x5b, 0xea, 0xf0, 0x83, 0xd2, 0xcf, 0xe3, 0xea, 0x06, 0x2c, 0xf2, 0xdd, 0xcb,
	0x92, 0xc8, 0x3f, 0x63, 0x95, 0x72, 0x31, 0x5e, 0x29, 0xd1, 0x03, 0xa8, 0x13, 0xb7, 0x67, 0x86,
	0x7c, 0xe9, 0xb4, 0x1a, 0x71, 0x7b, 0xc6, 0x74, 0x4a, 0x58, 0xcb, 0x4a, 0x91, 0x5a, 0xf6, 0x62,
	0xa9, 0xb2, 0xdc, 0x28, 0xeb, 0x4d, 0x68, 0x28, 0x9b, 0xe5, 0xf6, 0x5e, 0x2c, 0x55, 0x8a, 0x8d,
	0x05, 0x7d, 0x00, 0x6b, 0x07, 0x8e, 0xd7, 0x3b, 0xc6, 0xf4, 0x12, 0xef, 0x5b, 0x7e, 0xae, 0xd3,
	0xbd, 0x09, 0xd5, 0xa9, 0x81, 0x7e, 0x73, 0x61, 0x7b, 0x91, 0x87, 0x35, 0x24, 0xe8, 0x4f, 0xe1,
	0xf6, 0x8c, 0x26, 0x75, 0xb4, 0x2e, 0x2c, 0x5f, 0xa6, 0x76, 0xd5, 0x10, 0xdf, 0xfa, 0xcf, 0x45,
	0x58, 0x91, 0xf5, 0xe8, 0x80, 0xd0, 0xe1, 0x2f, 0x99, 0xd2, 0xfc, 0x1d, 0x12, 0xb5, 0x24, 0x7c,
	0x0b, 0x6d, 0x74, 0x7d, 0x03, 0x73, 0x63, 0xbb, 0xde, 0x19, 0x25, 0x97, 0x14, 0xfb, 0x7e, 0xce,
	0xd2, 0x48, 0x85, 0xb8, 0x48, 0x69, 0x94, 0x84, 0x6e, 0x4f, 0xff, 0x3d, 0x68, 0x69, 0xda, 0x02,
	0x07, 0x6e, 0x41, 0xcd, 0xf1, 0xcc, 0x71, 0x40, 0x0e, 0x0e, 0x06, 0x38, 0xe1, 0x44, 0x69, 0xec,
	0xf9, 0x87, 0x89, 0xe5, 0x0f, 0x3e, 0x9b, 0xb1, 0xbe, 0x10, 0x17, 0x31, 0x56, 0x12, 0xa6, 0xc6,
	0x26, 0xb5, 0x7d, 0xaa, 0xb1, 0x7d, 0xb8, 0x3f, 0x7b, 0x13, 0x1d, 0x50, 0x32, 0x7a, 0x63, 0xbc,
	0xca, 0x79, 0xdc, 0x26, 0xd4, 0x0d, 0x6c, 0xe5, 0x9f, 0xfa, 0x03, 0xd8, 0xca, 0xd4, 0x13, 0x04,
	0xb9, 0x0b, 0xab, 0x72, 0xca, 0xfe, 0xc4, 0xeb, 0xb9, 0xb9, 0x5e, 0x61, 0x5f, 0xc1, 0x5a, 0x5c,
	0xd4, 0x9c, 0x7b, 0x05, 0x03, 0x12, 0xa7, 0xb5, 0x45, 0xbc, 0xbe, 0x73, 0x99, 0x33, 0x4e, 0xfd,
	0x89, 0xeb, 0x9a, 0x63, 0x8b, 0x0d, 0xa6, 0x71, 0xe2, 0x84, 0x33, 0x8b, 0x0d, 0xf4, 0xa7, 0xb0,
	0x1a, 0x53, 0x33, 0xb7, 0xec, 0xfd, 0xbc, 0x00, 0x8d, 0x73, 0xcc, 0xf2, 0x9b, 0xf4, 0x2d, 0x94,
	0xb1, 0xc7, 0xa8, 0x83, 0x65, 0x89, 0xa8, 0xed, 0xde, 0x9f, 0x2e, 0x98, 0x15, 0xbf, 0xd3, 0xf1,
	0x18, 0xbd, 0x36, 0xa6, 0xd3, 0xb5, 0x9f, 0x8a, 0x50, 0x12, 0x24, 0x1e, 0x4c, 0xfe, 0xd2, 0x92,
	0x05, 0x83, 0x7f, 0xa2, 0x7b, 0x50, 0x15, 0x57, 0xa2, 0xe9, 0x33, 0x2a, 0x37, 0x7a, 0x54, 0x30,
	0x2a, 0x82, 0x74, 0xce, 0x28, 0x7a, 0x00, 0x35, 0xc9, 0x76, 0x3c, 0xf6, 0x7c, 0x57, 0x54, 0xd7,
	0xd2, 0x51, 0xc1, 0x00, 0x41, 0xec, 0x72, 0x1a, 0xda, 0x02, 0x39, 0x32, 0x2f, 0x08, 0x71, 0xe5,
	0xbb, 0xef, 0xa8, 0x60, 0x48, 0xa9, 0xfb, 0x84, 0xb8, 0xfb, 0xe5, 0xe0, 0x0a, 0xd6, 0x57, 0x61,
	0x25, 0x62, 0x6a, 0x90, 0x2a, 0xef, 0x61, 0xb5, 0x8d, 0x5d, 0xfc, 0x39, 0x82, 0x86, 0x60, 0x69,
	0x88, 0xaf, 0xa5, 0x7b, 0xaa, 0x86, 0xf8, 0xd6, 0xd7, 0x61, 0x2d, 0x2e, 0x3e, 0x50, 0x6b, 0xf3,
	0x7e, 0xcd, 0x67, 0x84, 0xe2, 0xd6, 0xc4, 0x67, 0x64, 0x74, 0x44, 0xc8, 0xd0, 0xcf, 0xa9, 0x5c,
	0xe4, 0xe3, 0x42, 0x24, 0x1f, 0x37, 0x41, 0x4b, 0x53, 0x12, 0x98, 0x70, 0x02, 0xcd, 0x7d, 0xcb,
	0x1e, 0x4e, 0xc6, 0x9f, 0xc7, 0x02, 0xfd, 0xd7, 0xb0, 0x91, 0x22, 0x6f, 0xce, 0x71, 0x19, 0xc2,
	0x83, 0xb4, 0x83, 0x9c, 0xfb, 0xcc, 0xa6, 0xfa, 0xe2, 0x11, 0xe8, 0xf3, 0x94, 0x05, 0x3e, 0x39,
	0x02, 0xc4, 0xef, 0xba, 0x57, 0x8e, 0x8d, 0xbd, 0x5c, 0x77, 0xaa, 0xde, 0x82, 0xd5, 0x98, 0xa4,
	0xc0, 0x0f, 0xcf, 0x00, 0xb9, 0x92, 0x64, 0xfa, 0x03, 0x42, 0x99, 0xe9, 0x59, 0xa3, 0xe9, 0x0d,
	0xda, 0x08, 0x38, 0xe7, 0x9c, 0x71, 0x62, 0x8d, 0x44, 0x88, 0x0e, 0x31, 0xeb, 0x7a, 0x7d, 0xb2,
	0xf7, 0x39, 0x7a, 0x3a, 0xfd, 0xb7, 0xb0, 0x91, 0x22, 0x2f, 0x30, 0xed, 0x3e, 0x80, 0x6a, 0xe6,
	0x82, 0x40, 0x45, 0x28, 0xdc, 0x98, 0x96, 0xe5, 0xda, 0x13, 0xd7, 0x62, 0xb8, 0x35, 0xc0, 0xf6,
	0xd0, 0x9f, 0x8c, 0xf2, 0x18, 0xf3, 0x1b, 0xd8, 0x48, 0x91, 0x17, 0x18, 0xa3, 0x41, 0xc5, 0x0e,
	0x68, 0x81, 0x77, 0xc2, 0x31, 0x0f, 0xd2, 0x21, 0x66, 0xe7, 0x9e, 0x35, 0xf6, 0x07, 0x24, 0x0f,
	0x8e, 0xa0, 0x3f, 0x81, 0xd5, 0x98, 0xa4, 0x39, 0xc9, 0xfa, 0xd7, 0x22, 0x3c, 0x4c, 0x4b, 0xa0,
	0xcf, 0x60, 0x06, 0x6f, 0x25, 0x07, 0x8c, 0x8d, 0x4d, 0x75, 0xd1, 0x95, 0xf9, 0xf8, 0x0d, 0x75,
	0xf9, 0x45, 0x20, 0x58, 0xd6, 0x84, 0x0d, 0x82, 0xf6, 0x4a, 0xcc, 0xdd, 0x9b, 0xb0, 0x81, 0xfe,
	0x05, 0x3c, 0x9a, 0x6f, 0x52, 0x90, 0xd5, 0x7f, 0x29, 0xc2, 0xda, 0x21, 0x66, 0x86, 0x75, 0xd5,
	0x1a, 0x58, 0xde, 0x65, 0x3e, 0x5c, 0xe0, 0x21, 0xdc, 0xe8, 0x53, 0x32, 0x32, 0x63, 0xe0, 0x40,
	0xd5, 0xa8, 0x73, 0x62, 0xf8, 0xa6, 0xdd, 0x82, 0x1a, 0x23, 0x66, 0xec, 0x55, 0x5c, 0x35, 0x80,
	0x91, 0xe9, 0x04, 0xfd, 0x9f, 0x8b, 0x70, 0x7b, 0xc6, 0xa4, 0xc0, 0xf9, 0x47, 0x50, 0xa3, 0xd6,
	0x95, 0x69, 0x4b, 0x72, 0xb3, 0x28, 0xee, 0x9a, 0x2f, 0x23, 0xad, 0x63, 0x72, 0xcd, 0x4e, 0x48,
	0x32, 0x80, 0x86, 0x5c, 0xed, 0xa7, 0x45, 0xa8, 0x86, 0x1c, 0xde, 0xe9, 0x5f, 0xb8, 0xe4, 0x82,
	0x3f, 0x7c, 0x64, 0x42, 0x2d, 0xf3, 0x61, 0xb7, 0x17, 0xa2, 0x29, 0x0b, 0x0a, 0x4d, 0x11, 0xcd,
	0x3d, 0xbe, 0x92, 0xd7, 0xaf, 0x34, 0xbe, 0xec, 0xe1, 0x2b, 0x7e, 0xfb, 0x72, 0x16, 0x7f, 0xd1,
	0x0b, 0xd6, 0x92, 0x64, 0x11, 0xb7, 0x27, 0x58, 0xa7, 0x50, 0x25, 0x63, 0x4c, 0x2d, 0xc6, 0xf7,
	0x5c, 0x12, 0x3d, 0xef, 0x37, 0x9f, 0x68, 0xf8, 0xce, 0xe9, 0x74, 0xa1, 0xa1, 0x64, 0x70, 0x5f,
	0x73, 0x5f, 0x28, 0xa1, 0x12, 0xa3, 0xa8, 0x53, 0xeb, 0x2a, 0x9c, 0x3f, 0x35, 0x68, 0x44, 0x7a,
	0x58, 0xc0, 0x14, 0x25, 0x61, 0xd0, 0x31, 0xe9, 0x85, 0xdb, 0x10, 0xac, 0x8a, 0x64, 0x79, 0xf8,
	0x8a, 0xb3, 0x74, 0x07, 0xaa, 0x4a, 0x44, 0x0d, 0xca, 0x6f, 0x4e, 0x5e, 0x9e, 0x9c, 0xbe, 0x3d,
	0x69, 0x14, 0x50, 0x15, 0x4a, 0x7b, 0xed, 0x76, 0xa7, 0x2d, 0x7b, 0xed, 0xd6, 0xe9, 0x59, 0xb7,
	0xd3, 0x96, 0xbd, 0x76, 0xbb, 0xf3, 0xaa, 0xf3, 0xba, 0xd3, 0x6e, 0x2c, 0xa2, 0x3a, 0x54, 0x8e,
	0x4f, 0xdb, 0xdd, 0x03, 0xce, 0x5a, 0xe2, 0x2c, 0xa3, 0x73, 0xb2, 0x77, 0xdc, 0x69, 0x37, 0x4a,
	0xa8, 0x01, 0xf5, 0xd7, 0x7f, 0x3c, 0xeb, 0x98, 0xad, 0xa3, 0xbd, 0x93, 0xc3, 0x4e, 0xbb, 0xb1,
	0xac, 0x7f, 0x84, 0xe6, 0x39, 0xb6, 0xa8, 0x3d, 0x38, 0x70, 0x5c, 0xec, 0xef, 0x5f, 0xf3, 0xd2,
	0x96, 0x27, 0x03, 0xd7, 0xa0, 0xf4, 0x61, 0x82, 0x83, 0x6e, 0xa0, 0x6a, 0xc8, 0xc1, 0xb4, 0x2f,
	0x5b, 0x0c, 0xfb, 0x32, 0xfd, 0x1b, 0xd8, 0x48, 0xd1, 0xab, 0x5e, 0x4b, 0x7d, 0x4e, 0x16, 0x09,
	0x56, 0x37, 0xe4, 0x40, 0xff, 0x5b, 0x11, 0xee, 0xc6, 0xd6, 0xb4, 0x88, 0xc7, 0xb0, 0xc7, 0xfe,
	0x0f, 0xe6, 0xa2, 0x27, 0xd0, 0xb0, 0x07, 0x13, 0x6f, 0x88, 0x79, 0xbb, 0x28, 0xad, 0x0c, 0x60,
	0xac, 0x5b, 0x01, 0x3d, 0x3c, 0xd0, 0xd7, 0xb0, 0x99, 0x6e, 0x65, 0xb0, 0xb9, 0x26, 0x94, 0x47,
	0x16, 0xb3, 0x07, 0xe1, 0xf6, 0xa6, 0x43, 0xde, 0xc2, 0x8b, 0x4f, 0x33, 0x72, 0x41, 0x56, 0x05,
	0xa5, 0x6d, 0x31, 0x0b, 0x6d, 0x43, 0x1d, 0x7b, 0x3d, 0x93, 0xf4, 0x4d, 0x41, 0x0b, 0xe0, 0x35,
	0xc0, 0x5e, 0xef, 0xb4, 0x7f, 0xcc, 0x29, 0xbb, 0xff, 0x5e, 0x17, 0x60, 0xf2, 0x14, 0x96, 0x94,
	0x68, 0x3b, 0x7a, 0x0b, 0x8d, 0x59, 0x08, 0x1c, 0x6d, 0x25, 0xfd, 0x12, 0xc3, 0xda, 0xb5, 0xed,
	0xec, 0x09, 0xc1, 0x3e, 0x0b, 0xe8, 0xdd, 0x14, 0xba, 0x8e, 0xe0, 0xda, 0x28, 0xba, 0x30, 0x15,
	0x42, 0xd7, 0x1e, 0xcc, 0x99, 0x11, 0xca, 0xee, 0x00, 0x28, 0xa0, 0x1a, 0x6d, 0xc4, 0x97, 0x44,
	0xa0, 0x72, 0x4d, 0x4b, 0x63, 0x85, 0x62, 0xfe, 0x00, 0x37, 0xe3, 0x38, 0x33, 0xba, 0x17, 0x1e,
	0xfa, 0x34, 0xc4, 0x5b, 0xbb, 0x9f, 0xc5, 0x8e, 0x8a, 0x8c, 0x43, 0xbf, 0x4a, 0x64, 0x2a, 0xbe,
	0xac, 0x44, 0xa6, 0x23, 0xc6, 0x7a, 0x01, 0xbd, 0x07, 0x94, 0x84, 0x6c, 0x51, 0xe8, 0xa7, 0x4c,
	0xec, 0x58, 0xd3, 0xe7, 0x4d, 0x09, 0xc5, 0x1f, 0x41, 0x2d, 0x02, 0x76, 0xa2, 0xd0, 0x63, 0x49,
	0x1c, 0x58, 0xbb, 0x9b, 0xca, 0x0b, 0x25, 0xbd, 0x85, 0xc6, 0xec, 0xa5, 0xa6, 0x52, 0x29, 0x03,
	0x39, 0x55, 0xa9, 0x94, 0x89, 0x85, 0x16, 0xd0, 0x21, 0x80, 0xc2, 0x07, 0x55, 0xb8, 0x13, 0x60,
	0xa4, 0x0a, 0x77, 0x12, 0x4e, 0xd4, 0x0b, 0x5f, 0x17, 0xb9, 0x85, 0xb3, 0x78, 0x9f, 0xb2, 0x30,
	0x03, 0x58, 0x54, 0x16, 0x66, 0x41, 0x85, 0x32, 0xd9, 0x13, 0x00, 0x9a, 0x4a, 0xf6, 0x2c, 0xc0,
	0x50, 0x25, 0x7b, 0x26, 0xfa, 0xa6, 0x17, 0xd0, 0x73, 0x58, 0x3a, 0xf0, 0xed, 0x21, 0x5a, 0x0d,
	0x27, 0x2b, 0xd4, 0x4d, 0x5b, 0x8b, 0x13, 0xc3, 0x45, 0xdf, 0x41, 0x65, 0x0a, 0x3f, 0xa1, 0x3b,
	0xd3, 0x39, 0x33, 0x20, 0x9a, 0xd6, 0x4c, 0x32, 0x42, 0x01, 0x27, 0x70, 0x23, 0x86, 0x1d, 0xa1,
	0xcd, 0x50, 0x53, 0x0a, 0x78, 0xa5, 0xdd, 0xcb, 0xe0, 0x46, 0x8f, 0xac, 0xc2, 0x74, 0x54, 0x0c,
	0x13, 0x88, 0x93, 0x8a, 0x61, 0x0a, 0x04, 0x24, 0x0e, 0x43, 0x12, 0x96, 0x51, 0x87, 0x21, 0x13,
	0x20, 0x52, 0x87, 0x21, 0x1b, 0xd5, 0x99, 0x8a, 0x9f, 0x05, 0x52, 0xa2, 0xe2, 0x33, 0x20, 0x9d,
	0xa8, 0xf8, 0x2c, 0x1c, 0x46, 0x2f, 0x20, 0x37, 0xf9, 0x0b, 0x42, 0x00, 0x80, 0xa0, 0x2f, 0xb2,
	0xce, 0x41, 0x1c, 0x89, 0xd1, 0xbe, 0xfc, 0xaf, 0xf3, 0x42, 0x6d, 0xc7, 0x50, 0x8f, 0x02, 0x20,
	0xe8, 0x6e, 0x7c, 0x69, 0xac, 0x5b, 0xd3, 0x36, 0xd3, 0x99, 0x91, 0xc3, 0x73, 0x05, 0x5a, 0x76,
	0x1f, 0x86, 0x9e, 0xcc, 0xb3, 0x2b, 0xae, 0xea, 0xab, 0x4f, 0x99, 0x3a, 0x55, 0xfc, 0xb8, 0xc8,
	0x2b, 0x54, 0x04, 0x35, 0x51, 0x15, 0x2a, 0x89, 0xd8, 0xa8, 0x0a, 0x95, 0x02, 0xb3, 0xe8, 0x05,
	0xb4, 0x0f, 0xd5, 0x10, 0x47, 0x40, 0xcd, 0x2c, 0x14, 0x44, 0xdb, 0x48, 0xe1, 0x84, 0x32, 0x5e,
	0x42, 0x3d, 0x8a, 0x0b, 0x28, 0xaf, 0xa6, 0x80, 0x11, 0xca, 0xab, 0xa9, 0x50, 0x82, 0x2c, 0xbe,
	0xaa, 0xd7, 0x8c, 0x14, 0xdf, 0x44, 0x2b, 0x1b, 0x29, 0xbe, 0xc9, 0xe6, 0x54, 0x2f, 0xa0, 0xef,
	0xc5, 0x0f, 0x46, 0xf1, 0x06, 0x11, 0x45, 0x7f, 0xb7, 0x49, 0xed, 0x45, 0x55, 0x05, 0xca, 0xec,
	0x2e, 0x45, 0xec, 0xdf, 0xc1, 0x4a, 0xa2, 0xe3, 0x53, 0xd2, 0xb3, 0x9a, 0x4b, 0x25, 0x3d, 0xb3,
	0x5d, 0xd4, 0x0b, 0xe8, 0x77, 0x50, 0x0e, 0x7e, 0x8d, 0x45, 0xeb, 0xe1, 0xfc, 0xd8, 0x8f, 0xbc,
	0xda, 0x9d, 0x04, 0x3d, 0x5c, 0xfd, 0x02, 0x6a, 0x91, 0x46, 0x10, 0x45, 0x6f, 0x80, 0x99, 0x06,
	0x4f, 0x79, 0x30, 0xa5, 0x73, 0x14, 0xbb, 0xfc, 0x13, 0x6c, 0xce, 0xeb, 0xca, 0xd0, 0xd3, 0x79,
	0x89, 0x3b, 0xab, 0xed, 0xd9, 0xa7, 0x4d, 0x0e, 0x37, 0x72, 0x06, 0x37, 0x62, 0x9d, 0x86, 0x2a,
	0xb8, 0x69, 0x0d, 0xa0, 0x2a, 0xb8, 0xa9, 0xed, 0x89, 0xd8, 0x0e, 0x86, 0xb5, 0xb4, 0xb7, 0x26,
	0x7a, 0xa8, 0xd2, 0x3b, 0xf3, 0xbd, 0xac, 0x3d, 0x9a, 0x3f, 0x29, 0xa2, 0xe6, 0x7b, 0x58, 0x49,
	0x3c, 0xd6, 0x55, 0x6e, 0x64, 0xf5, 0x0f, 0x2a, 0x37, 0x32, 0x5f, 0xfa, 0x42, 0xfa, 0x7b, 0x40,
	0x49, 0x24, 0x0c, 0x45, 0x5e, 0x89, 0x19, 0x50, 0x9c, 0xaa, 0xc8, 0xd9, 0x40, 0xda, 0x63, 0x61,
	0x7c, 0x02, 0xfa, 0x52, 0xc6, 0x67, 0xa1, 0x6c, 0xca, 0xf8, 0x4c, 0xdc, 0x8c, 0x1b, 0x7f, 0xb1,
	0x2c, 0xfe, 0xb5, 0xf2, 0xfc, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x90, 0x21, 0x07, 0x51, 0xe7,
	0x22, 0x00, 0x00,
}
