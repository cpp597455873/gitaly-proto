// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ref.proto

package gitalypb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindLocalBranchesRequest_SortBy int32

const (
	FindLocalBranchesRequest_NAME         FindLocalBranchesRequest_SortBy = 0
	FindLocalBranchesRequest_UPDATED_ASC  FindLocalBranchesRequest_SortBy = 1
	FindLocalBranchesRequest_UPDATED_DESC FindLocalBranchesRequest_SortBy = 2
)

var FindLocalBranchesRequest_SortBy_name = map[int32]string{
	0: "NAME",
	1: "UPDATED_ASC",
	2: "UPDATED_DESC",
}
var FindLocalBranchesRequest_SortBy_value = map[string]int32{
	"NAME":         0,
	"UPDATED_ASC":  1,
	"UPDATED_DESC": 2,
}

func (x FindLocalBranchesRequest_SortBy) String() string {
	return proto.EnumName(FindLocalBranchesRequest_SortBy_name, int32(x))
}
func (FindLocalBranchesRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{10, 0}
}

type CreateBranchResponse_Status int32

const (
	CreateBranchResponse_OK                      CreateBranchResponse_Status = 0
	CreateBranchResponse_ERR_EXISTS              CreateBranchResponse_Status = 1
	CreateBranchResponse_ERR_INVALID             CreateBranchResponse_Status = 2
	CreateBranchResponse_ERR_INVALID_START_POINT CreateBranchResponse_Status = 3
)

var CreateBranchResponse_Status_name = map[int32]string{
	0: "OK",
	1: "ERR_EXISTS",
	2: "ERR_INVALID",
	3: "ERR_INVALID_START_POINT",
}
var CreateBranchResponse_Status_value = map[string]int32{
	"OK":                      0,
	"ERR_EXISTS":              1,
	"ERR_INVALID":             2,
	"ERR_INVALID_START_POINT": 3,
}

func (x CreateBranchResponse_Status) String() string {
	return proto.EnumName(CreateBranchResponse_Status_name, int32(x))
}
func (CreateBranchResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{21, 0}
}

type ListNewBlobsRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	CommitId   string      `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// Limit the number of revs to be returned fro mgit-rev-list
	// If the limit is set to zero, all items will be returned
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNewBlobsRequest) Reset()         { *m = ListNewBlobsRequest{} }
func (m *ListNewBlobsRequest) String() string { return proto.CompactTextString(m) }
func (*ListNewBlobsRequest) ProtoMessage()    {}
func (*ListNewBlobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{0}
}
func (m *ListNewBlobsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNewBlobsRequest.Unmarshal(m, b)
}
func (m *ListNewBlobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNewBlobsRequest.Marshal(b, m, deterministic)
}
func (dst *ListNewBlobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNewBlobsRequest.Merge(dst, src)
}
func (m *ListNewBlobsRequest) XXX_Size() int {
	return xxx_messageInfo_ListNewBlobsRequest.Size(m)
}
func (m *ListNewBlobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNewBlobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNewBlobsRequest proto.InternalMessageInfo

func (m *ListNewBlobsRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ListNewBlobsRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *ListNewBlobsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListNewBlobsResponse struct {
	NewBlobObjects       []*NewBlobObject `protobuf:"bytes,1,rep,name=new_blob_objects,json=newBlobObjects,proto3" json:"new_blob_objects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListNewBlobsResponse) Reset()         { *m = ListNewBlobsResponse{} }
func (m *ListNewBlobsResponse) String() string { return proto.CompactTextString(m) }
func (*ListNewBlobsResponse) ProtoMessage()    {}
func (*ListNewBlobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{1}
}
func (m *ListNewBlobsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNewBlobsResponse.Unmarshal(m, b)
}
func (m *ListNewBlobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNewBlobsResponse.Marshal(b, m, deterministic)
}
func (dst *ListNewBlobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNewBlobsResponse.Merge(dst, src)
}
func (m *ListNewBlobsResponse) XXX_Size() int {
	return xxx_messageInfo_ListNewBlobsResponse.Size(m)
}
func (m *ListNewBlobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNewBlobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNewBlobsResponse proto.InternalMessageInfo

func (m *ListNewBlobsResponse) GetNewBlobObjects() []*NewBlobObject {
	if m != nil {
		return m.NewBlobObjects
	}
	return nil
}

type FindDefaultBranchNameRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindDefaultBranchNameRequest) Reset()         { *m = FindDefaultBranchNameRequest{} }
func (m *FindDefaultBranchNameRequest) String() string { return proto.CompactTextString(m) }
func (*FindDefaultBranchNameRequest) ProtoMessage()    {}
func (*FindDefaultBranchNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{2}
}
func (m *FindDefaultBranchNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindDefaultBranchNameRequest.Unmarshal(m, b)
}
func (m *FindDefaultBranchNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindDefaultBranchNameRequest.Marshal(b, m, deterministic)
}
func (dst *FindDefaultBranchNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindDefaultBranchNameRequest.Merge(dst, src)
}
func (m *FindDefaultBranchNameRequest) XXX_Size() int {
	return xxx_messageInfo_FindDefaultBranchNameRequest.Size(m)
}
func (m *FindDefaultBranchNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindDefaultBranchNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindDefaultBranchNameRequest proto.InternalMessageInfo

func (m *FindDefaultBranchNameRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindDefaultBranchNameResponse struct {
	Name                 []byte   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindDefaultBranchNameResponse) Reset()         { *m = FindDefaultBranchNameResponse{} }
func (m *FindDefaultBranchNameResponse) String() string { return proto.CompactTextString(m) }
func (*FindDefaultBranchNameResponse) ProtoMessage()    {}
func (*FindDefaultBranchNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{3}
}
func (m *FindDefaultBranchNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindDefaultBranchNameResponse.Unmarshal(m, b)
}
func (m *FindDefaultBranchNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindDefaultBranchNameResponse.Marshal(b, m, deterministic)
}
func (dst *FindDefaultBranchNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindDefaultBranchNameResponse.Merge(dst, src)
}
func (m *FindDefaultBranchNameResponse) XXX_Size() int {
	return xxx_messageInfo_FindDefaultBranchNameResponse.Size(m)
}
func (m *FindDefaultBranchNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindDefaultBranchNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindDefaultBranchNameResponse proto.InternalMessageInfo

func (m *FindDefaultBranchNameResponse) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type FindAllBranchNamesRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindAllBranchNamesRequest) Reset()         { *m = FindAllBranchNamesRequest{} }
func (m *FindAllBranchNamesRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllBranchNamesRequest) ProtoMessage()    {}
func (*FindAllBranchNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{4}
}
func (m *FindAllBranchNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllBranchNamesRequest.Unmarshal(m, b)
}
func (m *FindAllBranchNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllBranchNamesRequest.Marshal(b, m, deterministic)
}
func (dst *FindAllBranchNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllBranchNamesRequest.Merge(dst, src)
}
func (m *FindAllBranchNamesRequest) XXX_Size() int {
	return xxx_messageInfo_FindAllBranchNamesRequest.Size(m)
}
func (m *FindAllBranchNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllBranchNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllBranchNamesRequest proto.InternalMessageInfo

func (m *FindAllBranchNamesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllBranchNamesResponse struct {
	Names                [][]byte `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAllBranchNamesResponse) Reset()         { *m = FindAllBranchNamesResponse{} }
func (m *FindAllBranchNamesResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllBranchNamesResponse) ProtoMessage()    {}
func (*FindAllBranchNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{5}
}
func (m *FindAllBranchNamesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllBranchNamesResponse.Unmarshal(m, b)
}
func (m *FindAllBranchNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllBranchNamesResponse.Marshal(b, m, deterministic)
}
func (dst *FindAllBranchNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllBranchNamesResponse.Merge(dst, src)
}
func (m *FindAllBranchNamesResponse) XXX_Size() int {
	return xxx_messageInfo_FindAllBranchNamesResponse.Size(m)
}
func (m *FindAllBranchNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllBranchNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllBranchNamesResponse proto.InternalMessageInfo

func (m *FindAllBranchNamesResponse) GetNames() [][]byte {
	if m != nil {
		return m.Names
	}
	return nil
}

type FindAllTagNamesRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindAllTagNamesRequest) Reset()         { *m = FindAllTagNamesRequest{} }
func (m *FindAllTagNamesRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllTagNamesRequest) ProtoMessage()    {}
func (*FindAllTagNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{6}
}
func (m *FindAllTagNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllTagNamesRequest.Unmarshal(m, b)
}
func (m *FindAllTagNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllTagNamesRequest.Marshal(b, m, deterministic)
}
func (dst *FindAllTagNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllTagNamesRequest.Merge(dst, src)
}
func (m *FindAllTagNamesRequest) XXX_Size() int {
	return xxx_messageInfo_FindAllTagNamesRequest.Size(m)
}
func (m *FindAllTagNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllTagNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllTagNamesRequest proto.InternalMessageInfo

func (m *FindAllTagNamesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllTagNamesResponse struct {
	Names                [][]byte `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAllTagNamesResponse) Reset()         { *m = FindAllTagNamesResponse{} }
func (m *FindAllTagNamesResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllTagNamesResponse) ProtoMessage()    {}
func (*FindAllTagNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{7}
}
func (m *FindAllTagNamesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllTagNamesResponse.Unmarshal(m, b)
}
func (m *FindAllTagNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllTagNamesResponse.Marshal(b, m, deterministic)
}
func (dst *FindAllTagNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllTagNamesResponse.Merge(dst, src)
}
func (m *FindAllTagNamesResponse) XXX_Size() int {
	return xxx_messageInfo_FindAllTagNamesResponse.Size(m)
}
func (m *FindAllTagNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllTagNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllTagNamesResponse proto.InternalMessageInfo

func (m *FindAllTagNamesResponse) GetNames() [][]byte {
	if m != nil {
		return m.Names
	}
	return nil
}

type FindRefNameRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Require that the resulting ref contains this commit as an ancestor
	CommitId string `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// Example prefix: "refs/heads/". Type bytes because that is the type of ref names.
	Prefix               []byte   `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindRefNameRequest) Reset()         { *m = FindRefNameRequest{} }
func (m *FindRefNameRequest) String() string { return proto.CompactTextString(m) }
func (*FindRefNameRequest) ProtoMessage()    {}
func (*FindRefNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{8}
}
func (m *FindRefNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRefNameRequest.Unmarshal(m, b)
}
func (m *FindRefNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRefNameRequest.Marshal(b, m, deterministic)
}
func (dst *FindRefNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRefNameRequest.Merge(dst, src)
}
func (m *FindRefNameRequest) XXX_Size() int {
	return xxx_messageInfo_FindRefNameRequest.Size(m)
}
func (m *FindRefNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRefNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindRefNameRequest proto.InternalMessageInfo

func (m *FindRefNameRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindRefNameRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *FindRefNameRequest) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

type FindRefNameResponse struct {
	// Example name: "refs/heads/master". Cannot assume UTF8, so the type is bytes.
	Name                 []byte   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindRefNameResponse) Reset()         { *m = FindRefNameResponse{} }
func (m *FindRefNameResponse) String() string { return proto.CompactTextString(m) }
func (*FindRefNameResponse) ProtoMessage()    {}
func (*FindRefNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{9}
}
func (m *FindRefNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRefNameResponse.Unmarshal(m, b)
}
func (m *FindRefNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRefNameResponse.Marshal(b, m, deterministic)
}
func (dst *FindRefNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRefNameResponse.Merge(dst, src)
}
func (m *FindRefNameResponse) XXX_Size() int {
	return xxx_messageInfo_FindRefNameResponse.Size(m)
}
func (m *FindRefNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRefNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindRefNameResponse proto.InternalMessageInfo

func (m *FindRefNameResponse) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type FindLocalBranchesRequest struct {
	Repository           *Repository                     `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	SortBy               FindLocalBranchesRequest_SortBy `protobuf:"varint,2,opt,name=sort_by,json=sortBy,proto3,enum=gitaly.FindLocalBranchesRequest_SortBy" json:"sort_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *FindLocalBranchesRequest) Reset()         { *m = FindLocalBranchesRequest{} }
func (m *FindLocalBranchesRequest) String() string { return proto.CompactTextString(m) }
func (*FindLocalBranchesRequest) ProtoMessage()    {}
func (*FindLocalBranchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{10}
}
func (m *FindLocalBranchesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindLocalBranchesRequest.Unmarshal(m, b)
}
func (m *FindLocalBranchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindLocalBranchesRequest.Marshal(b, m, deterministic)
}
func (dst *FindLocalBranchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindLocalBranchesRequest.Merge(dst, src)
}
func (m *FindLocalBranchesRequest) XXX_Size() int {
	return xxx_messageInfo_FindLocalBranchesRequest.Size(m)
}
func (m *FindLocalBranchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindLocalBranchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindLocalBranchesRequest proto.InternalMessageInfo

func (m *FindLocalBranchesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindLocalBranchesRequest) GetSortBy() FindLocalBranchesRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return FindLocalBranchesRequest_NAME
}

type FindLocalBranchesResponse struct {
	Branches             []*FindLocalBranchResponse `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *FindLocalBranchesResponse) Reset()         { *m = FindLocalBranchesResponse{} }
func (m *FindLocalBranchesResponse) String() string { return proto.CompactTextString(m) }
func (*FindLocalBranchesResponse) ProtoMessage()    {}
func (*FindLocalBranchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{11}
}
func (m *FindLocalBranchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindLocalBranchesResponse.Unmarshal(m, b)
}
func (m *FindLocalBranchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindLocalBranchesResponse.Marshal(b, m, deterministic)
}
func (dst *FindLocalBranchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindLocalBranchesResponse.Merge(dst, src)
}
func (m *FindLocalBranchesResponse) XXX_Size() int {
	return xxx_messageInfo_FindLocalBranchesResponse.Size(m)
}
func (m *FindLocalBranchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindLocalBranchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindLocalBranchesResponse proto.InternalMessageInfo

func (m *FindLocalBranchesResponse) GetBranches() []*FindLocalBranchResponse {
	if m != nil {
		return m.Branches
	}
	return nil
}

type FindLocalBranchResponse struct {
	Name                 []byte                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CommitId             string                       `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	CommitSubject        []byte                       `protobuf:"bytes,3,opt,name=commit_subject,json=commitSubject,proto3" json:"commit_subject,omitempty"`
	CommitAuthor         *FindLocalBranchCommitAuthor `protobuf:"bytes,4,opt,name=commit_author,json=commitAuthor,proto3" json:"commit_author,omitempty"`
	CommitCommitter      *FindLocalBranchCommitAuthor `protobuf:"bytes,5,opt,name=commit_committer,json=commitCommitter,proto3" json:"commit_committer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *FindLocalBranchResponse) Reset()         { *m = FindLocalBranchResponse{} }
func (m *FindLocalBranchResponse) String() string { return proto.CompactTextString(m) }
func (*FindLocalBranchResponse) ProtoMessage()    {}
func (*FindLocalBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{12}
}
func (m *FindLocalBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindLocalBranchResponse.Unmarshal(m, b)
}
func (m *FindLocalBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindLocalBranchResponse.Marshal(b, m, deterministic)
}
func (dst *FindLocalBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindLocalBranchResponse.Merge(dst, src)
}
func (m *FindLocalBranchResponse) XXX_Size() int {
	return xxx_messageInfo_FindLocalBranchResponse.Size(m)
}
func (m *FindLocalBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindLocalBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindLocalBranchResponse proto.InternalMessageInfo

func (m *FindLocalBranchResponse) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *FindLocalBranchResponse) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *FindLocalBranchResponse) GetCommitSubject() []byte {
	if m != nil {
		return m.CommitSubject
	}
	return nil
}

func (m *FindLocalBranchResponse) GetCommitAuthor() *FindLocalBranchCommitAuthor {
	if m != nil {
		return m.CommitAuthor
	}
	return nil
}

func (m *FindLocalBranchResponse) GetCommitCommitter() *FindLocalBranchCommitAuthor {
	if m != nil {
		return m.CommitCommitter
	}
	return nil
}

type FindLocalBranchCommitAuthor struct {
	Name                 []byte               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email                []byte               `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FindLocalBranchCommitAuthor) Reset()         { *m = FindLocalBranchCommitAuthor{} }
func (m *FindLocalBranchCommitAuthor) String() string { return proto.CompactTextString(m) }
func (*FindLocalBranchCommitAuthor) ProtoMessage()    {}
func (*FindLocalBranchCommitAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{13}
}
func (m *FindLocalBranchCommitAuthor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindLocalBranchCommitAuthor.Unmarshal(m, b)
}
func (m *FindLocalBranchCommitAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindLocalBranchCommitAuthor.Marshal(b, m, deterministic)
}
func (dst *FindLocalBranchCommitAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindLocalBranchCommitAuthor.Merge(dst, src)
}
func (m *FindLocalBranchCommitAuthor) XXX_Size() int {
	return xxx_messageInfo_FindLocalBranchCommitAuthor.Size(m)
}
func (m *FindLocalBranchCommitAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_FindLocalBranchCommitAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_FindLocalBranchCommitAuthor proto.InternalMessageInfo

func (m *FindLocalBranchCommitAuthor) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *FindLocalBranchCommitAuthor) GetEmail() []byte {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *FindLocalBranchCommitAuthor) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

type FindAllBranchesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Only return branches that are merged into root ref
	MergedOnly bool `protobuf:"varint,2,opt,name=merged_only,json=mergedOnly,proto3" json:"merged_only,omitempty"`
	// If merged_only is true, this is a list of branches from which we
	// return those merged into the root ref
	MergedBranches       [][]byte `protobuf:"bytes,3,rep,name=merged_branches,json=mergedBranches,proto3" json:"merged_branches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAllBranchesRequest) Reset()         { *m = FindAllBranchesRequest{} }
func (m *FindAllBranchesRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllBranchesRequest) ProtoMessage()    {}
func (*FindAllBranchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{14}
}
func (m *FindAllBranchesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllBranchesRequest.Unmarshal(m, b)
}
func (m *FindAllBranchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllBranchesRequest.Marshal(b, m, deterministic)
}
func (dst *FindAllBranchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllBranchesRequest.Merge(dst, src)
}
func (m *FindAllBranchesRequest) XXX_Size() int {
	return xxx_messageInfo_FindAllBranchesRequest.Size(m)
}
func (m *FindAllBranchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllBranchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllBranchesRequest proto.InternalMessageInfo

func (m *FindAllBranchesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindAllBranchesRequest) GetMergedOnly() bool {
	if m != nil {
		return m.MergedOnly
	}
	return false
}

func (m *FindAllBranchesRequest) GetMergedBranches() [][]byte {
	if m != nil {
		return m.MergedBranches
	}
	return nil
}

type FindAllBranchesResponse struct {
	Branches             []*FindAllBranchesResponse_Branch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *FindAllBranchesResponse) Reset()         { *m = FindAllBranchesResponse{} }
func (m *FindAllBranchesResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllBranchesResponse) ProtoMessage()    {}
func (*FindAllBranchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{15}
}
func (m *FindAllBranchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllBranchesResponse.Unmarshal(m, b)
}
func (m *FindAllBranchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllBranchesResponse.Marshal(b, m, deterministic)
}
func (dst *FindAllBranchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllBranchesResponse.Merge(dst, src)
}
func (m *FindAllBranchesResponse) XXX_Size() int {
	return xxx_messageInfo_FindAllBranchesResponse.Size(m)
}
func (m *FindAllBranchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllBranchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllBranchesResponse proto.InternalMessageInfo

func (m *FindAllBranchesResponse) GetBranches() []*FindAllBranchesResponse_Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

type FindAllBranchesResponse_Branch struct {
	Name                 []byte     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Target               *GitCommit `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FindAllBranchesResponse_Branch) Reset()         { *m = FindAllBranchesResponse_Branch{} }
func (m *FindAllBranchesResponse_Branch) String() string { return proto.CompactTextString(m) }
func (*FindAllBranchesResponse_Branch) ProtoMessage()    {}
func (*FindAllBranchesResponse_Branch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{15, 0}
}
func (m *FindAllBranchesResponse_Branch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllBranchesResponse_Branch.Unmarshal(m, b)
}
func (m *FindAllBranchesResponse_Branch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllBranchesResponse_Branch.Marshal(b, m, deterministic)
}
func (dst *FindAllBranchesResponse_Branch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllBranchesResponse_Branch.Merge(dst, src)
}
func (m *FindAllBranchesResponse_Branch) XXX_Size() int {
	return xxx_messageInfo_FindAllBranchesResponse_Branch.Size(m)
}
func (m *FindAllBranchesResponse_Branch) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllBranchesResponse_Branch.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllBranchesResponse_Branch proto.InternalMessageInfo

func (m *FindAllBranchesResponse_Branch) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *FindAllBranchesResponse_Branch) GetTarget() *GitCommit {
	if m != nil {
		return m.Target
	}
	return nil
}

type FindAllTagsRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindAllTagsRequest) Reset()         { *m = FindAllTagsRequest{} }
func (m *FindAllTagsRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllTagsRequest) ProtoMessage()    {}
func (*FindAllTagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{16}
}
func (m *FindAllTagsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllTagsRequest.Unmarshal(m, b)
}
func (m *FindAllTagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllTagsRequest.Marshal(b, m, deterministic)
}
func (dst *FindAllTagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllTagsRequest.Merge(dst, src)
}
func (m *FindAllTagsRequest) XXX_Size() int {
	return xxx_messageInfo_FindAllTagsRequest.Size(m)
}
func (m *FindAllTagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllTagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllTagsRequest proto.InternalMessageInfo

func (m *FindAllTagsRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllTagsResponse struct {
	Tags                 []*Tag   `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAllTagsResponse) Reset()         { *m = FindAllTagsResponse{} }
func (m *FindAllTagsResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllTagsResponse) ProtoMessage()    {}
func (*FindAllTagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{17}
}
func (m *FindAllTagsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllTagsResponse.Unmarshal(m, b)
}
func (m *FindAllTagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllTagsResponse.Marshal(b, m, deterministic)
}
func (dst *FindAllTagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllTagsResponse.Merge(dst, src)
}
func (m *FindAllTagsResponse) XXX_Size() int {
	return xxx_messageInfo_FindAllTagsResponse.Size(m)
}
func (m *FindAllTagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllTagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllTagsResponse proto.InternalMessageInfo

func (m *FindAllTagsResponse) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type RefExistsRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Any ref, e.g. 'refs/heads/master' or 'refs/tags/v1.0.1'. Must start with 'refs/'.
	Ref                  []byte   `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefExistsRequest) Reset()         { *m = RefExistsRequest{} }
func (m *RefExistsRequest) String() string { return proto.CompactTextString(m) }
func (*RefExistsRequest) ProtoMessage()    {}
func (*RefExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{18}
}
func (m *RefExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefExistsRequest.Unmarshal(m, b)
}
func (m *RefExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefExistsRequest.Marshal(b, m, deterministic)
}
func (dst *RefExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefExistsRequest.Merge(dst, src)
}
func (m *RefExistsRequest) XXX_Size() int {
	return xxx_messageInfo_RefExistsRequest.Size(m)
}
func (m *RefExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefExistsRequest proto.InternalMessageInfo

func (m *RefExistsRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *RefExistsRequest) GetRef() []byte {
	if m != nil {
		return m.Ref
	}
	return nil
}

type RefExistsResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefExistsResponse) Reset()         { *m = RefExistsResponse{} }
func (m *RefExistsResponse) String() string { return proto.CompactTextString(m) }
func (*RefExistsResponse) ProtoMessage()    {}
func (*RefExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{19}
}
func (m *RefExistsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefExistsResponse.Unmarshal(m, b)
}
func (m *RefExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefExistsResponse.Marshal(b, m, deterministic)
}
func (dst *RefExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefExistsResponse.Merge(dst, src)
}
func (m *RefExistsResponse) XXX_Size() int {
	return xxx_messageInfo_RefExistsResponse.Size(m)
}
func (m *RefExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefExistsResponse proto.InternalMessageInfo

func (m *RefExistsResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type CreateBranchRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Name                 []byte      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartPoint           []byte      `protobuf:"bytes,3,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateBranchRequest) Reset()         { *m = CreateBranchRequest{} }
func (m *CreateBranchRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBranchRequest) ProtoMessage()    {}
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{20}
}
func (m *CreateBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBranchRequest.Unmarshal(m, b)
}
func (m *CreateBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBranchRequest.Marshal(b, m, deterministic)
}
func (dst *CreateBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBranchRequest.Merge(dst, src)
}
func (m *CreateBranchRequest) XXX_Size() int {
	return xxx_messageInfo_CreateBranchRequest.Size(m)
}
func (m *CreateBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBranchRequest proto.InternalMessageInfo

func (m *CreateBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CreateBranchRequest) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CreateBranchRequest) GetStartPoint() []byte {
	if m != nil {
		return m.StartPoint
	}
	return nil
}

type CreateBranchResponse struct {
	Status               CreateBranchResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=gitaly.CreateBranchResponse_Status" json:"status,omitempty"`
	Branch               *Branch                     `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CreateBranchResponse) Reset()         { *m = CreateBranchResponse{} }
func (m *CreateBranchResponse) String() string { return proto.CompactTextString(m) }
func (*CreateBranchResponse) ProtoMessage()    {}
func (*CreateBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{21}
}
func (m *CreateBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBranchResponse.Unmarshal(m, b)
}
func (m *CreateBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBranchResponse.Marshal(b, m, deterministic)
}
func (dst *CreateBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBranchResponse.Merge(dst, src)
}
func (m *CreateBranchResponse) XXX_Size() int {
	return xxx_messageInfo_CreateBranchResponse.Size(m)
}
func (m *CreateBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBranchResponse proto.InternalMessageInfo

func (m *CreateBranchResponse) GetStatus() CreateBranchResponse_Status {
	if m != nil {
		return m.Status
	}
	return CreateBranchResponse_OK
}

func (m *CreateBranchResponse) GetBranch() *Branch {
	if m != nil {
		return m.Branch
	}
	return nil
}

type DeleteBranchRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Name                 []byte      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeleteBranchRequest) Reset()         { *m = DeleteBranchRequest{} }
func (m *DeleteBranchRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBranchRequest) ProtoMessage()    {}
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{22}
}
func (m *DeleteBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBranchRequest.Unmarshal(m, b)
}
func (m *DeleteBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBranchRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBranchRequest.Merge(dst, src)
}
func (m *DeleteBranchRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteBranchRequest.Size(m)
}
func (m *DeleteBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBranchRequest proto.InternalMessageInfo

func (m *DeleteBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *DeleteBranchRequest) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

// Not clear if we need to do status signaling; we can add fields later.
type DeleteBranchResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBranchResponse) Reset()         { *m = DeleteBranchResponse{} }
func (m *DeleteBranchResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteBranchResponse) ProtoMessage()    {}
func (*DeleteBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{23}
}
func (m *DeleteBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBranchResponse.Unmarshal(m, b)
}
func (m *DeleteBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBranchResponse.Marshal(b, m, deterministic)
}
func (dst *DeleteBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBranchResponse.Merge(dst, src)
}
func (m *DeleteBranchResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteBranchResponse.Size(m)
}
func (m *DeleteBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBranchResponse proto.InternalMessageInfo

type FindBranchRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Name can be 'master' but also 'refs/heads/master'
	Name                 []byte   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindBranchRequest) Reset()         { *m = FindBranchRequest{} }
func (m *FindBranchRequest) String() string { return proto.CompactTextString(m) }
func (*FindBranchRequest) ProtoMessage()    {}
func (*FindBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{24}
}
func (m *FindBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindBranchRequest.Unmarshal(m, b)
}
func (m *FindBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindBranchRequest.Marshal(b, m, deterministic)
}
func (dst *FindBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindBranchRequest.Merge(dst, src)
}
func (m *FindBranchRequest) XXX_Size() int {
	return xxx_messageInfo_FindBranchRequest.Size(m)
}
func (m *FindBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindBranchRequest proto.InternalMessageInfo

func (m *FindBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindBranchRequest) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type FindBranchResponse struct {
	Branch               *Branch  `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindBranchResponse) Reset()         { *m = FindBranchResponse{} }
func (m *FindBranchResponse) String() string { return proto.CompactTextString(m) }
func (*FindBranchResponse) ProtoMessage()    {}
func (*FindBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{25}
}
func (m *FindBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindBranchResponse.Unmarshal(m, b)
}
func (m *FindBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindBranchResponse.Marshal(b, m, deterministic)
}
func (dst *FindBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindBranchResponse.Merge(dst, src)
}
func (m *FindBranchResponse) XXX_Size() int {
	return xxx_messageInfo_FindBranchResponse.Size(m)
}
func (m *FindBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindBranchResponse proto.InternalMessageInfo

func (m *FindBranchResponse) GetBranch() *Branch {
	if m != nil {
		return m.Branch
	}
	return nil
}

type DeleteRefsRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// The following two fields are mutually exclusive
	ExceptWithPrefix     [][]byte `protobuf:"bytes,2,rep,name=except_with_prefix,json=exceptWithPrefix,proto3" json:"except_with_prefix,omitempty"`
	Refs                 [][]byte `protobuf:"bytes,3,rep,name=refs,proto3" json:"refs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRefsRequest) Reset()         { *m = DeleteRefsRequest{} }
func (m *DeleteRefsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRefsRequest) ProtoMessage()    {}
func (*DeleteRefsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{26}
}
func (m *DeleteRefsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRefsRequest.Unmarshal(m, b)
}
func (m *DeleteRefsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRefsRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteRefsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRefsRequest.Merge(dst, src)
}
func (m *DeleteRefsRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRefsRequest.Size(m)
}
func (m *DeleteRefsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRefsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRefsRequest proto.InternalMessageInfo

func (m *DeleteRefsRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *DeleteRefsRequest) GetExceptWithPrefix() [][]byte {
	if m != nil {
		return m.ExceptWithPrefix
	}
	return nil
}

func (m *DeleteRefsRequest) GetRefs() [][]byte {
	if m != nil {
		return m.Refs
	}
	return nil
}

type DeleteRefsResponse struct {
	GitError             string   `protobuf:"bytes,1,opt,name=git_error,json=gitError,proto3" json:"git_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRefsResponse) Reset()         { *m = DeleteRefsResponse{} }
func (m *DeleteRefsResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRefsResponse) ProtoMessage()    {}
func (*DeleteRefsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{27}
}
func (m *DeleteRefsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRefsResponse.Unmarshal(m, b)
}
func (m *DeleteRefsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRefsResponse.Marshal(b, m, deterministic)
}
func (dst *DeleteRefsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRefsResponse.Merge(dst, src)
}
func (m *DeleteRefsResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteRefsResponse.Size(m)
}
func (m *DeleteRefsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRefsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRefsResponse proto.InternalMessageInfo

func (m *DeleteRefsResponse) GetGitError() string {
	if m != nil {
		return m.GitError
	}
	return ""
}

type ListBranchNamesContainingCommitRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	CommitId   string      `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// Limit the number of tag names to be returned
	// If the limit is set to zero, all items will be returned
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBranchNamesContainingCommitRequest) Reset() {
	*m = ListBranchNamesContainingCommitRequest{}
}
func (m *ListBranchNamesContainingCommitRequest) String() string { return proto.CompactTextString(m) }
func (*ListBranchNamesContainingCommitRequest) ProtoMessage()    {}
func (*ListBranchNamesContainingCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{28}
}
func (m *ListBranchNamesContainingCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBranchNamesContainingCommitRequest.Unmarshal(m, b)
}
func (m *ListBranchNamesContainingCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBranchNamesContainingCommitRequest.Marshal(b, m, deterministic)
}
func (dst *ListBranchNamesContainingCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBranchNamesContainingCommitRequest.Merge(dst, src)
}
func (m *ListBranchNamesContainingCommitRequest) XXX_Size() int {
	return xxx_messageInfo_ListBranchNamesContainingCommitRequest.Size(m)
}
func (m *ListBranchNamesContainingCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBranchNamesContainingCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBranchNamesContainingCommitRequest proto.InternalMessageInfo

func (m *ListBranchNamesContainingCommitRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ListBranchNamesContainingCommitRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *ListBranchNamesContainingCommitRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListBranchNamesContainingCommitResponse struct {
	BranchNames          [][]byte `protobuf:"bytes,2,rep,name=branch_names,json=branchNames,proto3" json:"branch_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBranchNamesContainingCommitResponse) Reset() {
	*m = ListBranchNamesContainingCommitResponse{}
}
func (m *ListBranchNamesContainingCommitResponse) String() string { return proto.CompactTextString(m) }
func (*ListBranchNamesContainingCommitResponse) ProtoMessage()    {}
func (*ListBranchNamesContainingCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{29}
}
func (m *ListBranchNamesContainingCommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBranchNamesContainingCommitResponse.Unmarshal(m, b)
}
func (m *ListBranchNamesContainingCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBranchNamesContainingCommitResponse.Marshal(b, m, deterministic)
}
func (dst *ListBranchNamesContainingCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBranchNamesContainingCommitResponse.Merge(dst, src)
}
func (m *ListBranchNamesContainingCommitResponse) XXX_Size() int {
	return xxx_messageInfo_ListBranchNamesContainingCommitResponse.Size(m)
}
func (m *ListBranchNamesContainingCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBranchNamesContainingCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBranchNamesContainingCommitResponse proto.InternalMessageInfo

func (m *ListBranchNamesContainingCommitResponse) GetBranchNames() [][]byte {
	if m != nil {
		return m.BranchNames
	}
	return nil
}

type ListTagNamesContainingCommitRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	CommitId   string      `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// Limit the number of tag names to be returned
	// If the limit is set to zero, all items will be returned
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTagNamesContainingCommitRequest) Reset()         { *m = ListTagNamesContainingCommitRequest{} }
func (m *ListTagNamesContainingCommitRequest) String() string { return proto.CompactTextString(m) }
func (*ListTagNamesContainingCommitRequest) ProtoMessage()    {}
func (*ListTagNamesContainingCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{30}
}
func (m *ListTagNamesContainingCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTagNamesContainingCommitRequest.Unmarshal(m, b)
}
func (m *ListTagNamesContainingCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTagNamesContainingCommitRequest.Marshal(b, m, deterministic)
}
func (dst *ListTagNamesContainingCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTagNamesContainingCommitRequest.Merge(dst, src)
}
func (m *ListTagNamesContainingCommitRequest) XXX_Size() int {
	return xxx_messageInfo_ListTagNamesContainingCommitRequest.Size(m)
}
func (m *ListTagNamesContainingCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTagNamesContainingCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTagNamesContainingCommitRequest proto.InternalMessageInfo

func (m *ListTagNamesContainingCommitRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ListTagNamesContainingCommitRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *ListTagNamesContainingCommitRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListTagNamesContainingCommitResponse struct {
	TagNames             [][]byte `protobuf:"bytes,2,rep,name=tag_names,json=tagNames,proto3" json:"tag_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTagNamesContainingCommitResponse) Reset()         { *m = ListTagNamesContainingCommitResponse{} }
func (m *ListTagNamesContainingCommitResponse) String() string { return proto.CompactTextString(m) }
func (*ListTagNamesContainingCommitResponse) ProtoMessage()    {}
func (*ListTagNamesContainingCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{31}
}
func (m *ListTagNamesContainingCommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTagNamesContainingCommitResponse.Unmarshal(m, b)
}
func (m *ListTagNamesContainingCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTagNamesContainingCommitResponse.Marshal(b, m, deterministic)
}
func (dst *ListTagNamesContainingCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTagNamesContainingCommitResponse.Merge(dst, src)
}
func (m *ListTagNamesContainingCommitResponse) XXX_Size() int {
	return xxx_messageInfo_ListTagNamesContainingCommitResponse.Size(m)
}
func (m *ListTagNamesContainingCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTagNamesContainingCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTagNamesContainingCommitResponse proto.InternalMessageInfo

func (m *ListTagNamesContainingCommitResponse) GetTagNames() [][]byte {
	if m != nil {
		return m.TagNames
	}
	return nil
}

type GetTagMessagesRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	TagIds               []string    `protobuf:"bytes,3,rep,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetTagMessagesRequest) Reset()         { *m = GetTagMessagesRequest{} }
func (m *GetTagMessagesRequest) String() string { return proto.CompactTextString(m) }
func (*GetTagMessagesRequest) ProtoMessage()    {}
func (*GetTagMessagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{32}
}
func (m *GetTagMessagesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTagMessagesRequest.Unmarshal(m, b)
}
func (m *GetTagMessagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTagMessagesRequest.Marshal(b, m, deterministic)
}
func (dst *GetTagMessagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTagMessagesRequest.Merge(dst, src)
}
func (m *GetTagMessagesRequest) XXX_Size() int {
	return xxx_messageInfo_GetTagMessagesRequest.Size(m)
}
func (m *GetTagMessagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTagMessagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTagMessagesRequest proto.InternalMessageInfo

func (m *GetTagMessagesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *GetTagMessagesRequest) GetTagIds() []string {
	if m != nil {
		return m.TagIds
	}
	return nil
}

type GetTagMessagesResponse struct {
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Only present for a new tag message
	TagId                string   `protobuf:"bytes,3,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTagMessagesResponse) Reset()         { *m = GetTagMessagesResponse{} }
func (m *GetTagMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*GetTagMessagesResponse) ProtoMessage()    {}
func (*GetTagMessagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{33}
}
func (m *GetTagMessagesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTagMessagesResponse.Unmarshal(m, b)
}
func (m *GetTagMessagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTagMessagesResponse.Marshal(b, m, deterministic)
}
func (dst *GetTagMessagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTagMessagesResponse.Merge(dst, src)
}
func (m *GetTagMessagesResponse) XXX_Size() int {
	return xxx_messageInfo_GetTagMessagesResponse.Size(m)
}
func (m *GetTagMessagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTagMessagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTagMessagesResponse proto.InternalMessageInfo

func (m *GetTagMessagesResponse) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *GetTagMessagesResponse) GetTagId() string {
	if m != nil {
		return m.TagId
	}
	return ""
}

type ListNewCommitsRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	CommitId             string      `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListNewCommitsRequest) Reset()         { *m = ListNewCommitsRequest{} }
func (m *ListNewCommitsRequest) String() string { return proto.CompactTextString(m) }
func (*ListNewCommitsRequest) ProtoMessage()    {}
func (*ListNewCommitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{34}
}
func (m *ListNewCommitsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNewCommitsRequest.Unmarshal(m, b)
}
func (m *ListNewCommitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNewCommitsRequest.Marshal(b, m, deterministic)
}
func (dst *ListNewCommitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNewCommitsRequest.Merge(dst, src)
}
func (m *ListNewCommitsRequest) XXX_Size() int {
	return xxx_messageInfo_ListNewCommitsRequest.Size(m)
}
func (m *ListNewCommitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNewCommitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNewCommitsRequest proto.InternalMessageInfo

func (m *ListNewCommitsRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ListNewCommitsRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type ListNewCommitsResponse struct {
	Commits              []*GitCommit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListNewCommitsResponse) Reset()         { *m = ListNewCommitsResponse{} }
func (m *ListNewCommitsResponse) String() string { return proto.CompactTextString(m) }
func (*ListNewCommitsResponse) ProtoMessage()    {}
func (*ListNewCommitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{35}
}
func (m *ListNewCommitsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNewCommitsResponse.Unmarshal(m, b)
}
func (m *ListNewCommitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNewCommitsResponse.Marshal(b, m, deterministic)
}
func (dst *ListNewCommitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNewCommitsResponse.Merge(dst, src)
}
func (m *ListNewCommitsResponse) XXX_Size() int {
	return xxx_messageInfo_ListNewCommitsResponse.Size(m)
}
func (m *ListNewCommitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNewCommitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNewCommitsResponse proto.InternalMessageInfo

func (m *ListNewCommitsResponse) GetCommits() []*GitCommit {
	if m != nil {
		return m.Commits
	}
	return nil
}

type FindAllRemoteBranchesRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	RemoteName           string      `protobuf:"bytes,2,opt,name=remote_name,json=remoteName,proto3" json:"remote_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindAllRemoteBranchesRequest) Reset()         { *m = FindAllRemoteBranchesRequest{} }
func (m *FindAllRemoteBranchesRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllRemoteBranchesRequest) ProtoMessage()    {}
func (*FindAllRemoteBranchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{36}
}
func (m *FindAllRemoteBranchesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllRemoteBranchesRequest.Unmarshal(m, b)
}
func (m *FindAllRemoteBranchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllRemoteBranchesRequest.Marshal(b, m, deterministic)
}
func (dst *FindAllRemoteBranchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllRemoteBranchesRequest.Merge(dst, src)
}
func (m *FindAllRemoteBranchesRequest) XXX_Size() int {
	return xxx_messageInfo_FindAllRemoteBranchesRequest.Size(m)
}
func (m *FindAllRemoteBranchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllRemoteBranchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllRemoteBranchesRequest proto.InternalMessageInfo

func (m *FindAllRemoteBranchesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindAllRemoteBranchesRequest) GetRemoteName() string {
	if m != nil {
		return m.RemoteName
	}
	return ""
}

type FindAllRemoteBranchesResponse struct {
	Branches             []*Branch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FindAllRemoteBranchesResponse) Reset()         { *m = FindAllRemoteBranchesResponse{} }
func (m *FindAllRemoteBranchesResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllRemoteBranchesResponse) ProtoMessage()    {}
func (*FindAllRemoteBranchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ref_15e26c5c2600d751, []int{37}
}
func (m *FindAllRemoteBranchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllRemoteBranchesResponse.Unmarshal(m, b)
}
func (m *FindAllRemoteBranchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllRemoteBranchesResponse.Marshal(b, m, deterministic)
}
func (dst *FindAllRemoteBranchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllRemoteBranchesResponse.Merge(dst, src)
}
func (m *FindAllRemoteBranchesResponse) XXX_Size() int {
	return xxx_messageInfo_FindAllRemoteBranchesResponse.Size(m)
}
func (m *FindAllRemoteBranchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllRemoteBranchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllRemoteBranchesResponse proto.InternalMessageInfo

func (m *FindAllRemoteBranchesResponse) GetBranches() []*Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

func init() {
	proto.RegisterType((*ListNewBlobsRequest)(nil), "gitaly.ListNewBlobsRequest")
	proto.RegisterType((*ListNewBlobsResponse)(nil), "gitaly.ListNewBlobsResponse")
	proto.RegisterType((*FindDefaultBranchNameRequest)(nil), "gitaly.FindDefaultBranchNameRequest")
	proto.RegisterType((*FindDefaultBranchNameResponse)(nil), "gitaly.FindDefaultBranchNameResponse")
	proto.RegisterType((*FindAllBranchNamesRequest)(nil), "gitaly.FindAllBranchNamesRequest")
	proto.RegisterType((*FindAllBranchNamesResponse)(nil), "gitaly.FindAllBranchNamesResponse")
	proto.RegisterType((*FindAllTagNamesRequest)(nil), "gitaly.FindAllTagNamesRequest")
	proto.RegisterType((*FindAllTagNamesResponse)(nil), "gitaly.FindAllTagNamesResponse")
	proto.RegisterType((*FindRefNameRequest)(nil), "gitaly.FindRefNameRequest")
	proto.RegisterType((*FindRefNameResponse)(nil), "gitaly.FindRefNameResponse")
	proto.RegisterType((*FindLocalBranchesRequest)(nil), "gitaly.FindLocalBranchesRequest")
	proto.RegisterType((*FindLocalBranchesResponse)(nil), "gitaly.FindLocalBranchesResponse")
	proto.RegisterType((*FindLocalBranchResponse)(nil), "gitaly.FindLocalBranchResponse")
	proto.RegisterType((*FindLocalBranchCommitAuthor)(nil), "gitaly.FindLocalBranchCommitAuthor")
	proto.RegisterType((*FindAllBranchesRequest)(nil), "gitaly.FindAllBranchesRequest")
	proto.RegisterType((*FindAllBranchesResponse)(nil), "gitaly.FindAllBranchesResponse")
	proto.RegisterType((*FindAllBranchesResponse_Branch)(nil), "gitaly.FindAllBranchesResponse.Branch")
	proto.RegisterType((*FindAllTagsRequest)(nil), "gitaly.FindAllTagsRequest")
	proto.RegisterType((*FindAllTagsResponse)(nil), "gitaly.FindAllTagsResponse")
	proto.RegisterType((*RefExistsRequest)(nil), "gitaly.RefExistsRequest")
	proto.RegisterType((*RefExistsResponse)(nil), "gitaly.RefExistsResponse")
	proto.RegisterType((*CreateBranchRequest)(nil), "gitaly.CreateBranchRequest")
	proto.RegisterType((*CreateBranchResponse)(nil), "gitaly.CreateBranchResponse")
	proto.RegisterType((*DeleteBranchRequest)(nil), "gitaly.DeleteBranchRequest")
	proto.RegisterType((*DeleteBranchResponse)(nil), "gitaly.DeleteBranchResponse")
	proto.RegisterType((*FindBranchRequest)(nil), "gitaly.FindBranchRequest")
	proto.RegisterType((*FindBranchResponse)(nil), "gitaly.FindBranchResponse")
	proto.RegisterType((*DeleteRefsRequest)(nil), "gitaly.DeleteRefsRequest")
	proto.RegisterType((*DeleteRefsResponse)(nil), "gitaly.DeleteRefsResponse")
	proto.RegisterType((*ListBranchNamesContainingCommitRequest)(nil), "gitaly.ListBranchNamesContainingCommitRequest")
	proto.RegisterType((*ListBranchNamesContainingCommitResponse)(nil), "gitaly.ListBranchNamesContainingCommitResponse")
	proto.RegisterType((*ListTagNamesContainingCommitRequest)(nil), "gitaly.ListTagNamesContainingCommitRequest")
	proto.RegisterType((*ListTagNamesContainingCommitResponse)(nil), "gitaly.ListTagNamesContainingCommitResponse")
	proto.RegisterType((*GetTagMessagesRequest)(nil), "gitaly.GetTagMessagesRequest")
	proto.RegisterType((*GetTagMessagesResponse)(nil), "gitaly.GetTagMessagesResponse")
	proto.RegisterType((*ListNewCommitsRequest)(nil), "gitaly.ListNewCommitsRequest")
	proto.RegisterType((*ListNewCommitsResponse)(nil), "gitaly.ListNewCommitsResponse")
	proto.RegisterType((*FindAllRemoteBranchesRequest)(nil), "gitaly.FindAllRemoteBranchesRequest")
	proto.RegisterType((*FindAllRemoteBranchesResponse)(nil), "gitaly.FindAllRemoteBranchesResponse")
	proto.RegisterEnum("gitaly.FindLocalBranchesRequest_SortBy", FindLocalBranchesRequest_SortBy_name, FindLocalBranchesRequest_SortBy_value)
	proto.RegisterEnum("gitaly.CreateBranchResponse_Status", CreateBranchResponse_Status_name, CreateBranchResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RefServiceClient is the client API for RefService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RefServiceClient interface {
	FindDefaultBranchName(ctx context.Context, in *FindDefaultBranchNameRequest, opts ...grpc.CallOption) (*FindDefaultBranchNameResponse, error)
	FindAllBranchNames(ctx context.Context, in *FindAllBranchNamesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchNamesClient, error)
	FindAllTagNames(ctx context.Context, in *FindAllTagNamesRequest, opts ...grpc.CallOption) (RefService_FindAllTagNamesClient, error)
	// Find a Ref matching the given constraints. Response may be empty.
	FindRefName(ctx context.Context, in *FindRefNameRequest, opts ...grpc.CallOption) (*FindRefNameResponse, error)
	// Return a stream so we can divide the response in chunks of branches
	FindLocalBranches(ctx context.Context, in *FindLocalBranchesRequest, opts ...grpc.CallOption) (RefService_FindLocalBranchesClient, error)
	FindAllBranches(ctx context.Context, in *FindAllBranchesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchesClient, error)
	FindAllTags(ctx context.Context, in *FindAllTagsRequest, opts ...grpc.CallOption) (RefService_FindAllTagsClient, error)
	FindAllRemoteBranches(ctx context.Context, in *FindAllRemoteBranchesRequest, opts ...grpc.CallOption) (RefService_FindAllRemoteBranchesClient, error)
	RefExists(ctx context.Context, in *RefExistsRequest, opts ...grpc.CallOption) (*RefExistsResponse, error)
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error)
	FindBranch(ctx context.Context, in *FindBranchRequest, opts ...grpc.CallOption) (*FindBranchResponse, error)
	DeleteRefs(ctx context.Context, in *DeleteRefsRequest, opts ...grpc.CallOption) (*DeleteRefsResponse, error)
	ListBranchNamesContainingCommit(ctx context.Context, in *ListBranchNamesContainingCommitRequest, opts ...grpc.CallOption) (RefService_ListBranchNamesContainingCommitClient, error)
	ListTagNamesContainingCommit(ctx context.Context, in *ListTagNamesContainingCommitRequest, opts ...grpc.CallOption) (RefService_ListTagNamesContainingCommitClient, error)
	GetTagMessages(ctx context.Context, in *GetTagMessagesRequest, opts ...grpc.CallOption) (RefService_GetTagMessagesClient, error)
	// Returns commits that are only reachable from the ref passed
	ListNewCommits(ctx context.Context, in *ListNewCommitsRequest, opts ...grpc.CallOption) (RefService_ListNewCommitsClient, error)
	ListNewBlobs(ctx context.Context, in *ListNewBlobsRequest, opts ...grpc.CallOption) (RefService_ListNewBlobsClient, error)
}

type refServiceClient struct {
	cc *grpc.ClientConn
}

func NewRefServiceClient(cc *grpc.ClientConn) RefServiceClient {
	return &refServiceClient{cc}
}

func (c *refServiceClient) FindDefaultBranchName(ctx context.Context, in *FindDefaultBranchNameRequest, opts ...grpc.CallOption) (*FindDefaultBranchNameResponse, error) {
	out := new(FindDefaultBranchNameResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/FindDefaultBranchName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) FindAllBranchNames(ctx context.Context, in *FindAllBranchNamesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[0], "/gitaly.RefService/FindAllBranchNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllBranchNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllBranchNamesClient interface {
	Recv() (*FindAllBranchNamesResponse, error)
	grpc.ClientStream
}

type refServiceFindAllBranchNamesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllBranchNamesClient) Recv() (*FindAllBranchNamesResponse, error) {
	m := new(FindAllBranchNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindAllTagNames(ctx context.Context, in *FindAllTagNamesRequest, opts ...grpc.CallOption) (RefService_FindAllTagNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[1], "/gitaly.RefService/FindAllTagNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllTagNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllTagNamesClient interface {
	Recv() (*FindAllTagNamesResponse, error)
	grpc.ClientStream
}

type refServiceFindAllTagNamesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllTagNamesClient) Recv() (*FindAllTagNamesResponse, error) {
	m := new(FindAllTagNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindRefName(ctx context.Context, in *FindRefNameRequest, opts ...grpc.CallOption) (*FindRefNameResponse, error) {
	out := new(FindRefNameResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/FindRefName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) FindLocalBranches(ctx context.Context, in *FindLocalBranchesRequest, opts ...grpc.CallOption) (RefService_FindLocalBranchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[2], "/gitaly.RefService/FindLocalBranches", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindLocalBranchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindLocalBranchesClient interface {
	Recv() (*FindLocalBranchesResponse, error)
	grpc.ClientStream
}

type refServiceFindLocalBranchesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindLocalBranchesClient) Recv() (*FindLocalBranchesResponse, error) {
	m := new(FindLocalBranchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindAllBranches(ctx context.Context, in *FindAllBranchesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[3], "/gitaly.RefService/FindAllBranches", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllBranchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllBranchesClient interface {
	Recv() (*FindAllBranchesResponse, error)
	grpc.ClientStream
}

type refServiceFindAllBranchesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllBranchesClient) Recv() (*FindAllBranchesResponse, error) {
	m := new(FindAllBranchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindAllTags(ctx context.Context, in *FindAllTagsRequest, opts ...grpc.CallOption) (RefService_FindAllTagsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[4], "/gitaly.RefService/FindAllTags", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllTagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllTagsClient interface {
	Recv() (*FindAllTagsResponse, error)
	grpc.ClientStream
}

type refServiceFindAllTagsClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllTagsClient) Recv() (*FindAllTagsResponse, error) {
	m := new(FindAllTagsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindAllRemoteBranches(ctx context.Context, in *FindAllRemoteBranchesRequest, opts ...grpc.CallOption) (RefService_FindAllRemoteBranchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[5], "/gitaly.RefService/FindAllRemoteBranches", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllRemoteBranchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllRemoteBranchesClient interface {
	Recv() (*FindAllRemoteBranchesResponse, error)
	grpc.ClientStream
}

type refServiceFindAllRemoteBranchesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllRemoteBranchesClient) Recv() (*FindAllRemoteBranchesResponse, error) {
	m := new(FindAllRemoteBranchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) RefExists(ctx context.Context, in *RefExistsRequest, opts ...grpc.CallOption) (*RefExistsResponse, error) {
	out := new(RefExistsResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/RefExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/CreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error) {
	out := new(DeleteBranchResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/DeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) FindBranch(ctx context.Context, in *FindBranchRequest, opts ...grpc.CallOption) (*FindBranchResponse, error) {
	out := new(FindBranchResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/FindBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) DeleteRefs(ctx context.Context, in *DeleteRefsRequest, opts ...grpc.CallOption) (*DeleteRefsResponse, error) {
	out := new(DeleteRefsResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/DeleteRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) ListBranchNamesContainingCommit(ctx context.Context, in *ListBranchNamesContainingCommitRequest, opts ...grpc.CallOption) (RefService_ListBranchNamesContainingCommitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[6], "/gitaly.RefService/ListBranchNamesContainingCommit", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceListBranchNamesContainingCommitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_ListBranchNamesContainingCommitClient interface {
	Recv() (*ListBranchNamesContainingCommitResponse, error)
	grpc.ClientStream
}

type refServiceListBranchNamesContainingCommitClient struct {
	grpc.ClientStream
}

func (x *refServiceListBranchNamesContainingCommitClient) Recv() (*ListBranchNamesContainingCommitResponse, error) {
	m := new(ListBranchNamesContainingCommitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) ListTagNamesContainingCommit(ctx context.Context, in *ListTagNamesContainingCommitRequest, opts ...grpc.CallOption) (RefService_ListTagNamesContainingCommitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[7], "/gitaly.RefService/ListTagNamesContainingCommit", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceListTagNamesContainingCommitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_ListTagNamesContainingCommitClient interface {
	Recv() (*ListTagNamesContainingCommitResponse, error)
	grpc.ClientStream
}

type refServiceListTagNamesContainingCommitClient struct {
	grpc.ClientStream
}

func (x *refServiceListTagNamesContainingCommitClient) Recv() (*ListTagNamesContainingCommitResponse, error) {
	m := new(ListTagNamesContainingCommitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) GetTagMessages(ctx context.Context, in *GetTagMessagesRequest, opts ...grpc.CallOption) (RefService_GetTagMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[8], "/gitaly.RefService/GetTagMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceGetTagMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_GetTagMessagesClient interface {
	Recv() (*GetTagMessagesResponse, error)
	grpc.ClientStream
}

type refServiceGetTagMessagesClient struct {
	grpc.ClientStream
}

func (x *refServiceGetTagMessagesClient) Recv() (*GetTagMessagesResponse, error) {
	m := new(GetTagMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) ListNewCommits(ctx context.Context, in *ListNewCommitsRequest, opts ...grpc.CallOption) (RefService_ListNewCommitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[9], "/gitaly.RefService/ListNewCommits", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceListNewCommitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_ListNewCommitsClient interface {
	Recv() (*ListNewCommitsResponse, error)
	grpc.ClientStream
}

type refServiceListNewCommitsClient struct {
	grpc.ClientStream
}

func (x *refServiceListNewCommitsClient) Recv() (*ListNewCommitsResponse, error) {
	m := new(ListNewCommitsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) ListNewBlobs(ctx context.Context, in *ListNewBlobsRequest, opts ...grpc.CallOption) (RefService_ListNewBlobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[10], "/gitaly.RefService/ListNewBlobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceListNewBlobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_ListNewBlobsClient interface {
	Recv() (*ListNewBlobsResponse, error)
	grpc.ClientStream
}

type refServiceListNewBlobsClient struct {
	grpc.ClientStream
}

func (x *refServiceListNewBlobsClient) Recv() (*ListNewBlobsResponse, error) {
	m := new(ListNewBlobsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RefServiceServer is the server API for RefService service.
type RefServiceServer interface {
	FindDefaultBranchName(context.Context, *FindDefaultBranchNameRequest) (*FindDefaultBranchNameResponse, error)
	FindAllBranchNames(*FindAllBranchNamesRequest, RefService_FindAllBranchNamesServer) error
	FindAllTagNames(*FindAllTagNamesRequest, RefService_FindAllTagNamesServer) error
	// Find a Ref matching the given constraints. Response may be empty.
	FindRefName(context.Context, *FindRefNameRequest) (*FindRefNameResponse, error)
	// Return a stream so we can divide the response in chunks of branches
	FindLocalBranches(*FindLocalBranchesRequest, RefService_FindLocalBranchesServer) error
	FindAllBranches(*FindAllBranchesRequest, RefService_FindAllBranchesServer) error
	FindAllTags(*FindAllTagsRequest, RefService_FindAllTagsServer) error
	FindAllRemoteBranches(*FindAllRemoteBranchesRequest, RefService_FindAllRemoteBranchesServer) error
	RefExists(context.Context, *RefExistsRequest) (*RefExistsResponse, error)
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error)
	FindBranch(context.Context, *FindBranchRequest) (*FindBranchResponse, error)
	DeleteRefs(context.Context, *DeleteRefsRequest) (*DeleteRefsResponse, error)
	ListBranchNamesContainingCommit(*ListBranchNamesContainingCommitRequest, RefService_ListBranchNamesContainingCommitServer) error
	ListTagNamesContainingCommit(*ListTagNamesContainingCommitRequest, RefService_ListTagNamesContainingCommitServer) error
	GetTagMessages(*GetTagMessagesRequest, RefService_GetTagMessagesServer) error
	// Returns commits that are only reachable from the ref passed
	ListNewCommits(*ListNewCommitsRequest, RefService_ListNewCommitsServer) error
	ListNewBlobs(*ListNewBlobsRequest, RefService_ListNewBlobsServer) error
}

func RegisterRefServiceServer(s *grpc.Server, srv RefServiceServer) {
	s.RegisterService(&_RefService_serviceDesc, srv)
}

func _RefService_FindDefaultBranchName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultBranchNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).FindDefaultBranchName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/FindDefaultBranchName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).FindDefaultBranchName(ctx, req.(*FindDefaultBranchNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_FindAllBranchNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllBranchNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllBranchNames(m, &refServiceFindAllBranchNamesServer{stream})
}

type RefService_FindAllBranchNamesServer interface {
	Send(*FindAllBranchNamesResponse) error
	grpc.ServerStream
}

type refServiceFindAllBranchNamesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllBranchNamesServer) Send(m *FindAllBranchNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindAllTagNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllTagNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllTagNames(m, &refServiceFindAllTagNamesServer{stream})
}

type RefService_FindAllTagNamesServer interface {
	Send(*FindAllTagNamesResponse) error
	grpc.ServerStream
}

type refServiceFindAllTagNamesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllTagNamesServer) Send(m *FindAllTagNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindRefName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRefNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).FindRefName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/FindRefName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).FindRefName(ctx, req.(*FindRefNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_FindLocalBranches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindLocalBranchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindLocalBranches(m, &refServiceFindLocalBranchesServer{stream})
}

type RefService_FindLocalBranchesServer interface {
	Send(*FindLocalBranchesResponse) error
	grpc.ServerStream
}

type refServiceFindLocalBranchesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindLocalBranchesServer) Send(m *FindLocalBranchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindAllBranches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllBranchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllBranches(m, &refServiceFindAllBranchesServer{stream})
}

type RefService_FindAllBranchesServer interface {
	Send(*FindAllBranchesResponse) error
	grpc.ServerStream
}

type refServiceFindAllBranchesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllBranchesServer) Send(m *FindAllBranchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindAllTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllTags(m, &refServiceFindAllTagsServer{stream})
}

type RefService_FindAllTagsServer interface {
	Send(*FindAllTagsResponse) error
	grpc.ServerStream
}

type refServiceFindAllTagsServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllTagsServer) Send(m *FindAllTagsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindAllRemoteBranches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllRemoteBranchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllRemoteBranches(m, &refServiceFindAllRemoteBranchesServer{stream})
}

type RefService_FindAllRemoteBranchesServer interface {
	Send(*FindAllRemoteBranchesResponse) error
	grpc.ServerStream
}

type refServiceFindAllRemoteBranchesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllRemoteBranchesServer) Send(m *FindAllRemoteBranchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_RefExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).RefExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/RefExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).RefExists(ctx, req.(*RefExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/CreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_FindBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).FindBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/FindBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).FindBranch(ctx, req.(*FindBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_DeleteRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).DeleteRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/DeleteRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).DeleteRefs(ctx, req.(*DeleteRefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_ListBranchNamesContainingCommit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBranchNamesContainingCommitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).ListBranchNamesContainingCommit(m, &refServiceListBranchNamesContainingCommitServer{stream})
}

type RefService_ListBranchNamesContainingCommitServer interface {
	Send(*ListBranchNamesContainingCommitResponse) error
	grpc.ServerStream
}

type refServiceListBranchNamesContainingCommitServer struct {
	grpc.ServerStream
}

func (x *refServiceListBranchNamesContainingCommitServer) Send(m *ListBranchNamesContainingCommitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_ListTagNamesContainingCommit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTagNamesContainingCommitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).ListTagNamesContainingCommit(m, &refServiceListTagNamesContainingCommitServer{stream})
}

type RefService_ListTagNamesContainingCommitServer interface {
	Send(*ListTagNamesContainingCommitResponse) error
	grpc.ServerStream
}

type refServiceListTagNamesContainingCommitServer struct {
	grpc.ServerStream
}

func (x *refServiceListTagNamesContainingCommitServer) Send(m *ListTagNamesContainingCommitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_GetTagMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTagMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).GetTagMessages(m, &refServiceGetTagMessagesServer{stream})
}

type RefService_GetTagMessagesServer interface {
	Send(*GetTagMessagesResponse) error
	grpc.ServerStream
}

type refServiceGetTagMessagesServer struct {
	grpc.ServerStream
}

func (x *refServiceGetTagMessagesServer) Send(m *GetTagMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_ListNewCommits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNewCommitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).ListNewCommits(m, &refServiceListNewCommitsServer{stream})
}

type RefService_ListNewCommitsServer interface {
	Send(*ListNewCommitsResponse) error
	grpc.ServerStream
}

type refServiceListNewCommitsServer struct {
	grpc.ServerStream
}

func (x *refServiceListNewCommitsServer) Send(m *ListNewCommitsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_ListNewBlobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNewBlobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).ListNewBlobs(m, &refServiceListNewBlobsServer{stream})
}

type RefService_ListNewBlobsServer interface {
	Send(*ListNewBlobsResponse) error
	grpc.ServerStream
}

type refServiceListNewBlobsServer struct {
	grpc.ServerStream
}

func (x *refServiceListNewBlobsServer) Send(m *ListNewBlobsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RefService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.RefService",
	HandlerType: (*RefServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDefaultBranchName",
			Handler:    _RefService_FindDefaultBranchName_Handler,
		},
		{
			MethodName: "FindRefName",
			Handler:    _RefService_FindRefName_Handler,
		},
		{
			MethodName: "RefExists",
			Handler:    _RefService_RefExists_Handler,
		},
		{
			MethodName: "CreateBranch",
			Handler:    _RefService_CreateBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _RefService_DeleteBranch_Handler,
		},
		{
			MethodName: "FindBranch",
			Handler:    _RefService_FindBranch_Handler,
		},
		{
			MethodName: "DeleteRefs",
			Handler:    _RefService_DeleteRefs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindAllBranchNames",
			Handler:       _RefService_FindAllBranchNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllTagNames",
			Handler:       _RefService_FindAllTagNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindLocalBranches",
			Handler:       _RefService_FindLocalBranches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllBranches",
			Handler:       _RefService_FindAllBranches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllTags",
			Handler:       _RefService_FindAllTags_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllRemoteBranches",
			Handler:       _RefService_FindAllRemoteBranches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBranchNamesContainingCommit",
			Handler:       _RefService_ListBranchNamesContainingCommit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTagNamesContainingCommit",
			Handler:       _RefService_ListTagNamesContainingCommit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTagMessages",
			Handler:       _RefService_GetTagMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListNewCommits",
			Handler:       _RefService_ListNewCommits_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListNewBlobs",
			Handler:       _RefService_ListNewBlobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ref.proto",
}

func init() { proto.RegisterFile("ref.proto", fileDescriptor_ref_15e26c5c2600d751) }

var fileDescriptor_ref_15e26c5c2600d751 = []byte{
	// 1539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x5b, 0x6f, 0xdb, 0xc6,
	0x12, 0x36, 0x65, 0x5b, 0x96, 0x46, 0x8a, 0x4c, 0xaf, 0x2f, 0x51, 0xe8, 0x24, 0x76, 0x36, 0x37,
	0xe7, 0x24, 0x90, 0xcf, 0x51, 0x70, 0xfa, 0xd2, 0x02, 0xad, 0x6c, 0xab, 0x89, 0x13, 0xc7, 0x36,
	0x56, 0x6a, 0x92, 0xa2, 0x2d, 0x08, 0xca, 0x5a, 0xd1, 0x2c, 0x28, 0x51, 0x25, 0x57, 0x71, 0x0c,
	0x34, 0x7d, 0x2c, 0x50, 0xb4, 0x40, 0xdf, 0xfa, 0x13, 0xfa, 0x57, 0xfa, 0xd0, 0x97, 0xfe, 0xa4,
	0x82, 0xbb, 0xcb, 0x9b, 0x44, 0xc9, 0x46, 0xd5, 0xb4, 0x4f, 0xd2, 0xce, 0xce, 0x7c, 0x73, 0xd9,
	0xd9, 0x99, 0x59, 0x42, 0xde, 0xa5, 0x9d, 0x4a, 0xdf, 0x75, 0x98, 0x83, 0xb2, 0xa6, 0xc5, 0x0c,
	0xfb, 0x5c, 0x83, 0x96, 0xed, 0xb4, 0x04, 0x4d, 0x2b, 0x7a, 0xa7, 0x86, 0x4b, 0xdb, 0x72, 0xb5,
	0x61, 0x3a, 0x8e, 0x69, 0xd3, 0x6d, 0xbe, 0x6a, 0x0d, 0x3a, 0xdb, 0xcc, 0xea, 0x52, 0x8f, 0x19,
	0xdd, 0xbe, 0x60, 0xc0, 0xdf, 0xc2, 0xf2, 0x81, 0xe5, 0xb1, 0x43, 0x7a, 0xb6, 0x63, 0x3b, 0x2d,
	0x8f, 0xd0, 0x6f, 0x06, 0xd4, 0x63, 0xa8, 0x0a, 0xe0, 0xd2, 0xbe, 0xe3, 0x59, 0xcc, 0x71, 0xcf,
	0xcb, 0xca, 0xa6, 0xb2, 0x55, 0xa8, 0xa2, 0x8a, 0x50, 0x57, 0x21, 0xe1, 0x0e, 0x89, 0x71, 0xa1,
	0x75, 0xc8, 0x9f, 0x38, 0xdd, 0xae, 0xc5, 0x74, 0xab, 0x5d, 0xce, 0x6c, 0x2a, 0x5b, 0x79, 0x92,
	0x13, 0x84, 0xfd, 0x36, 0x5a, 0x81, 0x79, 0xdb, 0xea, 0x5a, 0xac, 0x3c, 0xbb, 0xa9, 0x6c, 0x5d,
	0x21, 0x62, 0x81, 0x5f, 0xc1, 0x4a, 0x52, 0xbb, 0xd7, 0x77, 0x7a, 0x1e, 0x45, 0x1f, 0x83, 0xda,
	0xa3, 0x67, 0xba, 0xef, 0x96, 0xee, 0xb4, 0xbe, 0xa6, 0x27, 0xcc, 0x2b, 0x2b, 0x9b, 0xb3, 0x5b,
	0x85, 0xea, 0x6a, 0x60, 0x84, 0x94, 0x39, 0xe2, 0xbb, 0xa4, 0xd4, 0x8b, 0x2f, 0x3d, 0x4c, 0xe0,
	0xfa, 0xa7, 0x56, 0xaf, 0xbd, 0x47, 0x3b, 0xc6, 0xc0, 0x66, 0x3b, 0xae, 0xd1, 0x3b, 0x39, 0x3d,
	0x34, 0xba, 0x74, 0x0a, 0xff, 0xf0, 0x63, 0xb8, 0x31, 0x06, 0x53, 0x5a, 0x8d, 0x60, 0xae, 0x67,
	0x74, 0x29, 0x87, 0x2b, 0x12, 0xfe, 0x1f, 0x1f, 0xc1, 0x35, 0x5f, 0xa8, 0x66, 0xdb, 0x91, 0xc0,
	0x34, 0x51, 0xc6, 0x55, 0xd0, 0xd2, 0x00, 0xa5, 0x09, 0x2b, 0x30, 0xef, 0xab, 0x15, 0xd1, 0x2a,
	0x12, 0xb1, 0xc0, 0x07, 0xb0, 0x26, 0x65, 0x9a, 0x86, 0x39, 0xb5, 0x05, 0xdb, 0x70, 0x75, 0x04,
	0x6d, 0xa2, 0xfa, 0x77, 0x80, 0x7c, 0x01, 0x42, 0x3b, 0x53, 0x1e, 0xc1, 0xe4, 0x14, 0x5b, 0x83,
	0x6c, 0xdf, 0xa5, 0x1d, 0xeb, 0x2d, 0xcf, 0xb1, 0x22, 0x91, 0x2b, 0xfc, 0x00, 0x96, 0x13, 0xea,
	0x27, 0x9c, 0xd6, 0x6f, 0x0a, 0x94, 0x7d, 0xde, 0x03, 0xe7, 0xc4, 0x90, 0xf1, 0x9d, 0x2a, 0x56,
	0xe8, 0x13, 0x58, 0xf0, 0x1c, 0x97, 0xe9, 0xad, 0x73, 0x6e, 0x6e, 0xa9, 0x7a, 0x3f, 0x10, 0x18,
	0xa7, 0xa6, 0xd2, 0x70, 0x5c, 0xb6, 0x73, 0x4e, 0xb2, 0x1e, 0xff, 0xc5, 0xff, 0x87, 0xac, 0xa0,
	0xa0, 0x1c, 0xcc, 0x1d, 0xd6, 0x5e, 0xd4, 0xd5, 0x19, 0xb4, 0x08, 0x85, 0xcf, 0x8e, 0xf7, 0x6a,
	0xcd, 0xfa, 0x9e, 0x5e, 0x6b, 0xec, 0xaa, 0x0a, 0x52, 0xa1, 0x18, 0x10, 0xf6, 0xea, 0x8d, 0x5d,
	0x35, 0x83, 0x5f, 0x8b, 0xbc, 0x1b, 0xd2, 0x20, 0x5d, 0xff, 0x10, 0x72, 0x2d, 0x49, 0x93, 0xd7,
	0x6a, 0x63, 0x8c, 0x59, 0x81, 0x08, 0x09, 0x05, 0xf0, 0x8f, 0x19, 0x71, 0xfe, 0x29, 0x5c, 0x69,
	0x31, 0x9d, 0x7c, 0x66, 0x77, 0xa1, 0x24, 0x37, 0xbd, 0x01, 0xbf, 0xba, 0xf2, 0xec, 0xae, 0x08,
	0x6a, 0x43, 0x10, 0xd1, 0x53, 0x90, 0x04, 0xdd, 0x18, 0xb0, 0x53, 0xc7, 0x2d, 0xcf, 0xf1, 0xe8,
	0xdf, 0x1e, 0x63, 0xf5, 0x2e, 0xe7, 0xad, 0x71, 0x56, 0x52, 0x3c, 0x89, 0xad, 0xd0, 0x21, 0xa8,
	0x12, 0x49, 0xfc, 0x30, 0xea, 0x96, 0xe7, 0x2f, 0x0f, 0xb6, 0x28, 0xa4, 0x76, 0x03, 0x59, 0x7c,
	0x06, 0xeb, 0x13, 0xf8, 0x53, 0x03, 0xb2, 0x02, 0xf3, 0xb4, 0x6b, 0x58, 0x36, 0x0f, 0x46, 0x91,
	0x88, 0x05, 0xaa, 0xc0, 0x5c, 0xdb, 0x60, 0x94, 0xfb, 0x5f, 0xa8, 0x6a, 0x15, 0x51, 0xb8, 0x2b,
	0x41, 0xe1, 0xae, 0x34, 0x83, 0xc2, 0x4d, 0x38, 0x1f, 0xfe, 0x45, 0x09, 0x2f, 0xf5, 0xdf, 0x91,
	0xa8, 0x1b, 0x50, 0xe8, 0x52, 0xd7, 0xa4, 0x6d, 0xdd, 0xe9, 0xd9, 0x22, 0x59, 0x73, 0x04, 0x04,
	0xe9, 0xa8, 0x67, 0x9f, 0xa3, 0xfb, 0xb0, 0x28, 0x19, 0xc2, 0xd4, 0x99, 0xe5, 0x97, 0xbc, 0x24,
	0xc8, 0x81, 0x11, 0xf8, 0x57, 0x25, 0xac, 0x0f, 0x23, 0x89, 0xb7, 0x33, 0x92, 0x78, 0xf7, 0xe2,
	0x51, 0x4f, 0x11, 0xa9, 0xc8, 0x0c, 0x0b, 0xe5, 0xb4, 0x27, 0x90, 0x15, 0xb4, 0xd4, 0xe0, 0x3e,
	0x80, 0x2c, 0x33, 0x5c, 0x93, 0x32, 0xee, 0x42, 0xa1, 0xba, 0x14, 0xe0, 0x3f, 0x09, 0x4e, 0x8d,
	0x48, 0x06, 0xfc, 0x54, 0x94, 0x25, 0x51, 0xc7, 0xa6, 0xaa, 0x88, 0x1f, 0x88, 0x0a, 0x13, 0x22,
	0x49, 0x6f, 0x37, 0x60, 0x8e, 0x19, 0x66, 0xe0, 0x69, 0x21, 0x00, 0x69, 0x1a, 0x26, 0xe1, 0x1b,
	0xf8, 0x35, 0xa8, 0x84, 0x76, 0xea, 0x6f, 0x2d, 0x8f, 0x4d, 0x75, 0x78, 0x2a, 0xcc, 0xba, 0xb4,
	0x23, 0xf3, 0xc9, 0xff, 0x8b, 0x1f, 0xc0, 0x52, 0x0c, 0x39, 0xaa, 0xce, 0x6f, 0x0c, 0x7b, 0x20,
	0x02, 0x96, 0x23, 0x62, 0x81, 0xbf, 0x83, 0xe5, 0x5d, 0x97, 0x1a, 0x8c, 0x06, 0x77, 0xf9, 0xaf,
	0xdb, 0x11, 0x1c, 0x48, 0x26, 0x76, 0x20, 0x1b, 0x50, 0xf0, 0x98, 0xe1, 0x32, 0xbd, 0xef, 0x58,
	0xbd, 0xe0, 0x7a, 0x03, 0x27, 0x1d, 0xfb, 0x14, 0xfc, 0xbb, 0x02, 0x2b, 0x49, 0x03, 0xc2, 0x2a,
	0x95, 0xf5, 0x98, 0xc1, 0x06, 0x1e, 0xd7, 0x5e, 0x8a, 0x2e, 0x68, 0x1a, 0x77, 0xa5, 0xc1, 0x59,
	0x89, 0x14, 0x41, 0xf7, 0x20, 0x2b, 0x32, 0x46, 0xe6, 0x41, 0x29, 0x10, 0x96, 0x62, 0x72, 0x17,
	0x1f, 0x42, 0x56, 0x48, 0xa2, 0x2c, 0x64, 0x8e, 0x9e, 0xab, 0x33, 0xa8, 0x04, 0x50, 0x27, 0x44,
	0xaf, 0xbf, 0xde, 0x6f, 0x34, 0x1b, 0xaa, 0xe2, 0x17, 0x5b, 0x7f, 0xbd, 0x7f, 0xf8, 0xb2, 0x76,
	0xb0, 0xbf, 0xa7, 0x66, 0xd0, 0x3a, 0x5c, 0x8d, 0x11, 0xf4, 0x46, 0xb3, 0x46, 0x9a, 0xfa, 0xf1,
	0xd1, 0xfe, 0x61, 0x53, 0x9d, 0xc5, 0x5f, 0xc1, 0xf2, 0x1e, 0xb5, 0xe9, 0x7b, 0x8a, 0x26, 0x5e,
	0x83, 0x95, 0x24, 0xbc, 0xf0, 0x1e, 0x7f, 0x01, 0x4b, 0x7e, 0x06, 0xbe, 0x1f, 0xa5, 0x1f, 0x89,
	0x8b, 0x32, 0x74, 0x3c, 0x51, 0x84, 0x95, 0x89, 0x11, 0xfe, 0x41, 0x81, 0x25, 0x61, 0x33, 0xa1,
	0x9d, 0xa9, 0xd2, 0xfc, 0x11, 0x20, 0xfa, 0xf6, 0x84, 0xf6, 0x99, 0x7e, 0x66, 0xb1, 0x53, 0x5d,
	0x36, 0xfb, 0x0c, 0xaf, 0x42, 0xaa, 0xd8, 0x79, 0x65, 0xb1, 0xd3, 0x63, 0x4e, 0xf7, 0x3d, 0x71,
	0x69, 0x27, 0xa8, 0x52, 0xfc, 0x3f, 0xfe, 0x1f, 0xa0, 0xb8, 0x29, 0xd2, 0x93, 0x75, 0xc8, 0x9b,
	0x16, 0xd3, 0xa9, 0xeb, 0x3a, 0x2e, 0x37, 0x25, 0x4f, 0x72, 0xa6, 0xc5, 0xea, 0xfe, 0x1a, 0xff,
	0xac, 0xc0, 0x3d, 0x7f, 0x46, 0x8d, 0x4d, 0x5b, 0xbb, 0x4e, 0x8f, 0x19, 0x56, 0xcf, 0xea, 0x99,
	0xb2, 0xa2, 0xfc, 0xb3, 0x43, 0x33, 0x81, 0xfb, 0x17, 0x1a, 0x24, 0x3d, 0xbb, 0x05, 0x45, 0x71,
	0x0a, 0xba, 0x18, 0xcb, 0x44, 0xac, 0x0a, 0xad, 0x48, 0xf4, 0xd9, 0x5c, 0x4e, 0x51, 0x33, 0xf8,
	0x27, 0x05, 0x6e, 0xfb, 0xa0, 0xc1, 0x44, 0xf7, 0x2f, 0xbb, 0xb8, 0x0f, 0x77, 0x26, 0x5b, 0x13,
	0x9d, 0x1c, 0x33, 0xcc, 0x84, 0x73, 0x39, 0x26, 0x85, 0xa4, 0x67, 0x03, 0x58, 0x7d, 0x42, 0x7d,
	0xa4, 0x17, 0xd4, 0xf3, 0x0c, 0x73, 0xba, 0x2e, 0x79, 0x15, 0x16, 0x7c, 0x7d, 0x56, 0x5b, 0xa4,
	0x55, 0xde, 0xef, 0x25, 0xe6, 0x7e, 0xdb, 0xd7, 0x95, 0x51, 0x67, 0x49, 0x64, 0x0c, 0xfe, 0x1c,
	0xd6, 0x86, 0xd5, 0x4a, 0x9b, 0xcb, 0xb0, 0xd0, 0x15, 0x34, 0x79, 0xc9, 0x82, 0x25, 0x5a, 0xf5,
	0x7b, 0x97, 0x8f, 0xce, 0x83, 0x91, 0x27, 0xf3, 0x1c, 0x5c, 0xf8, 0xc1, 0xfd, 0xe2, 0xd8, 0xf8,
	0x14, 0x56, 0xe5, 0xa3, 0x49, 0x44, 0xe3, 0xbd, 0x3d, 0xda, 0x70, 0x1d, 0xd6, 0x86, 0x35, 0x49,
	0x27, 0x1e, 0xc2, 0x82, 0xe0, 0x0a, 0xba, 0x5b, 0x4a, 0x9f, 0x0d, 0x38, 0xb0, 0x27, 0x1e, 0x63,
	0x35, 0xdb, 0x26, 0xb4, 0xeb, 0x04, 0xb5, 0x6b, 0xea, 0x79, 0xc5, 0xe5, 0x60, 0x7a, 0x58, 0xae,
	0xf2, 0x3e, 0x83, 0x4f, 0xf2, 0x8f, 0x1f, 0x3f, 0x17, 0xaf, 0xb5, 0x14, 0xa5, 0xd2, 0x85, 0xff,
	0x8c, 0xcc, 0x22, 0xc3, 0x15, 0x2c, 0xdc, 0xaf, 0xfe, 0x51, 0x04, 0x20, 0xb4, 0xd3, 0xa0, 0xee,
	0x1b, 0xeb, 0x84, 0xa2, 0x0e, 0xac, 0xa6, 0xbe, 0x04, 0xd1, 0x9d, 0xf8, 0x34, 0x33, 0xee, 0xf1,
	0xa9, 0xdd, 0xbd, 0x80, 0x4b, 0xd6, 0xf4, 0x19, 0xa4, 0x87, 0x13, 0x4a, 0xec, 0xb2, 0xa3, 0x5b,
	0xa9, 0x23, 0x53, 0xfc, 0x59, 0xa7, 0xe1, 0x49, 0x2c, 0x01, 0xfc, 0x7f, 0x15, 0xf4, 0x12, 0x16,
	0x87, 0x9e, 0x72, 0xe8, 0xe6, 0x90, 0xe8, 0xd0, 0x8b, 0x51, 0xdb, 0x18, 0xbb, 0x1f, 0xc3, 0x7d,
	0x0a, 0x85, 0xd8, 0x93, 0x0b, 0x69, 0x71, 0x99, 0xe4, 0x33, 0x50, 0x5b, 0x4f, 0xdd, 0x0b, 0x43,
	0xf0, 0xa5, 0x68, 0x6c, 0x89, 0x77, 0x0c, 0xda, 0xbc, 0xe8, 0x11, 0xa5, 0xdd, 0x9a, 0xc0, 0x91,
	0xea, 0x7f, 0x88, 0x7d, 0x73, 0xec, 0x40, 0x9a, 0xee, 0x7f, 0x2a, 0xee, 0x33, 0xe1, 0xbf, 0x1c,
	0x08, 0x93, 0xfe, 0x27, 0xe7, 0xcd, 0xa4, 0xff, 0x43, 0x13, 0x24, 0xc7, 0x3a, 0x15, 0xc9, 0x36,
	0x92, 0xc8, 0xc9, 0x64, 0x1b, 0x77, 0xb9, 0x92, 0xc9, 0x36, 0xf6, 0x36, 0x70, 0x4d, 0x3b, 0x90,
	0x0f, 0x87, 0x46, 0x54, 0x8e, 0x2e, 0x60, 0x72, 0x42, 0xd5, 0xae, 0xa5, 0xec, 0x84, 0xe7, 0xf5,
	0x1c, 0x8a, 0xf1, 0xf1, 0x0c, 0xad, 0xa7, 0x0f, 0x6d, 0x02, 0xe9, 0xfa, 0xa4, 0x89, 0x4e, 0x80,
	0xc5, 0xa7, 0x9d, 0x08, 0x2c, 0x65, 0xc4, 0x8a, 0xc0, 0x52, 0x07, 0xa4, 0x19, 0x54, 0x07, 0x88,
	0xa6, 0x18, 0x74, 0x2d, 0x1e, 0x96, 0x24, 0x90, 0x96, 0xb6, 0x15, 0x87, 0x89, 0x46, 0x88, 0x08,
	0x66, 0x64, 0xc2, 0x89, 0x60, 0x46, 0x27, 0x0e, 0x3c, 0x83, 0xbe, 0x57, 0x60, 0xe3, 0x82, 0x2e,
	0x8e, 0x2a, 0x01, 0xc2, 0xe5, 0xe6, 0x0f, 0x6d, 0xfb, 0xd2, 0xfc, 0xb1, 0x43, 0x7f, 0x07, 0xd7,
	0x27, 0xb5, 0x5a, 0xf4, 0x30, 0x0e, 0x7a, 0xc1, 0x78, 0xa0, 0x3d, 0xba, 0x1c, 0x73, 0x4c, 0x7d,
	0x03, 0x4a, 0xc9, 0x3e, 0x89, 0x6e, 0x84, 0x9d, 0x24, 0xad, 0x6d, 0x6b, 0x37, 0xc7, 0x6d, 0x27,
	0x41, 0x93, 0x7d, 0x2b, 0x02, 0x4d, 0xed, 0x9c, 0x11, 0x68, 0x7a, 0xbb, 0xe3, 0xa0, 0x2f, 0xa0,
	0x18, 0xff, 0x56, 0x19, 0x25, 0x63, 0xca, 0xf7, 0xd3, 0x28, 0x19, 0xd3, 0x3e, 0x6f, 0xfa, 0x70,
	0xad, 0x2c, 0x7f, 0xd9, 0x3f, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x95, 0x40, 0x62, 0xcf,
	0x15, 0x00, 0x00,
}
