syntax = "proto3";

package gitaly;

// The Git 'smart HTTP' protocol
service SmartHTTP {
  // The response body for GET /info/refs?service=git-upload-pack
  rpc InfoRefsUploadPack(InfoRefsRequest) returns (stream InfoRefsResponse) {}

  // The response body for GET /info/refs?service=git-receive-pack
  rpc InfoRefsReceivePack(InfoRefsRequest) returns (stream InfoRefsResponse) {}
}

service Notifications {
  rpc PostReceive(PostReceiveRequest) returns (PostReceiveResponse) {}
}

service Ref {
  // Find a Ref matching the given constraints. Response may be empty.
  rpc FindRefName(FindRefNameRequest) returns (FindRefNameResponse) {}
}

service Commit {
  rpc CommitIsAncestor(CommitIsAncestorRequest) returns (CommitIsAncestorResponse) {}
}

message CommitIsAncestorResponse {
  bool value = 1;
}

message InfoRefsRequest {
  Repository repository = 1;
}

message InfoRefsResponse {
  bytes data = 1;
}

message Repository {
  string path = 1;
}

message PostReceiveRequest {
  Repository repository = 1;
}

message PostReceiveResponse {}

message FindRefNameRequest {
  Repository repository = 1;
  // Require that the resulting ref contains this commit as an ancestor
  string commit_id = 2;
  // Example prefix: "refs/heads/". Type bytes because that is the type of ref names.
  bytes prefix = 3;
}

message FindRefNameResponse {
  // Example name: "refs/heads/master". Cannot assume UTF8, so the type is bytes.
  bytes name = 1;
}

message CommitIsAncestorRequest {
  Repository repository = 1;
  string ancestor_id = 2;
  string child_id = 3;
}
