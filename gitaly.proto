syntax = "proto3";

package gitaly;

import "shared.proto";

// The Git 'smart HTTP' protocol
service SmartHTTP {
  // The response body for GET /info/refs?service=git-upload-pack
  rpc InfoRefsUploadPack(InfoRefsUploadPackRequest) returns (stream InfoRefsUploadPackResponse) {}

  // The response body for GET /info/refs?service=git-receive-pack
  rpc InfoRefsReceivePack(InfoRefsReceivePackRequest) returns (stream InfoRefsReceivePackResponse) {}
}

service Notifications {
  rpc PostReceive(PostReceiveRequest) returns (PostReceiveResponse) {}
}

service Ref {
  rpc FindDefaultBranchName(FindDefaultBranchNameRequest) returns (FindDefaultBranchNameResponse) {}
  rpc FindAllBranchNames(FindAllBranchNamesRequest) returns (stream FindAllBranchNamesResponse) {}
  rpc FindAllTagNames(FindAllTagNamesRequest) returns (stream FindAllTagNamesResponse) {}
  // Find a Ref matching the given constraints. Response may be empty.
  rpc FindRefName(FindRefNameRequest) returns (FindRefNameResponse) {}
}

service Diff {
  // Returns stream of CommitDiffResponse: 1 per changed file
  rpc CommitDiff(CommitDiffRequest) returns (stream CommitDiffResponse) {};
}

message InfoRefsUploadPackRequest {
  Repository repository = 1;
}

message InfoRefsReceivePackRequest {
  Repository repository = 1;
}

service Commit {
  rpc CommitIsAncestor(CommitIsAncestorRequest) returns (CommitIsAncestorResponse) {}
}

message CommitIsAncestorResponse {
  bool value = 1;
}

message InfoRefsUploadPackResponse {
  bytes data = 1;
}

message InfoRefsReceivePackResponse {
  bytes data = 1;
}

message PostReceiveRequest {
  Repository repository = 1;
}

message PostReceiveResponse {}

message FindRefNameRequest {
  Repository repository = 1;
  // Require that the resulting ref contains this commit as an ancestor
  string commit_id = 2;
  // Example prefix: "refs/heads/". Type bytes because that is the type of ref names.
  bytes prefix = 3;
}

message FindRefNameResponse {
  // Example name: "refs/heads/master". Cannot assume UTF8, so the type is bytes.
  bytes name = 1;
}

message CommitIsAncestorRequest {
  Repository repository = 1;
  string ancestor_id = 2;
  string child_id = 3;
}

message FindDefaultBranchNameRequest {
  Repository repository = 1;
}

message FindAllBranchNamesRequest {
  Repository repository = 1;
}

message FindAllTagNamesRequest {
  Repository repository = 1;
}

message FindDefaultBranchNameResponse {
  bytes name = 1;
}

message FindAllBranchNamesResponse {
  repeated bytes names = 1;
}

message FindAllTagNamesResponse {
  repeated bytes names = 1;
}

message CommitDiffRequest {
  Repository repository = 1;
  string left_commit_id = 2;
  string right_commit_id = 3;
}

// A CommitDiffResponse corresponds to a single changed file in a commit.
message CommitDiffResponse {
  bytes from_path = 1;
  bytes to_path = 2;
  // Blob ID as returned via `git diff --full-index`
  string from_id = 3;
  string to_id = 4;
  int32 old_mode = 5;
  int32 new_mode = 6;
  bool binary = 7;
  repeated bytes raw_chunks = 8;
}
